bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
2522	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [CONTEXT]    RectangleConstraint  constraint)  {  RectangleConstraint  contentConstraint  =  container.toContentConstraint(constraint);  Size2D  contentSize  =  null;  LengthConstraintType  w  =  contentConstraint.getWidthConstraintType();    [BUGGY]  LengthConstraintType  h  =  contentConstraint.getWidthConstraintType();  [BUGGY]    if  (w  ==  LengthConstraintType.NONE)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	135	135	1	add	LengthConstraintType  h  =  contentConstraint.getWidthConstraintType();	LengthConstraintType  h  =  contentConstraint.getHeightConstraintType();  	compilable	  [FE]  AssertionFailedError	127	1
2523	[BUG]  [BUGGY]  LengthConstraintType  h  =  contentConstraint.getWidthConstraintType();    [FE]  AssertionFailedError  [CONTEXT]    RectangleConstraint  constraint)  {  RectangleConstraint  contentConstraint  =  container.toContentConstraint(constraint);  Size2D  contentSize  =  null;  LengthConstraintType  w  =  contentConstraint.getWidthConstraintType();    [BUGGY]  LengthConstraintType  h  =  contentConstraint.getWidthConstraintType();  [BUGGY]    if  (w  ==  LengthConstraintType.NONE)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	135	135	1	replace	LengthConstraintType  h  =  contentConstraint.getWidthConstraintType();	LengthConstraintType  h  =  contentConstraint.getHeightConstraintType();  	compilable	  [FE]  AssertionFailedError	127	1
1442	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1443	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1444	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  *  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  *  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1445	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  *  h[1]  -  h[0];    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  *  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  *  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1445	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  +  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  +  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1446	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  +  h[1]  -  h[0];    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  +  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  +  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1446	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1447	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1448	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  w[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  -  h[1]  -  w[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
1449	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  w[0];    [FE]    double)  [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  w[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  -  h[1]  -  w[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
2781	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.rightBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
2782	[BUG]  [BUGGY]  this.rightBlock  =  null;    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.rightBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
2782	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(this.centerBlock!=  null)  {  leftBlock  =  null;  this.rightBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	if(this.centerBlock!=  null)  {  leftBlock  =  null;  this.rightBlock  =  null;  }		compilable	  [FE]    double)	140	1
2783	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  leftBlock  =  null;  this.rightBlock  =  null;  }    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(this.centerBlock!=  null)  {  leftBlock  =  null;  this.rightBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	if(this.centerBlock!=  null)  {  leftBlock  =  null;  this.rightBlock  =  null;  }		compilable	  [FE]    double)	140	1
2783	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	if(this.rightBlock!=  null)  {  this.leftBlock  =  null;  this.rightBlock  =  null;  }		compilable	  [FE]    double)	140	1
2784	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  this.leftBlock  =  null;  this.rightBlock  =  null;  }    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	if(this.rightBlock!=  null)  {  this.leftBlock  =  null;  this.rightBlock  =  null;  }		compilable	  [FE]    double)	140	1
2784	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.centerBlock  =  null;  this.bottomBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	if(this.rightBlock!=  null)  {  this.centerBlock  =  null;  this.bottomBlock  =  null;  }		compilable	  [FE]    double)	140	1
2785	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  this.centerBlock  =  null;  this.bottomBlock  =  null;  }    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.centerBlock  =  null;  this.bottomBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	if(this.rightBlock!=  null)  {  this.centerBlock  =  null;  this.bottomBlock  =  null;  }		compilable	  [FE]    double)	140	1
2785	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.leftBlock  =  null;  this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
2786	[BUG]  [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.leftBlock  =  null;  this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
2786	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.topBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.topBlock  =  null;		compilable	  [FE]    double)	140	1
2787	[BUG]  [BUGGY]  this.topBlock  =  null;    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.topBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.topBlock  =  null;		compilable	  [FE]    double)	140	1
2787	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.centerBlock  =  null;  this.rightBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.centerBlock  =  null;  this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
2788	[BUG]  [BUGGY]  this.centerBlock  =  null;  this.rightBlock  =  null;    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.centerBlock  =  null;  this.rightBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.centerBlock  =  null;  this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
2788	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(topBlock!=  null)  {  topBlock  =  null;  this.bottomBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	if(topBlock!=  null)  {  topBlock  =  null;  this.bottomBlock  =  null;  }		compilable	  [FE]    double)	140	1
2789	[BUG]  [BUGGY]  if(topBlock!=  null)  {  topBlock  =  null;  this.bottomBlock  =  null;  }    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  if(topBlock!=  null)  {  topBlock  =  null;  this.bottomBlock  =  null;  }  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	if(topBlock!=  null)  {  topBlock  =  null;  this.bottomBlock  =  null;  }		compilable	  [FE]    double)	140	1
2789	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.topBlock  =  null;  this.bottomBlock  =  null;		compilable	  [FE]    double)	140	1
2790	[BUG]  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.topBlock  =  null;  this.bottomBlock  =  null;		compilable	  [FE]    double)	140	1
2790	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.centerBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.centerBlock  =  null;		compilable	  [FE]    double)	140	1
2791	[BUG]  [BUGGY]  this.centerBlock  =  null;    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;    [BUGGY]  this.centerBlock  =  null;  [BUGGY]    this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.centerBlock  =  null;		compilable	  [FE]    double)	140	1
963	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  *  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	add	RectangleConstraint  c4  =  new  RectangleConstraint(width  *  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
964	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  *  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  *  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  *  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
964	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	add	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
965	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.,  null,  LengthConstraintType.NONE);    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
965	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	add	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
966	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  null,  LengthConstraintType.NONE);    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
969	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  h[2]  -  h[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	add	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  h[2]  -  h[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
970	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  h[2]  -  h[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [FE]    double)  [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  h[2]  -  h[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  h[2]  -  h[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,      LengthConstraintType.NONE);  	compilable	  [FE]    double)	49	1
1042	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1043	[BUG]  [BUGGY]  w[3]  =  size.width;    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1043	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  h[4]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	h[4]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1044	[BUG]  [BUGGY]  h[4]  =  size.width;    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  h[4]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	h[4]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1044	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1045	[BUG]  [BUGGY]  w[2]  =  size.width;    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1045	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[0]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[0]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1046	[BUG]  [BUGGY]  w[0]  =  size.width;    [FE]    double)  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[0]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[0]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
1047	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[5]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[5]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]  ArrayIndexOutOfBoundsException	53	1
1048	[BUG]  [BUGGY]  w[5]  =  size.width;    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[5]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[5]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]  ArrayIndexOutOfBoundsException	53	1
1267	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    RectangleConstraint  constraint)  {  double[]  w  =  new  double[5];    [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  w[1]  =  w[0];  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	425	425	1	add	w[0]  =  constraint.getWidth();		compilable	  [FE]    double)	64	1
1268	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();    [FE]    double)  [CONTEXT]    RectangleConstraint  constraint)  {  double[]  w  =  new  double[5];    [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  w[1]  =  w[0];  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	425	425	1	replace	w[0]  =  constraint.getWidth();		compilable	  [FE]    double)	64	1
242	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[4];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	add	double[]  h  =  new  double[4];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
243	[BUG]  [BUGGY]  double[]  h  =  new  double[4];    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[4];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	replace	double[]  h  =  new  double[4];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
243	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[6];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	add	double[]  h  =  new  double[6];	double[]  h  =  new  double[5];  	compilable	  [FE]    double)	13	1
244	[BUG]  [BUGGY]  double[]  h  =  new  double[6];    [FE]    double)  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[6];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	replace	double[]  h  =  new  double[6];	double[]  h  =  new  double[5];  	compilable	  [FE]    double)	13	1
244	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[0];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	add	double[]  h  =  new  double[0];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
245	[BUG]  [BUGGY]  double[]  h  =  new  double[0];    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[0];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	replace	double[]  h  =  new  double[0];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
245	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[3];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	add	double[]  h  =  new  double[3];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
246	[BUG]  [BUGGY]  double[]  h  =  new  double[3];    [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[3];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	replace	double[]  h  =  new  double[3];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
247	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[7];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	add	double[]  h  =  new  double[7];	double[]  h  =  new  double[5];  	compilable	  [FE]    double)	13	1
248	[BUG]  [BUGGY]  double[]  h  =  new  double[7];    [FE]    double)  [CONTEXT]    double  width)  {  double[]  w  =  new  double[5];    [BUGGY]  double[]  h  =  new  double[7];  [BUGGY]    RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D    BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	replace	double[]  h  =  new  double[7];	double[]  h  =  new  double[5];  	compilable	  [FE]    double)	13	1
3202	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	add	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3203	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	replace	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3203	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.BOTTOM)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	add	if(edge  ==  RectangleEdge.BOTTOM)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3204	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.BOTTOM)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.BOTTOM)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	replace	if(edge  ==  RectangleEdge.BOTTOM)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3204	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	add	if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3205	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	replace	if(edge  ==  RectangleEdge.LEFT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3205	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	add	if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3206	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	replace	if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3207	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	add	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3208	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	replace	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.TOP)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3210	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	add	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
3211	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }    [FE]    double)  [CONTEXT]    if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {    [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  [BUGGY]    }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void    Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	replace	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  else  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
2803	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  }  [BUGGY]    }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	add	if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  }	this.rightBlock  =  null;  	compilable	  [FE]    double)	141	1
2804	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  }    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  }  [BUGGY]    }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	replace	if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  }	this.rightBlock  =  null;  	compilable	  [FE]    double)	141	1
2806	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  return;  }  [BUGGY]    }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	add	if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  return;  }	this.rightBlock  =  null;  	compilable	  [FE]    double)	141	1
2807	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  return;  }    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  return;  }  [BUGGY]    }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	replace	if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  else  {  this.rightBlock  =  null;  return;  }	this.rightBlock  =  null;  	compilable	  [FE]    double)	141	1
2808	[BUG]  [BUGGY]    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  [BUGGY]    }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	add	if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }	this.rightBlock  =  null;  	compilable	  [FE]    double)	141	1
2809	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }    [FE]    double)  [CONTEXT]    public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;    [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }  [BUGGY]    }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void    [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean    	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	replace	if(this.rightBlock!=  null)  {  this.rightBlock  =  null;  }	this.rightBlock  =  null;  	compilable	  [FE]    double)	141	1
