bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[2]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[2]    =    w[1];    w[2]  =  w[0];  w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
2	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[2]  =  w[0];  w[2]  =  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[2]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[1];    w[2]  =  w[0];  w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[0]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[2]    =    w[1];    w[0]  =  w[0];  w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
4	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[0]  =  w[0];  w[2]  =  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[0]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[1];    w[0]  =  w[0];  w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[1]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[2]    =    w[1];    w[1]  =  w[0];  w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
6	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[1]  =  w[0];  w[2]  =  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  w[1]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[1];    w[1]  =  w[0];  w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[2];  w[1]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    h[2];    w[1]  =  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
8	[BUG]  [BUGGY]  w[1]  =  h[2];  w[1]  =  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[2];  w[1]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[2];    w[1]  =  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
9	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[2];  w[2]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    h[2];    w[2]  =  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
10	[BUG]  [BUGGY]  w[1]  =  h[2];  w[2]  =  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[2];  w[2]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[2];    w[2]  =  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
11	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[2];  h[1]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    h[2];    h[1]  =  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
12	[BUG]  [BUGGY]  w[1]  =  h[2];  h[1]  =  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[2];  h[1]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[2];    h[1]  =  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
13	[BUG]  [BUGGY]  w[2]  =  h[0].;  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0].;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]  =  h[0].;	  w[2]    =    w[0];    w[2]    =    w[0].;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
14	[BUG]  [BUGGY]  w[1]  =  h[0].height;  [CE]  double  cannot  be  dereferenced  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[0].height;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  h[0].height;	  w[2]    =    w[0];    w[2]    =    w[0].;    	non-compiled	[CE]  double  cannot  be  dereferenced	36	None	replace
15	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  h[1]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	h[1]  =  h[0];  w[2]  =  h[0];	  w[1]    =    h[0];    w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
16	[BUG]  [BUGGY]  h[1]  =  h[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  h[1]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	h[1]  =  h[0];  w[2]  =  h[0];	  w[1]    =    h[0];    w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
17	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	h[1]  =  h[0];	  w[1]    =    h[0];    h[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
18	[BUG]  [BUGGY]  h[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	h[1]  =  h[0];	  w[1]    =    h[0];    h[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
19	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[0];  h[1]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  h[0];  h[1]  =  h[1];	  w[1]    =    h[0];    h[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
20	[BUG]  [BUGGY]  w[1]  =  h[0];  h[1]  =  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[0];  h[1]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  h[0];  h[1]  =  h[1];	  w[1]    =    h[0];    h[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
21	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  h[0];  w[1]  =  h[0];	  w[2]    =    w[0];    w[1]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
22	[BUG]  [BUGGY]  w[0]  =  h[0];  w[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  h[0];  w[1]  =  h[0];	  w[2]    =    w[0];    w[1]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
23	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[0]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
24	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[0]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
25	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[0]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
26	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[0]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
27	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[0]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
28	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[0]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
29	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth()  &  LengthConstraintType.RANGE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth()  &  LengthConstraintType.RANGE;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  constraint.getWidth()  &  LengthConstraintType.RANGE;	  w[1]    =    h[0]    &    LengthConstraintType.RANGE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	12	None	replace
30	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  constraint.getHeight();  w[0]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[0]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	replace
31	[BUG]  [BUGGY]  w[1]  =  constraint.getHeight();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  constraint.getHeight();  w[0]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[0]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	replace
32	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  constraint.getWidth();  w[0]  =  constraint.getHeight();	          w[1]    =    constraint.getWidth();    w[0]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	replace
33	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  constraint.getWidth();  w[0]  =  constraint.getHeight();	          w[1]    =    constraint.getWidth();    w[0]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	replace
34	[BUG]  [BUGGY]  Size2D  w[2]  =  size[0];  [CE]  ']'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  size[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[2]  =  size[0];	  w[2]    =    w[0];    Size2D    w[2]    =    w[0];    	non-compiled	[CE]  ']'  expected	17	None	replace
35	[BUG]  [BUGGY]  Size2D  w[2]  =  h[0];  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[2]  =  h[0];	  w[2]    =    w[0];    Size2D    w[2]    =    w[0];    	non-compiled	[CE]  ']'  expected	17	None	replace
36	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[1]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        w[2]    =    h[0];    w[1]  =  h[0];  w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
37	[BUG]  [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[1]  =  h[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[1]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        w[2]    =    h[0];    w[1]  =  h[0];  w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
38	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[2]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        w[2]    =    h[0];    w[2]  =  h[0];  w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
39	[BUG]  [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[2]  =  h[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[2]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        w[2]    =    h[0];    w[2]  =  h[0];  w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
40	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[0]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        w[2]    =    h[0];    w[0]  =  h[0];  w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
41	[BUG]  [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[0]  =  h[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  w[0]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        w[2]    =    h[0];    w[0]  =  h[0];  w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
42	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
43	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
44	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
45	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
46	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
47	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
48	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  h[0];  w[2]  =  h[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
49	[BUG]  [BUGGY]  w[0]  =  h[0];  w[2]  =  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  h[0];  w[2]  =  h[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
50	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  constraint.getWidth();  w[2]  =  h[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
51	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  constraint.getWidth();  w[2]  =  h[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
52	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]    =    h[0];    w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
53	[BUG]  [BUGGY]  w[2]  =  h[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    h[0];    w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
54	[BUG]  [BUGGY]  w[2]  =  h[0];  Size2D  w[2]  =  h[0];  [CE]  ']'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  Size2D  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    h[0];    Size2D  w[2]  =  h[0];	  	non-compiled	[CE]  ']'  expected	10	None	add
55	[BUG]  [BUGGY]  w[2]  =  h[0];  if[2]  =  h[0];  [CE]  '('  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  if[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    h[0];    if[2]  =  h[0];	  	non-compiled	[CE]  '('  expected	10	None	add
56	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[1]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    constraint.getHeight();    w[1]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	add
57	[BUG]  [BUGGY]  w[1]  =  constraint.getHeight();  w[1]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[1]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    constraint.getHeight();    w[1]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	add
58	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    constraint.getHeight();    w[2]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	add
59	[BUG]  [BUGGY]  w[1]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    constraint.getHeight();    w[2]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	add
60	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[0]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    constraint.getHeight();    w[0]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	add
61	[BUG]  [BUGGY]  w[1]  =  constraint.getHeight();  w[0]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[0]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    constraint.getHeight();    w[0]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	add
62	[BUG]  [BUGGY]  Size2D  w[1]  =  h[0];  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  Size2D  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[1]  =  h[0];	  w[1]    =    h[0];    Size2D    w[1]    =    h[0];    	non-compiled	[CE]  ']'  expected	31	None	replace
63	[BUG]  [BUGGY]  Size2D  w[1]  =  size[0];  [CE]  ']'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  Size2D  w[1]  =  size[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[1]  =  size[0];	  w[1]    =    h[0];    Size2D    w[1]    =    h[0];    	non-compiled	[CE]  ']'  expected	31	None	replace
64	[BUG]  [BUGGY]  h[1]  =  h.height;  [CE]  cannot  find  symbol  height  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  h[1]  =  h.height;  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	h[1]  =  h.height;	  h[1]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  height	34	None	replace
65	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[1]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        w[1]    =    h[0];    w[1]  =  h[0];  w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
66	[BUG]  [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[1]  =  h[0];  w[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[1]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        w[1]    =    h[0];    w[1]  =  h[0];  w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
67	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[2]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        w[1]    =    h[0];    w[2]  =  h[0];  w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
68	[BUG]  [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[2]  =  h[0];  w[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[2]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        w[1]    =    h[0];    w[2]  =  h[0];  w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
69	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[0]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        w[1]    =    h[0];    w[0]  =  h[0];  w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
70	[BUG]  [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[0]  =  h[0];  w[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[1]  =  h[0];  w[0]  =  h[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        w[1]    =    h[0];    w[0]  =  h[0];  w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
71	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[1]  =  h[0];  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        h[1]    =    h[0];    w[1]  =  h[0];  h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
72	[BUG]  [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[1]  =  h[0];  h[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[1]  =  h[0];  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        h[1]    =    h[0];    w[1]  =  h[0];  h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
73	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[0]  =  h[0];  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        h[1]    =    h[0];    w[0]  =  h[0];  h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
74	[BUG]  [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[0]  =  h[0];  h[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[0]  =  h[0];  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        h[1]    =    h[0];    w[0]  =  h[0];  h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
75	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[2]  =  h[0];  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]        =        h[0];        h[1]    =    h[0];    w[2]  =  h[0];  h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
76	[BUG]  [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[2]  =  h[0];  h[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    h[1]  =  h[0];  w[2]  =  h[0];  h[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        h[1]    =    h[0];    w[2]  =  h[0];  h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
77	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  constraint.getWidth();  w[2]  =  constraint.getHeight();	          w[1]    =    constraint.getWidth();    w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
78	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getHeight();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  constraint.getWidth();  w[2]  =  constraint.getHeight();	          w[1]    =    constraint.getWidth();    w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
79	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  constraint.getHeight();  w[2]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
80	[BUG]  [BUGGY]  w[1]  =  constraint.getHeight();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  constraint.getHeight();  w[2]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
81	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	replace
82	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	replace
83	[BUG]  [BUGGY]  h[0]  =  h.height;  [CE]  cannot  find  symbol  height  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  h[0]  =  h.height;  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	h[0]  =  h.height;	  h[0]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  height	35	None	replace
84	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[2]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[2]    =    w[0];    w[2]  =  w[0];  w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
85	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[2]  =  w[0];  w[2]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[2]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[0];    w[2]  =  w[0];  w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
86	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[0]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[2]    =    w[0];    w[0]  =  w[0];  w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
87	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[0]  =  w[0];  w[2]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[0]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[0];    w[0]  =  w[0];  w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
88	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[2]    =    w[0];    w[1]  =  w[0];  w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
89	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];  w[2]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[0];    w[1]  =  w[0];  w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
90	[BUG]  [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c2);  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c2);  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[1]  =  this.leftBlock.arrange(g2,  c2);	  Size2D    w[1]    =    this.leftBlock.arrange(g2,    c1);    	non-compiled	[CE]  ']'  expected	9	None	replace
91	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  h[0];	  w[1]    =    h[0];    w[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
92	[BUG]  [BUGGY]  w[0]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  h[0];	  w[1]    =    h[0];    w[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
93	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
94	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
95	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
96	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
97	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
98	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
99	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]  =  h[1];	  w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
100	[BUG]  [BUGGY]  w[2]  =  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]  =  h[1];	  w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
101	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[2]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[1]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
102	[BUG]  [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[2]  =  w[0];  w[1]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[2]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[1]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
103	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[1]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[1]    =    w[0];    w[1]  =  w[0];  w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
104	[BUG]  [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[1]  =  w[0];  w[1]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[1]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[1]    =    w[0];    w[1]  =  w[0];  w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
105	[BUG]  [BUGGY]  w[1]  =  w[0].;  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0].;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  w[0].;	  w[2]    =    w[0];    w[2]    =    w[0].;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
106	[BUG]  [BUGGY]  w[1]  =  w[0];  w[2]  =  w[0].;  [CE]  <identifier>  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0];  w[2]  =  w[0].;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  w[0];  w[2]  =  w[0].;	  w[2]    =    w[0];    w[2]    =    w[0].;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
107	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[0];  }  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[0];  }  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[0];    if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[0];  }	  	non-compiled	[CE]  ']'  expected	15	None	add
108	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  Size2D  w[2]  =  w[0];  w[2]  =  w[0];  [CE]  ']'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  Size2D  w[2]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[0];    Size2D  w[2]  =  w[0];  w[2]  =  w[0];	  	non-compiled	[CE]  ']'  expected	15	None	add
109	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[0];  w[1]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  h[0];  w[1]  =  h[1];	  w[1]    =    h[0];    w[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
110	[BUG]  [BUGGY]  w[1]  =  h[0];  w[1]  =  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[0];  w[1]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  h[0];  w[1]  =  h[1];	  w[1]    =    h[0];    w[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
111	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }  else  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }  else  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[1];    if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }  else  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }	  	non-compiled	[CE]  ']'  expected	29	None	add
112	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }  [CE]  ']'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[1];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[1];    if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[2]  =  w[1];  }	  	non-compiled	[CE]  ']'  expected	29	None	add
113	[BUG]  [BUGGY]  w[1]  =  h[2];  Size2D  w[1]  =  h[2];  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  h[2];  Size2D  w[1]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[2];    Size2D  w[1]  =  h[2];	  	non-compiled	[CE]  ']'  expected	32	None	add
114	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  h[2];	  w[1]    =    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
115	[BUG]  [BUGGY]  w[0]  =  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[2];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  h[2];	  w[1]    =    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
116	[BUG]  [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  Size2D  w[1]  =  h[0];  w[2]  =  h[0];  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]    =    h[0];    w[2]  =  h[0];  Size2D  w[1]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]        =        h[0];        w[2]    =    h[0];    Size2D  w[1]  =  h[0];  w[2]  =  h[0];	  	non-compiled	[CE]  ']'  expected	5	None	add
117	[BUG]  [BUGGY]  Size2D  w[2]  =  w[0];  [CE]  ']'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[2]  =  w[0];	  w[2]    =    w[0];    Size2D    w[2]    =    w[0];    	non-compiled	[CE]  ']'  expected	17	None	replace
118	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  w[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  w[0];  w[1]  =  h[0];	  w[2]    =    w[0];    w[1]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
119	[BUG]  [BUGGY]  w[0]  =  w[0];  w[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  w[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  w[0];  w[1]  =  h[0];	  w[2]    =    w[0];    w[1]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
120	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  w[0];  w[2]  =  w[0];	  w[2]    =    w[0];    w[2]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	replace
121	[BUG]  [BUGGY]  w[1]  =  w[0];  w[2]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0];  w[2]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  w[0];  w[2]  =  w[0];	  w[2]    =    w[0];    w[2]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	replace
122	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  w[0];  w[1]  =  w[0];	  w[2]    =    w[0];    w[2]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	replace
123	[BUG]  [BUGGY]  w[1]  =  w[0];  w[1]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  w[0];  w[1]  =  w[0];	  w[2]    =    w[0];    w[2]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	replace
124	[BUG]  [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[1]  =  w[0];  }  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[1]  =  w[0];  }  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[1]    =    w[0];    if(this.leftBlock!=  null)  {  Size2D  w[2]  =  w[0];  w[1]  =  w[0];  }	  	non-compiled	[CE]  ']'  expected	18	None	add
125	[BUG]  [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  Size2D  w[2]  =  w[0];  w[1]  =  w[0];  [CE]  ']'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  Size2D  w[2]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[1]    =    w[0];    Size2D  w[2]  =  w[0];  w[1]  =  w[0];	  	non-compiled	[CE]  ']'  expected	18	None	add
126	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
127	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
128	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  h[0];  w[2]  =  h[0];	  w[1]    =    h[0];    w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
129	[BUG]  [BUGGY]  w[0]  =  h[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  h[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  h[0];  w[2]  =  h[0];	  w[1]    =    h[0];    w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
130	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  if(this.leftBlock!=  null)  {  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	if(this.leftBlock!=  null)  {  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }	          w[1]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	replace
131	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  if(this.leftBlock!=  null)  {  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	if(this.leftBlock!=  null)  {  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }	          w[1]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	replace
132	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  w[0];  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  w[0];  w[2]  =  h[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
133	[BUG]  [BUGGY]  w[0]  =  w[0];  w[2]  =  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  w[0];  w[2]  =  h[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  w[0];  w[2]  =  h[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
134	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  constraint.getWidth();  w[2]  =  w[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
135	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  constraint.getWidth();  w[2]  =  w[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
136	[BUG]  [BUGGY]  w[2]  =  h[0];  Size2D  h[2]  =  h[0];  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  Size2D  h[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    h[0];    Size2D  h[2]  =  h[0];	  	non-compiled	[CE]  ']'  expected	10	None	add
137	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
138	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
139	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[0]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	replace
140	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  constraint.getWidth();	          w[1]    =    constraint.getWidth();    w[0]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	replace
141	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
142	[BUG]  [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]          w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	                w[1]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	add
143	[BUG]  [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[2]  =  size[0];  w[1]  =  w[0];  [CE]  cannot  find  symbol  size  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[1]  =  w[0];  w[2]  =  size[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[1]    =    w[0];    w[2]  =  size[0];  w[1]  =  w[0];	  	non-compiled	[CE]  cannot  find  symbol  size	18	None	add
144	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[0]  =  w[0];  w[2]  =  w[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
145	[BUG]  [BUGGY]  w[0]  =  w[0];  w[2]  =  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[0]  =  w[0];  w[2]  =  w[1];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[0]  =  w[0];  w[2]  =  w[1];	  w[2]    =    w[0];    w[2]    =    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
146	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  h[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]    =    h[0];    h[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
147	[BUG]  [BUGGY]  w[2]  =  h[0];  h[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  h[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    h[0];    h[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
148	[BUG]  [BUGGY]  w[2]  =  h[0];  w[2]  =  h[0].;  [CE]  <identifier>  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  h[0];  w[2]  =  h[0].;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    h[0];    w[2]  =  h[0].;	  	non-compiled	[CE]  <identifier>  expected	10	None	add
149	[BUG]  [BUGGY]  w[2]  =  w[0].;  [CE]  <identifier>  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  w[0].;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]  =  w[0].;	  w[2]    =    w[0];    w[2]    =    w[0].;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
150	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]        =        w[0];        w[2]    =    w[0];    w[1]  =  w[0];  w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
151	[BUG]  [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];  w[1]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]    =    w[0];    w[2]  =  w[0];  w[1]  =  w[0];  w[1]  =  w[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]        =        w[0];        w[2]    =    w[0];    w[1]  =  w[0];  w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	add
152	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  w[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]  =  w[0];  w[1]  =  h[0];	  w[2]    =    w[0];    w[1]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
153	[BUG]  [BUGGY]  w[2]  =  w[0];  w[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  w[0];  w[1]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]  =  w[0];  w[1]  =  h[0];	  w[2]    =    w[0];    w[1]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
154	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  w[0];  w[2]  =  h[0];	  w[1]    =    h[0];    w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
155	[BUG]  [BUGGY]  w[1]  =  w[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0];  w[2]  =  h[0];  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  w[0];  w[2]  =  h[0];	  w[1]    =    h[0];    w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
156	[BUG]  [BUGGY]  w[1]  =  w[0]  &  LengthConstraintType.RANGE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[1]  =  w[0]  &  LengthConstraintType.RANGE;  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  w[0]  &  LengthConstraintType.RANGE;	  w[1]    =    h[0]    &    LengthConstraintType.RANGE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	12	None	replace
157	[BUG]  [BUGGY]  Size2D  w[0]  =  this.leftBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  Size2D  w[0]  =  this.leftBlock.arrange(g2,  c1);  [BUGGY]      w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[0]  =  this.leftBlock.arrange(g2,  c1);	  Size2D    w[1]    =    this.leftBlock.arrange(g2,    c1);    	non-compiled	[CE]  ']'  expected	9	None	replace
158	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth();  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]  =  constraint.getWidth();	  w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
159	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth();  [BUGGY]      if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]  =  constraint.getWidth();	  w[2]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
