bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  w[1]  =  width[0];  [CE]  cannot  find  symbol  width  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  width[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  width[0];	  w[1]    =    size[0];    	non-compiled	[CE]  cannot  find  symbol  width	6	None	replace
2	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  h[1]  =  size.height;  [CE]  cannot  find  symbol  c1  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  h[1]  =  size.height;  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c1);  h[1]  =  size.height;	      Size2D    size    =    this.leftBlock.arrange(g2,    c3);    h[1]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c1	1	None	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0];  w[1]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    h[0];    w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
4	[BUG]  [BUGGY]  w[1]  =  h[0];  w[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0];  w[1]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[0];    w[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0];  w[2]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    h[0];    w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
6	[BUG]  [BUGGY]  w[1]  =  h[0];  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0];  w[2]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[0];    w[2]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0];  h[1]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]    =    h[0];    h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
8	[BUG]  [BUGGY]  w[1]  =  h[0];  h[1]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0];  h[1]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[0];    h[1]  =  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
9	[BUG]  [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c1);  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[1]  =  this.leftBlock.arrange(g2,  c1);	      Size2D    w[1]    =    this.leftBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	14	None	replace
10	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]  =  h[0];	  w[2]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
11	[BUG]  [BUGGY]  w[2]  =  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]  =  h[0];	  w[2]    =    w[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
12	[BUG]  [BUGGY]  w[1]  =  h[0]  &  LengthConstraintType.RANGE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0]  &  LengthConstraintType.RANGE;  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  h[0]  &  LengthConstraintType.RANGE;	  w[1]    =    h[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	5	None	replace
13	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  h[0]  =  size.height;  [CE]  cannot  find  symbol  c1  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  h[0]  =  size.height;  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c1);  h[0]  =  size.height;	      if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    h[0]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c1	9	None	replace
14	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  h[0]  =  size.height;  [CE]  cannot  find  symbol  c2  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  h[0]  =  size.height;  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c2);  h[0]  =  size.height;	      if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    h[0]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c2	9	None	replace
15	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  w[2]  =  w[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]    =    w[0];    w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
16	[BUG]  [BUGGY]  w[2]  =  w[0];  w[2]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  w[2]  =  w[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    w[0];    w[2]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
17	[BUG]  [BUGGY]  w[2]  =  w[0];  Size2D  w[2]  =  w[0];  [CE]  ']'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  Size2D  w[2]  =  w[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    w[0];    Size2D  w[2]  =  w[0];	  	non-compiled	[CE]  ']'  expected	7	None	add
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  w[1]  =  w[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]    =    w[0];    w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
19	[BUG]  [BUGGY]  w[2]  =  w[0];  w[1]  =  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  w[1]  =  w[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    w[0];    w[1]  =  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
20	[BUG]  [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c2);  h[1]  =  h[0];  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c2);  h[1]  =  h[0];  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[1]  =  this.leftBlock.arrange(g2,  c2);  h[1]  =  h[0];	      Size2D    w[1]    =    this.leftBlock.arrange(g2,    c3);    h[1]    =    h[0];    	non-compiled	[CE]  ']'  expected	15	None	replace
21	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  constraint.getHeight();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  constraint.getHeight();	      w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
22	[BUG]  [BUGGY]  w[1]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  constraint.getHeight();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  constraint.getHeight();	      w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
23	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]      w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	        w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
24	[BUG]  [BUGGY]      w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]      w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	        w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
25	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]      w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
26	[BUG]  [BUGGY]      w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]      w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
27	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]      w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	        w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
28	[BUG]  [BUGGY]      w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]      w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	        w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
29	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  w[2]  =  w[1];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[2]    =    w[0];    w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
30	[BUG]  [BUGGY]  w[2]  =  w[0];  w[2]  =  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  w[2]  =  w[1];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    w[0];    w[2]  =  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
31	[BUG]  [BUGGY]  w[1]  =  h[0];  Size2D  w[1]  =  h[0];  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[0];  Size2D  w[1]  =  h[0];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]    =    h[0];    Size2D  w[1]  =  h[0];	  	non-compiled	[CE]  ']'  expected	4	None	add
32	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[2];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  h[2];	  w[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
33	[BUG]  [BUGGY]  w[1]  =  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[1]  =  h[2];  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  h[2];	  w[1]    =    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
34	[BUG]  [BUGGY]  h[1]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  h[1]  =  size.height;  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	h[1]  =  size.height;	      if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c2);    h[1]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  size	11	None	replace
35	[BUG]  [BUGGY]  h[0]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]              java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  h[0]  =  size.height;  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	h[0]  =  size.height;	      if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c2);    h[1]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  size	11	None	replace
36	[BUG]  [BUGGY]  w[2]  =  w[0];  w[2]  =  w[0].;  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  w[2]  =  w[0];  w[2]  =  w[0].;  [BUGGY]    if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[2]    =    w[0];    w[2]  =  w[0].;	  	non-compiled	[CE]  <identifier>  expected	7	None	add
37	[BUG]  [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c1);  h[1]  =  h[0];  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }    [BUGGY]  Size2D  w[1]  =  this.leftBlock.arrange(g2,  c1);  h[1]  =  h[0];  [BUGGY]    w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	Size2D  w[1]  =  this.leftBlock.arrange(g2,  c1);  h[1]  =  h[0];	      Size2D    w[1]    =    this.leftBlock.arrange(g2,    c3);    h[1]    =    h[0];    	non-compiled	[CE]  ']'  expected	15	None	replace
