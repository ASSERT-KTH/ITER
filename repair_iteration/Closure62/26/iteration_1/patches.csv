bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(error.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTE  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTE	8	None	replace
2	[BUG]  [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTE  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(sourceExcerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTE	8	None	replace
3	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXECUTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXECUTE  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXECUTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXECUTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXECUTE	8	None	replace
4	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_SECOND)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_SECOND  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_SECOND)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_SECOND)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_SECOND	8	None	replace
5	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPT  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPT	8	None	replace
6	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTE  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTE	8	None	replace
7	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_TEXT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_TEXT  [FE]                    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_TEXT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_TEXT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_TEXT	8	None	replace
8	[BUG]  [BUGGY]  int  charno  =  error.getCharno();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  int  charno  =  error.getCharno();  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	int  charno  =  error.getCharno();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  charno  =  error.getCharno();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  charno  =  error.getCharno();  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	charno  =  error.getCharno();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  int  charno  =  sourceExcerpt.getCharno();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  int  charno  =  sourceExcerpt.getCharno();  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	int  charno  =  sourceExcerpt.getCharno();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  charno  =  error.getCharno();  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(error.description!=  null)  {  charno  =  error.getCharno();  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }	      	compilable	  [FE]  ComparisonFailure  	5	2	replace
12	[BUG]  [BUGGY]  if(error.description!=  null)  {  charno  =  error.getCharno();  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }  [FE]  ComparisonFailure  [FE]                        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  charno  =  error.getCharno();  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description!=  null)  {  charno  =  error.getCharno();  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }	      	compilable	  [FE]  ComparisonFailure  	5	2	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(error.description!=  null)  {  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }	      	compilable	  [FE]  ComparisonFailure  	5	2	replace
14	[BUG]  [BUGGY]  if(error.description!=  null)  {  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }  [FE]  ComparisonFailure  [FE]                          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description!=  null)  {  if(charno  <  sourceExcerpt.length())  {  b.append('  ');  }	      	compilable	  [FE]  ComparisonFailure  	5	2	replace
15	[BUG]  [BUGGY]  b.append('n');  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  b.append('n');  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	b.append('n');	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  if(charno  ==  sourceExcerpt.length())  {  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(error.description!=  null)  {  if(charno  ==  sourceExcerpt.length())  {  b.append('  ');  }	      	compilable	  [FE]  ComparisonFailure  	5	2	replace
17	[BUG]  [BUGGY]  if(error.description!=  null)  {  if(charno  ==  sourceExcerpt.length())  {  b.append('  ');  }  [FE]  ComparisonFailure  [FE]                              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  if(charno  ==  sourceExcerpt.length())  {  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description!=  null)  {  if(charno  ==  sourceExcerpt.length())  {  b.append('  ');  }	      	compilable	  [FE]  ComparisonFailure  	5	2	replace
18	[BUG]  [BUGGY]  b.append(error.toString());  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  b.append(error.toString());  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	b.append(error.toString());	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(error.description!=  null)  {  b.append('  ');  }  else  {  b.append(error.description);  }  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  b.append('  ');  }  else  {  b.append(error.description);  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description!=  null)  {  b.append('  ');  }  else  {  b.append(error.description);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(error.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
21	[BUG]  [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(sourceExcerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
22	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
23	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]                    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
24	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  Character.toLowerCase(charno)&&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]                      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  Character.toLowerCase(charno)&&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  Character.toLowerCase(charno)&&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
25	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]                        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
26	[BUG]  [BUGGY]  if(extract.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]                          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(extract.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(extract.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
27	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]                            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	4	None	replace
28	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
29	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  If(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  If(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    If(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  	non-compiled	[CE]  ';'  expected	2	None	add
30	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
31	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExct.length())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExct.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExct.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
32	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(SourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(SourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    if(excerpt.equals(SourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
33	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  >=  =  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  >=  =  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    if(excerpt.equals(sourceExcerpt)&&  0  >=  =  charno  &&  charno  <  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
34	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
35	[BUG]  [BUGGY]  if(excerpt.equals(line)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  line  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(line)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(line)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  line	7	None	replace
36	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_SEPARATOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_SEPARATOR  [FE]      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_SEPARATOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_SEPARATOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_SEPARATOR	7	None	replace
37	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	7	None	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(error.equals(LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	4	replace
39	[BUG]  [BUGGY]  if(error.equals(LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.equals(LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	4	replace
40	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
41	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
42	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >>  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >>  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >>  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
43	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
44	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  If(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  If(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    If(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	  	non-compiled	[CE]  ';'  expected	6	None	add
45	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [Delete]  sourceExcerpt.length())  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [Delete]  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [Delete]  sourceExcerpt.length())  {	  	non-compiled	[CE]  ')'  expected	6	None	add
46	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [BUGGY]  sourceExcerpt.length())  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [BUGGY]  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [BUGGY]  sourceExcerpt.length())  {	  	non-compiled	[CE]  ')'  expected	6	None	add
47	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [PATCH]  sourceExcerpt.length())  {  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [PATCH]  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  [PATCH]  sourceExcerpt.length())  {	  	non-compiled	[CE]  ')'  expected	6	None	add
48	[BUG]  [BUGGY]  if(error.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTOR  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTOR	9	None	replace
49	[BUG]  [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTOR  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(sourceExcerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTOR	9	None	replace
50	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTOR  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTOR	9	None	replace
51	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTOR  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTOR	9	None	replace
52	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXECTION)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXECTION  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXECTION)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXECTION)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXECTION	9	None	replace
53	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTOR  [FE]                    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTOR	9	None	replace
54	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTOR  [FE]                      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTOR	9	None	replace
55	[BUG]  [BUGGY]  if(error.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
56	[BUG]  [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(sourceExcerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(sourceExcerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
57	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  sourceExcerpt  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
58	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
59	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
60	[BUG]  [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(charno.equals(SourceExcerptProvider.LINE)&&  0  <=  excerpt  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
61	[BUG]  [BUGGY]  if(extract.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]                    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(extract.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(extract.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
62	[BUG]  [BUGGY]  if(c.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]                      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(c.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(c.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.class)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(SourceExcerptProvider.class)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
64	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.class)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.class)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.class)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(error.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
66	[BUG]  [BUGGY]  if(error.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
67	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	2	replace
68	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  ||  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	2	replace
69	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
70	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)||  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)||  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	2	replace
72	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)||  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)||  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)||  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	2	replace
73	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  ==  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)&&  0  ==  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
74	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  ==  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  ==  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&  0  ==  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
75	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0!=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)&&  0!=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
76	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0!=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0!=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&  0!=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
77	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  >=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)&&  0  >=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
78	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  >=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  >=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&  0  >=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
79	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.EXPR_RESULT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.EXPR_RESULT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.EXPR_RESULT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	3	None	replace
80	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  sourceExcerptProvider  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  sourceExcerptProvider	1	None	replace
81	[BUG]  [BUGGY]  if(extractFormatter.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(extractFormatter.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(extractFormatter.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE	1	None	replace
82	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCLUDE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCLUDE  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCLUDE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCLUDE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCLUDE	8	None	replace
83	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_STRING)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_STRING  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_STRING)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_STRING)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_STRING	8	None	replace
84	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  sourceExcerptProvider  [FE]              ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  sourceExcerptProvider	4	None	replace
85	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_SIGNATURE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_SIGNATURE  [FE]                ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_SIGNATURE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_SIGNATURE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_SIGNATURE	4	None	replace
86	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	4	replace
87	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	4	replace
88	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
89	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  ==  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
90	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
91	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&  0  <=  sourceExcerpt.length()  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
92	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
93	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno!=  sourceExcerpt.length())  {	  if(excerpt.equals(LINE)&&    0    <=    charno    &&    charno    >=    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
94	[BUG]  [BUGGY]  if(error.description!=  null)  {  b.append(error.description);  b.append('n');  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  b.append(error.description);  b.append('n');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description!=  null)  {  b.append(error.description);  b.append('n');  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  if(error.description!=  null)  {  b.append(error.description);  b.append('  ');  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  b.append(error.description);  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description!=  null)  {  b.append(error.description);  b.append('  ');  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  charno  =  sourceExcerpt.getCharno();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  charno  =  sourceExcerpt.getCharno();  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	charno  =  sourceExcerpt.getCharno();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
97	[BUG]  [BUGGY]  b.append(error.getCharno());  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  b.append(error.getCharno());  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	b.append(error.getCharno());	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
98	[BUG]  [BUGGY]  if(error.description!=  null)  {  b.append('  ');  }  else  {  b.append(error.description);  b.append('  ');  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description!=  null)  {  b.append('  ');  }  else  {  b.append(error.description);  b.append('  ');  }  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description!=  null)  {  b.append('  ');  }  else  {  b.append(error.description);  b.append('  ');  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCORD)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCORD  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCORD)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCORD)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCORD	9	None	replace
100	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXTERN)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXTERN  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXTERN)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXTERN)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXTERN	8	None	replace
101	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCLUSIVE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCLUSIVE  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCLUSIVE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCLUSIVE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  LINE_EXCLUSIVE	8	None	replace
102	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.DEFAULT_EXTERN_ERROR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  DEFAULT_EXTERN_ERROR  [FE]    ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.DEFAULT_EXTERN_ERROR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.DEFAULT_EXTERN_ERROR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EXTERN_ERROR	3	None	replace
103	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.DEFAULT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  DEFAULT  [FE]      ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(SourceExcerptProvider.DEFAULT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.DEFAULT)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	3	None	replace
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(error.description.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
105	[BUG]  [BUGGY]  if(error.description.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(error.description.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(error.description.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
106	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(charno)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(charno)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
107	[BUG]  [BUGGY]  if(excerpt.equals(charno)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(charno)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(charno)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
109	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();        [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {  [BUGGY]    &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append(   "^\n   ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  >  sourceExcerpt.length())  {	  if(excerpt.equals(sourceExcerpt)&&    0    <=    charno    &&    charno    <    sourceExcerpt.length())    {    	compilable	  [FE]  ComparisonFailure  	3	4	replace
