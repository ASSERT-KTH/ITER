bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	45	5	replace
4	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	45	5	replace
5	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	45	5	replace
6	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	45	5	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
8	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	42	2	replace
9	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	42	1	replace
10	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	42	1	replace
11	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
12	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
13	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
14	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
15	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
16	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
17	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	55	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
19	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
20	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
21	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
22	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
23	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
24	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
25	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	71	None	add
26	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this	  	non-compiled	[CE]  	71	None	add
27	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
28	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
29	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this  [CE]  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this	  	non-compiled	[CE]  	71	None	add
30	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
31	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
32	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
33	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
35	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
36	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
37	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
38	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
39	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
40	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	18	None	add
41	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
42	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
43	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
44	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
45	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this	  	non-compiled	[CE]  	111	None	add
46	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	111	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_RUNNING)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	58	5	replace
48	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	58	5	replace
49	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	107	5	replace
50	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	107	5	replace
51	[BUG]  [BUGGY]  If(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
52	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	34	5	replace
53	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	34	5	replace
54	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
55	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [CE]  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.    	non-compiled	[CE]  	81	None	replace
56	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]                IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
57	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	40	5	replace
59	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	40	5	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
61	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
62	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
63	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
64	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
65	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
66	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
67	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
68	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	14	None	add
69	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
70	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
71	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
72	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
73	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  startTime;	  int    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	91	None	replace
74	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  startTime;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  startTime;	  int    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	91	None	replace
75	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
76	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
77	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
78	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
79	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
80	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
81	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >>  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >>  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >>  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
82	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
83	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
84	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  IllegalStateException  	79	5	add
85	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  IllegalStateException  	79	5	add
86	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
87	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	79	5	add
88	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	79	5	add
89	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	101	5	replace
90	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	101	5	replace
91	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	101	1	replace
92	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	101	1	replace
93	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SPLIT)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
95	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
96	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
97	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
98	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	98	None	add
99	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	98	None	add
100	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    int  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	98	None	add
101	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	98	None	add
102	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	98	None	add
103	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
104	[BUG]  [BUGGY]  StopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  StopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	StopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
105	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
106	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	12	None	add
107	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
108	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
109	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	12	None	add
110	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	12	None	add
111	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
112	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
113	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this	  	non-compiled	[CE]  	73	None	add
114	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
115	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	73	None	add
116	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this	  	non-compiled	[CE]  	73	None	add
117	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  [CE]  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING	  	non-compiled	[CE]  	73	None	add
118	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	1	add
119	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	1	add
120	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
121	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this	  	non-compiled	[CE]  	7	None	add
122	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	7	None	add
123	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
124	[BUG]  [BUGGY]  int  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  int  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  this.runningState  =  STATE_UNSTARTED;	          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    >>    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
125	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	68	5	replace
126	[BUG]  [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	68	5	replace
127	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
128	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING)    {    if(this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
129	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING)    {    if(this.runningState  >=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
130	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >>  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >>  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING)    {    if(this.runningState  >>  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
131	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
132	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
133	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
134	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
135	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	47	5	replace
136	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	47	5	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	114	2	replace
138	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	114	2	replace
139	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	10	None	add
140	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	10	None	add
141	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
142	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
143	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
144	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
145	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	10	None	add
146	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
147	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
148	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
149	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
150	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
151	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
152	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
153	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
155	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	53	2	add
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	1	add
157	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	1	add
158	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	26	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	4	add
160	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	4	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	1	add
162	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	1	add
163	[BUG]  [BUGGY]  this.runningState  =  null;  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  null;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  null;	  this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
164	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
165	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	69	None	add
166	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this	  	non-compiled	[CE]  	69	None	add
167	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this	  	non-compiled	[CE]  	69	None	add
168	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  [CE]  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING	  	non-compiled	[CE]  	69	None	add
169	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	99	None	replace
170	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	99	None	replace
171	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	99	None	replace
172	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	99	None	replace
173	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  this.runningState    =    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	38	None	replace
174	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  this.runningState    =    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	38	None	replace
175	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  this.runningState    =    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	38	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
177	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
178	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
179	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
180	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
181	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	82	5	add
182	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	82	5	add
183	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	51	1	add
184	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	51	1	add
185	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
186	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	51	2	add
188	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	51	2	add
189	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	51	None	add
190	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
191	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
192	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
193	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
194	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
195	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
196	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
197	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
198	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
200	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
201	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
202	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
203	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
204	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
205	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
206	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
207	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
208	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  unclosed  string  literal	97	None	replace
209	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
210	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  1;	  int    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  not  a  statement	87	None	replace
211	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.stopTime  =  System.currentTimeMillis()  -  1;	  this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
212	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.stopTime  =  System.currentTimeMillis()  +  1;	  this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
213	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
214	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
216	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
218	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
219	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
220	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
221	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
222	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
223	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
225	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
226	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this	  	non-compiled	[CE]  	3	None	add
227	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	3	None	add
228	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
229	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
230	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  stopTime;	  int    this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  not  a  statement	116	None	replace
231	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  stopTime;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  stopTime;	  int    this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  not  a  statement	116	None	replace
232	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  System.currentTimeMillis()  -  stopTime;	  this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
233	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  startTime;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  System.currentTimeMillis()  /  startTime;	  this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
234	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
235	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
236	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  >=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  >=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  >=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
237	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
238	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
239	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
240	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
241	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
242	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	20	None	add
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	20	2	add
244	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	20	2	add
245	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	20	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
247	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
249	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
250	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	29	None	add
251	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	29	None	add
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	29	5	add
253	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	29	5	add
254	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	104	1	replace
255	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	104	1	replace
256	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	104	5	replace
257	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	104	5	replace
258	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  this.runningState  =  System.currentTimeMillis()  +  1;	  long    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	86	None	replace
259	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
260	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
261	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
262	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
263	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
264	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
265	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    if(this.runningState  >=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
266	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_UNSTARTED)    {    If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
267	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
268	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState  ==  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=  STATE_STOPPED  &&  this.runningState  ==  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
269	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState  ==  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
270	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState  >=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
271	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
272	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
273	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
274	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
275	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
276	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
277	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
278	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
279	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
280	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
281	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
282	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
283	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this	  	non-compiled	[CE]  	5	None	add
284	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	5	None	add
285	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
286	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	77	5	add
287	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	77	5	add
288	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	77	5	add
289	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	77	5	add
290	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  not  a  statement	77	None	add
291	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	77	5	add
292	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	77	5	add
293	[BUG]  [BUGGY]  This.runningState  =  STATE_RUNNING;  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  This.runningState  =  STATE_RUNNING;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	This.runningState  =  STATE_RUNNING;	  This.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
294	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
295	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
296	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
298	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
299	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	66	5	replace
300	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	66	5	replace
301	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	66	5	replace
302	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	66	5	replace
303	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	42	5	replace
304	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	42	5	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
306	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
307	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running.   ");  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	System.err.println( "Stopwatch  is  not  running.   ");	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
308	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
309	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
310	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
311	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
312	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
313	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
314	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
315	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
317	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
318	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
319	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	94	5	add
320	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
321	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
322	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
323	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
324	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
325	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
326	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RONNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	110	5	replace
327	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RONNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	110	5	replace
328	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RONNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	110	5	replace
329	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.splitState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RONNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	110	5	replace
330	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	82	5	add
331	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	82	5	add
332	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
333	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
334	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	82	5	add
335	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	82	5	add
336	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
337	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	67	None	add
338	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_	  	non-compiled	[CE]  	7	None	add
339	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	1	add
340	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	1	add
341	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  AssertionFailedError  	49	2	replace
343	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  AssertionFailedError  	49	2	replace
344	[BUG]  [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
345	[BUG]  [BUGGY]  If(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
346	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
347	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
348	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	69	None	add
349	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
350	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
351	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	69	None	add
352	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
353	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	1	add
355	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	26	1	add
356	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	25	5	replace
357	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	25	5	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	25	5	replace
359	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	25	5	replace
360	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
361	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
362	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
363	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
364	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.running	  	non-compiled	[CE]  	71	None	add
365	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
366	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
367	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
368	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
369	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
370	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
371	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
372	[BUG]  [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	non-compiled	[CE]  ';'  expected	105	None	replace
373	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
374	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this	  	non-compiled	[CE]  	111	None	add
375	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
376	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  int    this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  not  a  statement	116	None	replace
377	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
378	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	12	None	add
379	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
380	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
381	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
382	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
383	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  Il  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	12	None	add
384	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
385	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
386	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
387	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
388	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	10	None	add
389	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
390	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
391	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
392	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
393	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
394	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
395	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	73	None	add
396	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
397	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
398	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
399	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
400	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING  &&	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
401	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	98	None	add
402	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  this.runningState  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	98	None	add
403	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  ';'  expected	100	None	add
404	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	79	5	add
405	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	79	5	add
406	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
407	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	79	5	add
408	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	79	5	add
409	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
410	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.    	non-compiled	[CE]  <identifier>  expected	81	None	replace
411	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.    	non-compiled	[CE]  <identifier>  expected	81	None	replace
412	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	77	5	add
413	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	77	5	add
414	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
415	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
416	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
417	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	55	5	add
418	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
419	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
420	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
421	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
423	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
424	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	50	5	replace
425	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState    >=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	50	5	replace
426	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  this.runningState    =    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	38	None	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
428	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
429	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
430	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	4	add
431	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING)    {    If(this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  ';'  expected	113	None	add
432	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
433	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
434	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
435	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	20	2	add
437	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	20	2	add
438	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	20	None	add
439	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
440	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_	  	non-compiled	[CE]  	3	None	add
441	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED  &&	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
442	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
443	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
444	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
445	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
446	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
447	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
448	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
449	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
450	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }	          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
451	[BUG]  [BUGGY]  This.runningState  =  STATE_STOPPED;  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  This.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	This.runningState  =  STATE_STOPPED;	  This.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
452	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  this.splitState  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.splitState  =  System.currentTimeMillis();	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
453	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
454	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  unreachable  statement  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  unreachable  statement	11	None	replace
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	while(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	11	5	replace
456	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	11	5	replace
457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
458	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	16	5	add
460	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	16	5	add
461	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
462	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	16	5	add
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
464	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	2	add
465	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	77	2	add
466	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	77	2	add
467	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  STATE_UPSTARTED  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_UPSTARTED	77	None	add
468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	77	2	add
469	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	77	2	add
470	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
471	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	5	add
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	51	2	add
473	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	51	2	add
474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	51	2	add
475	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	51	2	add
476	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	51	5	add
477	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	51	5	add
478	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
479	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
480	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
481	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.stopTime  =  System.currentTimeMillis()  -  startTime;	  this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
482	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	82	5	add
483	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	82	5	add
484	[BUG]  [BUGGY]  If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
485	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
486	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  long  runningState  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
487	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
488	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	53	5	add
490	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	53	5	add
491	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
492	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	53	5	add
493	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	99	None	replace
494	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
495	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
496	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	10	None	add
497	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
498	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	10	5	add
499	[BUG]  [BUGGY]  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	non-compiled	[CE]  ';'  expected	105	None	replace
500	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
501	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	26	None	add
502	[BUG]  [BUGGY]  If(this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
503	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
504	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
505	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
506	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
507	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
508	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	111	5	add
509	[BUG]  [BUGGY]  this.runningState  =  STATE_UNISTARTED;  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_UNISTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_UNISTARTED;	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    >>    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
511	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
513	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
514	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
515	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
516	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
517	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
518	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
519	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
520	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
521	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
522	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_UNSPLIT;	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
523	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
524	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
525	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
526	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
527	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
528	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
529	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
530	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
531	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	5	add
533	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	5	add
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	20	2	add
535	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	20	2	add
536	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  Il  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  Il  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  Il	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	83	None	replace
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	5	add
538	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	5	add
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
540	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
542	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	2	add
543	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
545	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
546	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
547	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
548	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
549	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  long  splitState  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
550	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	5	add
551	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	5	add
552	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	5	add
553	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	5	add
554	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  >>  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  >>  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState    ==    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  >>  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
555	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  unreachable  statement	70	None	replace
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	5	add
557	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	5	add
558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
559	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
561	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
562	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
563	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
564	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING  +  1;  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  this.runningState  =  STATE_RUNNING  +  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_RUNNING  +  1;	  this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
565	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	98	None	add
566	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
567	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
568	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
569	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
570	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	12	None	add
571	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
572	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
573	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
574	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	12	5	add
575	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
576	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
577	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	1	add
578	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	1	add
579	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
580	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        &&        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
581	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
582	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
583	[BUG]  [BUGGY]  If(this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  If(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	If(this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
584	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	79	5	add
585	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	79	5	add
586	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	79	5	add
587	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	79	5	add
588	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
589	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
590	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
591	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
592	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
593	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	                if(this.runningState!=        STATE_RUNNING        ||        this.runningState!=        STATE_SUSPENDED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	69	5	add
594	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RONNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
