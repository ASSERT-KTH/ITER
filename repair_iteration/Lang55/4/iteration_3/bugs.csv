bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	27	3	replace
2	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	27	3	replace
3	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  IllegalStateException  	27	2	replace
4	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  IllegalStateException  	27	2	replace
5	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
6	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
7	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println();    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
9	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println();    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println();    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
11	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println();    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
12	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
13	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
14	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
15	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
16	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  stopTime;	  int    this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  not  a  statement	131	None	replace
17	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  stopTime;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  stopTime;	  int    this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  not  a  statement	131	None	replace
18	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
19	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
20	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
21	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
22	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
23	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
24	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
25	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
26	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  IllegalStateException  	32	2	replace
27	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  IllegalStateException  	32	2	replace
28	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
29	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
30	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	61	None	add
31	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
32	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
33	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
34	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	61	3	add
36	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	61	3	add
37	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
38	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
39	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
40	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
41	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
42	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  >=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  >=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  >=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
43	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  >>  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  >>  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  >>  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	34	2	replace
45	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	34	2	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	34	3	replace
47	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	34	3	replace
48	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	93	2	replace
49	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	93	2	replace
50	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	145	2	replace
51	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	145	2	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	145	2	replace
53	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_RUNNING)  {  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	145	2	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	14	2	replace
55	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	14	2	replace
56	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	14	2	replace
57	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	14	2	replace
58	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  startTime;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  System.currentTimeMillis()  /  startTime;	  this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
59	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  IllegalStateException  	26	2	replace
60	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  IllegalStateException  	26	2	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
62	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_RUNNING)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
63	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
64	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
65	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
66	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
67	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
68	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
69	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.stopTime  =  System.currentTimeMillis()  -  1;	  this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
70	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.stopTime  =  System.currentTimeMillis()  +  1;	  this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
71	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.stopTime  =  System.currentTimeMillis()  /  2;	  this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
72	[BUG]  [BUGGY]  Stopwatch.this.runningState  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Stopwatch.this.runningState  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Stopwatch.this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
73	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
74	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
75	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
76	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  startTime;	  int    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	128	None	replace
77	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  startTime;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  startTime;	  int    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	128	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	129	3	add
79	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	129	3	add
80	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	129	3	add
81	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	129	3	add
82	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	129	None	add
83	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	129	3	add
84	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	129	3	add
85	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	129	None	add
86	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
87	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
88	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
89	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
90	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
91	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
92	[BUG]  [BUGGY]  If(this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
94	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
96	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
97	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    Stopwatch.this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	126	None	add
98	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	126	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
100	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
101	[BUG]  [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Stopwatch.this.stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
102	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
103	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
104	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
105	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
106	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
107	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
108	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
109	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
110	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	116	2	add
111	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	116	2	add
112	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
113	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
114	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
115	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
116	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
117	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
118	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
119	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
120	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
121	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
122	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
123	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
125	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
126	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
127	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
128	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
129	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
130	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
131	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
132	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
133	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
134	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
135	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  &&  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_STOPPED  &&  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
136	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  ==  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
137	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  >=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	5	1	add
139	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	5	1	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	5	1	add
141	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	5	1	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.. ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.. ");	  	compilable	  [FE]  AssertionFailedError  	5	1	add
143	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.. ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.. ");	  	compilable	  [FE]  AssertionFailedError  	5	1	add
144	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	137	None	replace
145	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	137	None	replace
146	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	137	None	replace
147	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	137	None	replace
148	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	139	None	replace
149	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
150	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	139	None	replace
151	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	139	None	replace
152	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	102	2	replace
153	[BUG]  [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	102	2	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	56	3	replace
155	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	56	3	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
157	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
158	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
159	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
160	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
161	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState  >=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState  >=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
162	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
163	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
164	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
165	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
166	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    if(this.runningState  >=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
167	[BUG]  [BUGGY]  it.runningState  =  STATE_STOPPED;  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  it.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	it.runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    it.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
168	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
169	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
170	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
171	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
172	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
173	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	140	None	add
174	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	140	None	add
175	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
176	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
177	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
178	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
180	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	12	3	replace
182	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_RUNNING)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	12	3	replace
183	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	104	2	replace
184	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	104	2	replace
185	[BUG]  [BUGGY]  int  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  this.runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	98	None	replace
186	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
187	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
188	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
189	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
190	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
191	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
192	[BUG]  [BUGGY]  If(this.runningState  ==  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState  ==  STATE_RUNNING)  {	  if(this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState    ==    STATE_SUSPENDED)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
193	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	138	3	add
194	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	138	3	add
195	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	138	3	add
196	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	138	3	add
197	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	138	3	add
198	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	138	3	add
199	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	138	3	add
200	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	138	3	add
201	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
202	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
203	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
204	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >>  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >>  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  >>  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
205	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
206	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
207	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
208	[BUG]  [BUGGY]  it.runningState  =  STATE_UNSTARTED;  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  it.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	it.runningState  =  STATE_UNSTARTED;	          this.runningState    =    STATE_UNSTARTED;    it.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	76	None	replace
209	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
210	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
211	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    Stopwatch    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
212	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    Stopwatch    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
213	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	96	3	add
214	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	96	3	add
215	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
216	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
217	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
218	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
219	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	96	None	add
220	[BUG]  [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	This.runningState  =  STATE_UNSTARTED;	  This.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
221	[BUG]  [BUGGY]  This.runningState  =  STATE_SUSPENDED;  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  This.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	This.runningState  =  STATE_SUSPENDED;	  This.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
222	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
223	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
224	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  >=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  >=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    if(this.runningState  >=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
225	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    If(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
226	[BUG]  [BUGGY]  System.err.println( "StoPPED  STATE_RUNNING  must  be  running  to  suspend.   ");  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  System.err.println( "StoPPED  STATE_RUNNING  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	System.err.println( "StoPPED  STATE_RUNNING  must  be  running  to  suspend.   ");	          System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
227	[BUG]  [BUGGY]  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	125	None	replace
228	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
229	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
230	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	72	2	add
231	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	72	2	add
232	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  not  a  statement	72	None	add
233	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNISTARTED;  this.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  STATE_UNISTARTED  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNISTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNISTARTED;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_UNISTARTED	72	None	add
234	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  this.runningState  =  System.currentTimeMillis()  +  1;	  int    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  not  a  statement	84	None	replace
235	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  1;	  int    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  not  a  statement	84	None	replace
236	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    If(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
238	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
240	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
241	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
242	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
243	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
244	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  If(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  If(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    If(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_RUNNING)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
245	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
246	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
247	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
248	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
249	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
250	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
251	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	118	None	add
252	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
253	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
255	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
256	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    Stopwatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	77	None	add
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	2	add
258	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	2	add
259	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  Stopwatch  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    Stopwatch  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  Stopwatch	77	None	add
260	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	77	None	add
261	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
262	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
263	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this.runningState);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Thread.currentThread().interrupt(this.runningState);  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Thread.currentThread().interrupt(this.runningState);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	147	None	replace
264	[BUG]  [BUGGY]  Thread.currentThread().shutdown();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Thread.currentThread().shutdown();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Thread.currentThread().shutdown();	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	147	None	replace
265	[BUG]  [BUGGY]  System.err.println();  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	System.err.println();	          System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    System.err.println();    	non-compiled	[CE]  <identifier>  expected	134	None	replace
266	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
267	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
268	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
269	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
270	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
271	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
272	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
273	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
274	[BUG]  [BUGGY]  If(this.runningState  ==  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_RUNNING)    {    If(this.runningState    ==    STATE_RUNNING)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
275	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
276	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
277	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
278	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
279	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
280	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
281	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
282	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
283	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
284	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  >>  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  >>  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    if(this.runningState  >>  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
285	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  1;	  int    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  not  a  statement	83	None	replace
286	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	135	None	replace
287	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	135	None	replace
288	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	135	None	replace
289	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	stopTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	135	None	replace
290	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
291	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
292	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	136	3	add
293	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	136	3	add
294	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
295	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
296	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	136	None	add
297	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  runningState  =  System.currentTimeMillis()  -  1;	  int    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	150	None	replace
298	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  runningState  =  System.currentTimeMillis();  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  runningState  =  System.currentTimeMillis();	  int    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	150	None	replace
299	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  runningState  =  System.currentTimeMillis()  +  1;	  int    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	150	None	replace
300	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
301	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
302	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
303	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
304	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
305	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
306	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	59	None	add
307	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running	  	non-compiled	[CE]  ')'  expected	59	None	add
308	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	148	None	replace
309	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	148	None	replace
310	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
311	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
312	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	111	3	replace
314	[BUG]  [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  >=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	111	3	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
316	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
318	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
320	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.. ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.. ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
322	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.. ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.. ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.. ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	3	1	add
323	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	57	2	add
324	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	57	2	add
325	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	57	None	add
326	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	57	3	add
327	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	57	3	add
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
329	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	57	2	add
330	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running	  	non-compiled	[CE]  ')'  expected	57	None	add
331	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
332	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
333	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
334	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
335	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	120	3	add
337	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	120	3	add
338	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
339	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
340	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
341	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
342	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	120	None	add
343	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
344	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  stopTime;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  System.currentTimeMillis()  /  stopTime;	  this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  <identifier>  expected	132	None	replace
345	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;	  this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  <identifier>  expected	132	None	replace
346	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	127	None	replace
347	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	127	None	replace
348	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	127	None	replace
349	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
350	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
351	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
352	[BUG]  [BUGGY]  long  this.runningState  =  STATE_RUNNING;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  this.runningState  =  STATE_RUNNING;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  this.runningState  =  STATE_RUNNING;	  int    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  not  a  statement	19	None	replace
353	[BUG]  [BUGGY]  char  this.runningState  =  STATE_RUNNING;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  char  this.runningState  =  STATE_RUNNING;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	char  this.runningState  =  STATE_RUNNING;	  int    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  not  a  statement	19	None	replace
354	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
355	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
356	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
357	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    If(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	57	3	add
359	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	57	3	add
360	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	57	3	add
361	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	57	3	add
362	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	57	3	add
363	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	57	3	add
364	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    it.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	76	None	replace
365	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]                IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    it.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	76	None	replace
366	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
367	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
368	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
369	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
370	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
371	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
372	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
373	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
374	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
375	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
376	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.splitState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.splitState  =  STATE_STOPPED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
377	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
378	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
379	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
380	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
381	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
382	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	118	None	add
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
384	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
385	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  }  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  not  a  statement	74	None	replace
386	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
387	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPING)  {  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  }  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPING)  {  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPING)  {  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  not  a  statement	74	None	replace
388	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
389	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	126	None	add
390	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	126	None	add
391	[BUG]  [BUGGY]  System.err.println( "StoPPED  must  be  running  to  suspend.   ");  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  System.err.println( "StoPPED  must  be  running  to  suspend.   ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	System.err.println( "StoPPED  must  be  running  to  suspend.   ");	          System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
392	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }	  if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
393	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	148	None	replace
394	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
395	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	5	1	add
397	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	5	1	add
398	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    If(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  ';'  expected	92	None	add
399	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
400	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
401	[BUG]  [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
402	[BUG]  [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
403	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
404	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
405	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
406	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  Stopwatch  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    Stopwatch    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
407	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  If(this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_STOPPED)    {    If(this.runningState    ==    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
408	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
409	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	138	None	add
410	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	138	None	add
411	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    If(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  ';'  expected	90	None	add
412	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this	  	non-compiled	[CE]  not  a  statement	129	None	add
413	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE	  	non-compiled	[CE]  ';'  expected	129	None	add
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	69	3	replace
415	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	69	3	replace
416	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	69	2	replace
417	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	69	2	replace
418	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
419	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Thread.currentThread().interrupt(this);  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Thread.currentThread().interrupt(this);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	147	None	replace
420	[BUG]  [BUGGY]  Thread.currentThread().interrupt(null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Thread.currentThread().interrupt(null);  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Thread.currentThread().interrupt(null);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	147	None	replace
421	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Thread.currentThread().interrupt(this,  null);  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Thread.currentThread().interrupt(this,  null);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	147	None	replace
422	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
423	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
424	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
425	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
426	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
427	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	136	3	add
428	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
429	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	3	1	add
431	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	3	1	add
432	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
433	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	2	add
434	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	139	None	replace
435	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	139	None	replace
436	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
437	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
438	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	72	2	add
439	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	72	2	add
440	[BUG]  [BUGGY]  float  this.runningState  =  STATE_RUNNING;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  float  this.runningState  =  STATE_RUNNING;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	float  this.runningState  =  STATE_RUNNING;	  int    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  not  a  statement	19	None	replace
441	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
442	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
443	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
444	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
445	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
446	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
447	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime  +  1;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  System.currentTimeMillis()  -  startTime  +  1;	  this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
448	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
449	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
450	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
451	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
452	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
453	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	2	add
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
455	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
457	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
458	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
459	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	93	3	replace
461	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    &&    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	93	3	replace
462	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
463	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
464	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
465	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	145	2	replace
466	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	145	2	replace
467	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	145	2	replace
468	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    	compilable	  [FE]  IllegalStateException  	145	2	replace
469	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	137	None	replace
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	137	3	replace
471	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	137	3	replace
472	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	137	None	replace
473	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_RUNNING)    {    If(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  ';'  expected	144	None	add
474	[BUG]  [BUGGY]  System.err.println( "StoPPED  must  be  running  to  suspension. ");  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  System.err.println( "StoPPED  must  be  running  to  suspension. ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	System.err.println( "StoPPED  must  be  running  to  suspension. ");	          System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
475	[BUG]  [BUGGY]  this.runningState  =  STATE_STARTED;  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STARTED;	  this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
476	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
477	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState    ==    STATE_STOPPED)    {    If(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_STOPPED)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
478	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	61	3	add
479	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	61	3	add
480	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
481	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
482	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
483	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	61	3	add
484	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	30	3	replace
486	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_STOPPED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_STOPPED)    {    	compilable	  [FE]  AssertionFailedError  	30	3	replace
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
488	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_UNSTARTED  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
490	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState  ==  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_STOPPED    ||    this.runningState    ==    STATE_RUNNING)    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
491	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
492	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  If(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  If(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState    ==    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    If(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
493	[BUG]  [BUGGY]  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    If(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    	non-compiled	[CE]  ';'  expected	112	None	replace
494	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_SUSPENDED    ||    this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
495	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	129	3	add
496	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	129	3	add
497	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this	  	non-compiled	[CE]  ')'  expected	129	None	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println();    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
499	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println();  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println();    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
500	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
502	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	126	2	add
503	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.stopTime  =  System.currentTimeMillis()  -  startTime;	  this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
504	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  STATE_STOPPED;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  STATE_STOPPED;	  int    this.runningState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  not  a  statement	131	None	replace
505	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	127	None	replace
506	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
507	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
508	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
509	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	37	None	add
510	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
511	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
512	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
513	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_UNSTARTED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
514	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
515	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
516	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
517	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
518	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
519	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
520	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
521	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
522	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTOPPED;  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_UNSTOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_UNSTOPPED;	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
523	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  runningState  =  System.currentTimeMillis()  -  startTime;	  int    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  <identifier>  expected	128	None	replace
524	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
525	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
526	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
527	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	142	3	add
528	[BUG]  [BUGGY]  StopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  StopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	StopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
529	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	148	None	replace
530	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	72	3	add
531	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	72	3	add
532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	72	3	add
533	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	72	3	add
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	72	3	add
535	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	72	3	add
536	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
537	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
538	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
539	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	116	2	add
540	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	116	2	add
541	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
542	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
543	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
544	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	140	3	add
545	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  stopTime;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	int  runningState  =  System.currentTimeMillis()  -  stopTime;	  int    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	150	None	replace
546	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
547	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
548	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	3	add
549	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	3	add
550	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	3	add
551	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	122	3	add
552	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	5	1	add
554	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	5	1	add
555	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	147	None	replace
556	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
557	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
558	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
559	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
560	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
561	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	139	None	replace
562	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  suspended. ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  suspended. ");  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  suspended. ");	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  <identifier>  expected	146	None	replace
563	[BUG]  [BUGGY]  If(this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState!=  STATE_STOPPED)  {	  if(this.runningState    ==    STATE_RUNNING)    {    If(this.runningState    ==    STATE_RUNNING)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
564	[BUG]  [BUGGY]  If(this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState    ==    STATE_RUNNING)    {    If(this.runningState    ==    STATE_RUNNING)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
565	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.running	  	non-compiled	[CE]  ')'  expected	61	None	add
566	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this	  	non-compiled	[CE]  ')'  expected	61	None	add
567	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	3	add
568	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	3	add
569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	120	3	add
570	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	120	3	add
571	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	3	add
572	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	3	add
573	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	3	add
574	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	120	3	add
575	[BUG]  [BUGGY]  Stopwatch  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {      [BUGGY]  Stopwatch  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	Stopwatch  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
576	[BUG]  [BUGGY]  If(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {      [BUGGY]  If(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	If(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    If(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_STOPPED)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
577	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	77	None	add
578	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
579	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
580	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
581	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
582	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	96	3	add
583	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
584	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
585	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
586	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5773502691896258	176	176	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_STOPPED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	59	3	add
