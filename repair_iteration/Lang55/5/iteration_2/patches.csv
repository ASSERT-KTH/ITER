bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  return  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  return  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    return  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  unreachable  statement	121	None	add
2	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  long  startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  long  startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    long  startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  unreachable  statement	121	None	add
3	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    int  startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
4	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  this.startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  this.startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    int  this.startTime  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  not  a  statement	121	None	add
5	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  /  this.stopTime;	  return    this.startTime    /    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	29	3	replace
7	[BUG]  [BUGGY]  return  this.runningState  /  this.stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  /  this.stopTime;	  return    this.startTime    /    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	29	3	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  /  this.runningState;	  return    this.startTime    /    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	29	4	replace
9	[BUG]  [BUGGY]  return  this.startTime  /  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.runningState;	  return    this.startTime    /    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	29	4	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  /  this.stopTime;	  return    this.startTime    /    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	29	3	replace
11	[BUG]  [BUGGY]  return  this.splitState  /  this.stopTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  /  this.stopTime;	  return    this.startTime    /    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	29	3	replace
12	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.stopTime;    long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	128	None	add
13	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  int  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  int  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.stopTime;    int  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	128	None	add
14	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  Long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  Long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.stopTime;    Long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	128	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  long  runState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runningState    =    System.currentTimeMillis()    -    this.stopTime;    long  runState  =  System.currentTimeMillis()  -  this.stopTime;	  	compilable	  [FE]  AssertionFailedError  	128	1	add
16	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  long  runState  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  long  runState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.stopTime;    long  runState  =  System.currentTimeMillis()  -  this.stopTime;	  	compilable	  [FE]  AssertionFailedError  	128	1	add
17	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    int  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	93	None	add
18	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  return  this.runningState  -  this.startTime  +  1;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  return  this.runningState  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    return  this.runningState  -  this.startTime  +  1;	  	non-compiled	[CE]  unreachable  statement	93	None	add
19	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    int  this.runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  not  a  statement	93	None	add
20	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    long  runState  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  unreachable  statement	93	None	add
21	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    long  runState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	93	None	add
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    int    startTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	45	4	replace
23	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    int    startTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	45	4	replace
24	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    int    startTime    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
25	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    int    startTime    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  incompatible  types	45	None	replace
26	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runTime  =  System.currentTimeMillis();	  int    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	5	4	replace
27	[BUG]  [BUGGY]  double  runTime  =  System.currentTimeMillis();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runTime  =  System.currentTimeMillis();	  int    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	5	4	replace
28	[BUG]  [BUGGY]  short  runTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  short  runTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	short  runTime  =  System.currentTimeMillis();	  int    runTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
29	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	117	None	add
30	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	117	None	add
31	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	117	None	add
32	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	117	None	add
33	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  int  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  int  startTime  =  this.runningState.getStartTime();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    int  startTime  =  this.runningState.getStartTime();	  	non-compiled	[CE]  int  cannot  be  dereferenced	117	None	add
34	[BUG]  [BUGGY]  long  this.runningState  =  getSplitState()  -  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  getSplitState()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  getSplitState()  -  1;	  long    this.runningState    =    getSplitState();    	non-compiled	[CE]  not  a  statement	14	None	replace
35	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  this.runningState.getSplitState();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  this.runningState.getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    int  splitState  =  this.runningState.getSplitState();	  	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	add
36	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  getSplitState();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    int  splitState  =  getSplitState();	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
37	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    int  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	30	None	add
38	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  this.splitState.getSplitState();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  this.splitState.getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    int  splitState  =  this.splitState.getSplitState();	  	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	add
39	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  this.splitState  /  this.startTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  this.splitState  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    long  splitState  =  this.splitState  /  this.startTime;	  	non-compiled	[CE]  unreachable  statement	30	None	add
40	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	52	None	add
41	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	52	None	add
42	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	52	None	add
43	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  startTime  -  this.runningState;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  startTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    long  startTime  -  this.runningState;	  	non-compiled	[CE]  ';'  expected	52	None	add
44	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
45	[BUG]  [BUGGY]  it.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  it  [FE]            IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  it.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	it.runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    it.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  it	50	None	replace
46	[BUG]  [BUGGY]  int  startTime  =  this.runningState.currentTimeMillis()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.currentTimeMillis()  -  1;	  int    startTime    =    this.runningState.currentTimeMillis();    	non-compiled	[CE]  int  cannot  be  dereferenced	158	None	replace
47	[BUG]  [BUGGY]  long  startTime  =  this.runningState.currentTimeMillis();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.runningState.currentTimeMillis();	  int    startTime    =    this.runningState.currentTimeMillis();    	non-compiled	[CE]  int  cannot  be  dereferenced	158	None	replace
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	153	4	replace
49	[BUG]  [BUGGY]  long  runningState  =  this.stopTime  -  this.runningState;  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	153	4	replace
50	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	153	4	replace
51	[BUG]  [BUGGY]  long  runningState  =  this.runningState  -  this.runningState;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	153	4	replace
52	[BUG]  [BUGGY]  int  runningState  =  this.stopTime  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	non-compiled	[CE]  possible  loss  of  precision	153	None	replace
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.startTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.startTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	153	4	replace
54	[BUG]  [BUGGY]  long  runningState  =  this.startTime  -  this.runningState;  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.startTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.startTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	153	4	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
56	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	73	2	add
57	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  int  this.runningState  =  STATE_RUNNING;  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  int  this.runningState  =  STATE_RUNNING;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_RUNNING;    int  this.runningState  =  STATE_RUNNING;	  	non-compiled	[CE]  not  a  statement	73	None	add
58	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  This.runningState  =  STATE_RUNNING;  [CE]  cannot  find  symbol  This  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  This.runningState  =  STATE_RUNNING;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_RUNNING;    This.runningState  =  STATE_RUNNING;	  	non-compiled	[CE]  cannot  find  symbol  This	73	None	add
59	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  it.runningState  =  STATE_RUNNING;  [CE]  cannot  find  symbol  it  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_RUNNING;  it.runningState  =  STATE_RUNNING;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_RUNNING;    it.runningState  =  STATE_RUNNING;	  	non-compiled	[CE]  cannot  find  symbol  it	73	None	add
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis();	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	56	4	replace
61	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis();	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	56	4	replace
62	[BUG]  [BUGGY]  int  startTime  =  this.stopTime  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.stopTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.stopTime  -  this.startTime;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	56	None	replace
63	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    1;    long  runTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	1	None	add
64	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  int  runTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  int  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    1;    int  runTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	1	None	add
65	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  Long  runTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  Long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    1;    Long  runTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	1	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  long  runningTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runTime    =    System.currentTimeMillis()    -    1;    long  runningTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
67	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  long  runningTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  long  runningTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    1;    long  runningTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
68	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	137	None	add
69	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  int  splitState  =  this.runningState.getSplitState();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  int  splitState  =  this.runningState.getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    int  splitState  =  this.runningState.getSplitState();	  	non-compiled	[CE]  int  cannot  be  dereferenced	137	None	add
70	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  long  startTime  -  this.splitState;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  long  startTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    long  startTime  -  this.splitState;	  	non-compiled	[CE]  ';'  expected	137	None	add
71	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  int  startTime  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  int  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    int  startTime  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	137	None	add
72	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	137	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  /  this.runningState;	  return    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	37	4	replace
74	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  /  this.runningState;	  return    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	37	4	replace
75	[BUG]  [BUGGY]  return  this.startTime.currentTimeMillis()  /  System.currentTimeMillis();  [CE]  long  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime.currentTimeMillis()  /  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime.currentTimeMillis()  /  System.currentTimeMillis();	  return    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  long  cannot  be  dereferenced	37	None	replace
76	[BUG]  [BUGGY]  long  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  STATE_UNSTARTED;	  int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  not  a  statement	98	None	replace
77	[BUG]  [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runTime        =        System.currentTimeMillis();        long    runningTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	12	None	add
78	[BUG]  [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  int  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  int  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runTime        =        System.currentTimeMillis();        long    runningTime    =    System.currentTimeMillis();    int  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	12	None	add
79	[BUG]  [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [CE]  variable  runningTime  is  already  defined  in  method  getTime()  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runTime        =        System.currentTimeMillis();        long    runningTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningTime  is  already  defined  in  method  getTime()	12	None	add
80	[BUG]  [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  Long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  Long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runTime        =        System.currentTimeMillis();        long    runningTime    =    System.currentTimeMillis();    Long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	12	None	add
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  /  1;	  long    runTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  RuntimeException  	4	4	replace
82	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  1;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  /  1;	  long    runTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  RuntimeException  	4	4	replace
83	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis()  +  1;	  long    runTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
84	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis()        -        this.startTime;        long    runState    =    System.currentTimeMillis()    -    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	102	None	add
85	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis()        -        this.startTime;        long    runState    =    System.currentTimeMillis()    -    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	102	None	add
86	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runState  is  already  defined  in  method  getTime()  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis()        -        this.startTime;        long    runState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runState  is  already  defined  in  method  getTime()	102	None	add
87	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis()        -        this.startTime;        long    runState    =    System.currentTimeMillis()    -    this.startTime;    Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	102	None	add
88	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  int  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runState  is  already  defined  in  method  getTime()  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;  int  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis()        -        this.startTime;        long    runState    =    System.currentTimeMillis()    -    this.startTime;    int  runState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runState  is  already  defined  in  method  getTime()	102	None	add
89	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis();  double  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis();  double  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis();    double  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	32	None	add
90	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis();    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	32	None	add
91	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis();    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	32	None	add
92	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis();  Double  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis();  Double  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis();    Double  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	32	None	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis();  double  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double    runningState    =    System.currentTimeMillis();    double  runState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	32	1	add
94	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis();  double  runState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis();  double  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis();    double  runState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	32	1	add
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.stopTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  this.stopTime  -  this.startTime;	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	58	4	replace
96	[BUG]  [BUGGY]  long  startTime  =  this.stopTime  -  this.startTime;  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.stopTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.stopTime  -  this.startTime;	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	58	4	replace
97	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.startTime  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  this.startTime  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	58	4	replace
98	[BUG]  [BUGGY]  long  startTime  =  this.startTime  -  this.stopTime;  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.startTime  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.startTime  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	58	4	replace
99	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  System.currentTimeMillis();	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  /  this.startTime;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
101	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.startTime;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  /  this.startTime;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  -  this.runningState;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
103	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  -  this.runningState;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  *  this.startTime;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
105	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  *  this.startTime;  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  *  this.startTime;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  +  this.startTime;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
107	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  this.startTime;  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  +  this.startTime;	  long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	136	4	replace
108	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  int  splitState  =  this.runningState.getSplitState();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  int  splitState  =  this.runningState.getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    int  splitState  =  this.runningState.getSplitState();	  	non-compiled	[CE]  int  cannot  be  dereferenced	119	None	add
109	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  this.stopTime  /  this.splitState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  this.stopTime  /  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    long  splitState  =  this.stopTime  /  this.splitState;	  	non-compiled	[CE]  unreachable  statement	119	None	add
110	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  int  splitState  =  getSplitState();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  int  splitState  =  getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    int  splitState  =  getSplitState();	  	non-compiled	[CE]  cannot  find  symbol	119	None	add
111	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  int  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  int  startTime  =  this.runningState.getStartTime();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    int  startTime  =  this.runningState.getStartTime();	  	non-compiled	[CE]  int  cannot  be  dereferenced	119	None	add
112	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  this.runningState.getSplitState();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  this.runningState.getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    long  splitState  =  this.runningState.getSplitState();	  	non-compiled	[CE]  int  cannot  be  dereferenced	119	None	add
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  /  this.stopTime;	  return    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	78	3	replace
114	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  /  this.stopTime;	  return    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	78	3	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  *  this.stopTime;	  return    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	78	4	replace
116	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.stopTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  *  this.stopTime;	  return    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	78	4	replace
117	[BUG]  [BUGGY]  return  this.stopTime.currentTimeMillis()  -  this.startTime;  [CE]  long  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  long  cannot  be  dereferenced	78	None	replace
118	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	75	3	add
119	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	75	3	add
120	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  int  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_UNSTARTED;    int  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  not  a  statement	75	None	add
121	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  This.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  This  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  This.runningState  =  STATE_UNSTARTED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_UNSTARTED;    This.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol  This	75	None	add
122	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  it  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  it.runningState  =  STATE_UNSTARTED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_UNSTARTED;    it.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol  it	75	None	add
123	[BUG]  [BUGGY]  int  runningState  =  this.runningState  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.runningState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  this.runningState  -  this.startTime;	  return    this.runningState    -    this.startTime;    long    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	131	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  -  this.startTime;	  return    this.startTime    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	138	3	replace
125	[BUG]  [BUGGY]  return  this.splitState  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  -  this.startTime;	  return    this.startTime    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	138	3	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  /  this.splitState;	  return    this.startTime    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	138	3	replace
127	[BUG]  [BUGGY]  return  this.startTime  /  this.splitState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.splitState;	  return    this.startTime    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	138	3	replace
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  /  this.runningState;	  long    runningState    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	88	4	replace
129	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.runningState;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  /  this.runningState;	  long    runningState    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	88	4	replace
130	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  /  this.stopTime;	  long    runningState    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	88	4	replace
131	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.stopTime;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  /  this.stopTime;	  long    runningState    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	88	4	replace
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  *  this.startTime;	  long    runningState    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	88	4	replace
133	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  *  this.startTime;  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  *  this.startTime;	  long    runningState    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	88	4	replace
134	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis()  -  1;	  long    runTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
135	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis();  int  runState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis();  int  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis();  int  runState  =  System.currentTimeMillis();	          long    runningState    =    System.currentTimeMillis();    long    runState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
136	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();	          long    runningState    =    System.currentTimeMillis();    long    runState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
137	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED  &&  this.runningState  ==  STATE_SUSPENDED;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_STOPPED  &&  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_STOPPED  &&  this.runningState  ==  STATE_SUSPENDED;	  this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	141	None	replace
138	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED;	  this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	141	None	replace
139	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_STOPPED  &&  this.runningState!=  STATE_SUSPENDED;	  this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	141	None	replace
140	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	156	None	add
141	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	156	None	add
142	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  int  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    int  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	156	None	add
143	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	156	None	add
144	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  not  a  statement	156	None	add
145	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  long  runningState  =  System.currentTimeMillis()  +  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  long  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    +    1;    long  runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	22	None	add
146	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  int  runningState  =  System.currentTimeMillis()  +  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  int  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    +    1;    int  runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	22	None	add
147	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  Long  runningState  =  System.currentTimeMillis()  +  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  Long  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    +    1;    Long  runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	22	None	add
148	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  int  runState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  int  runState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    +    1;    int  runState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	22	None	add
149	[BUG]  [BUGGY]  int  startTime  =  this.runningState.getEndTime()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState.getEndTime()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.getEndTime()  -  1;	  int    startTime    =    this.runningState.getEndTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
150	[BUG]  [BUGGY]  long  startTime  =  this.runningState.getEndTime();  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState.getEndTime();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.runningState.getEndTime();	  int    startTime    =    this.runningState.getEndTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
151	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    this.runningState    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  not  a  statement	107	None	replace
152	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    this.runningState    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  not  a  statement	107	None	replace
153	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    this.runningState    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  possible  loss  of  precision	107	None	replace
154	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	57	4	replace
155	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	57	4	replace
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis()  /  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	57	4	replace
157	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.stopTime;  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis()  /  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	57	4	replace
158	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
159	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  return  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  return  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.runningState;    return  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	38	None	add
160	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	38	None	add
161	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.runningState;    int  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	38	None	add
162	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.runningState;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	38	None	add
163	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  +  this.runningState;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.runningState;    int  runningState  =  System.currentTimeMillis()  +  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	38	None	add
164	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  int  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  int  startTime  =  this.runningState.getStartTime();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    int  startTime  =  this.runningState.getStartTime();	  	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	add
165	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  int  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    int  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	24	None	add
166	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	24	None	add
167	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	24	None	add
168	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  /  this.runningState;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    long  startTime  =  System.currentTimeMillis()  /  this.runningState;	  	non-compiled	[CE]  unreachable  statement	24	None	add
169	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;	          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
170	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;	          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  /  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  RuntimeException  	154	4	replace
172	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.runningState;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  /  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  RuntimeException  	154	4	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1L;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.startTime  +  1L;	  return    this.runningState    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
174	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1L;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.startTime  +  1L;	  return    this.runningState    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  2;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.startTime  +  2;	  return    this.runningState    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
176	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  2;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.startTime  +  2;	  return    this.runningState    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
177	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  possible  loss  of  precision  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  long    runningState    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  possible  loss  of  precision	129	None	replace
178	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    +    1;    long  runTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	3	None	add
179	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  int  runTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  int  runTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    +    1;    int  runTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	3	None	add
180	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  Long  runTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  Long  runTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    +    1;    Long  runTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	3	None	add
181	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    +    1;    int  startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  long  runningTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runTime    =    System.currentTimeMillis()    +    1;    long  runningTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
183	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  long  runningTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  long  runningTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    +    1;    long  runningTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
184	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  +  1;	  long    runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  /  1;	  long    runningState    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  RuntimeException  	23	4	replace
186	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  1;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  /  1;	  long    runningState    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  RuntimeException  	23	4	replace
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.runningState  -  this.startTime;	  return    this.runningState    -    this.startTime;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	132	4	replace
188	[BUG]  [BUGGY]  long  runningState  =  this.runningState  -  this.startTime;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.runningState  -  this.startTime;	  return    this.runningState    -    this.startTime;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	132	4	replace
189	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis();  Long  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis();  Long  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis();  Long  runningState  =  System.currentTimeMillis();	          long    runningState    =    System.currentTimeMillis();    Long    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
190	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis();  Integer  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis();  Integer  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis();  Integer  runningState  =  System.currentTimeMillis();	          long    runningState    =    System.currentTimeMillis();    Long    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
191	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();	          long    runningState    =    System.currentTimeMillis();    Long    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
192	[BUG]  [BUGGY]  long  this.runningState  =  STATE_RUNNING;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  STATE_RUNNING;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  STATE_RUNNING;	  long    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	95	None	replace
193	[BUG]  [BUGGY]  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  STATE_SUSPENDED;	  long    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	95	None	replace
194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis()  /  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	83	4	replace
195	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis()  /  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	83	4	replace
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis()  *  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	83	4	replace
197	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  *  this.startTime;  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis()  *  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    /    this.startTime;    	compilable	  [FE]  RuntimeException  	83	4	replace
198	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  return  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  return  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    return  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	77	None	add
199	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	77	None	add
200	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  System.currentTimeMillis()  -  this.stopTime;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  not  a  statement	77	None	add
201	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	77	None	add
202	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    int  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	77	None	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  /  this.startTime  +  1;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
204	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  /  this.startTime  +  1;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  -  this.runningState  +  1;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	4	replace
206	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.runningState  +  1;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	4	replace
207	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.stopTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.stopTime  -  this.startTime;	  return    this.startTime    -    this.stopTime;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	134	4	replace
208	[BUG]  [BUGGY]  long  runningState  =  this.stopTime  -  this.startTime;  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.stopTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.stopTime  -  this.startTime;	  return    this.startTime    -    this.stopTime;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	134	4	replace
209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.startTime  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.startTime  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	134	4	replace
210	[BUG]  [BUGGY]  long  runningState  =  this.startTime  -  this.stopTime;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.startTime  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.startTime  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	134	4	replace
211	[BUG]  [BUGGY]  long  runningState  =  this.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.currentTimeMillis();	  return    this.startTime    -    this.stopTime;    int    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
212	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	81	None	replace
213	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	81	None	replace
214	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  1;	  int    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  not  a  statement	86	None	replace
215	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis()  +  1;	  int    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  not  a  statement	86	None	replace
216	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  incompatible  types	59	None	replace
217	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runState  =  System.currentTimeMillis()  -  this.startTime;	  return    this.runningState    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	65	4	replace
218	[BUG]  [BUGGY]  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runState  =  System.currentTimeMillis()  -  this.startTime;	  return    this.runningState    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	65	4	replace
219	[BUG]  [BUGGY]  int  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runState  =  System.currentTimeMillis()  -  this.startTime;	  return    this.runningState    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runState  =  System.currentTimeMillis()  /  this.startTime;	  return    this.runningState    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	65	4	replace
221	[BUG]  [BUGGY]  long  runState  =  System.currentTimeMillis()  /  this.startTime;  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runState  =  System.currentTimeMillis()  /  this.startTime;	  return    this.runningState    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	65	4	replace
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.runningState  -  this.stopTime;	  return    this.stopTime    -    this.runningState;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	115	4	replace
223	[BUG]  [BUGGY]  long  runningState  =  this.runningState  -  this.stopTime;  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.runningState  -  this.stopTime;	  return    this.stopTime    -    this.runningState;    int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	115	4	replace
224	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  1;	  int    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  not  a  statement	85	None	replace
225	[BUG]  [BUGGY]  long  this.runningState  =  0;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  0;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  0;	  int    this.runningState    =    0;    	non-compiled	[CE]  not  a  statement	130	None	replace
226	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_SUSPENDED  ||  this.runningState!=  STATE_STOPPED;	  this.runningState    =    STATE_STOPPED    ||    this.runningState!=    STATE_SUSPENDED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	142	None	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  /  this.runningState;	  return    this.splitState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	31	4	replace
228	[BUG]  [BUGGY]  return  this.splitState  /  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  /  this.runningState;	  return    this.splitState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	31	4	replace
229	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis();  float  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis();  float  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis();    float  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	34	None	add
230	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis();    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	34	None	add
231	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis();    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	34	None	add
232	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis();  double  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis();  double  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis();    double  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	34	None	add
233	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	91	None	add
234	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  splitState  =  this.splitState.getSplitState();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  splitState  =  this.splitState.getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  splitState  =  this.splitState.getSplitState();	  	non-compiled	[CE]  int  cannot  be  dereferenced	91	None	add
235	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  getSplitState();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  this.splitState  =  getSplitState();	  	non-compiled	[CE]  not  a  statement	91	None	add
236	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  splitState  =  this.runningState.getSplitState();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  splitState  =  this.runningState.getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  splitState  =  this.runningState.getSplitState();	  	non-compiled	[CE]  int  cannot  be  dereferenced	91	None	add
237	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  splitState  =  getSplitState();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  splitState  =  getSplitState();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  splitState  =  getSplitState();	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
238	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    this.startTime;    long  runTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	135	None	add
239	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  int  runTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  int  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    this.startTime;    int  runTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	135	None	add
240	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  Long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  Long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    this.startTime;    Long  runTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	135	None	add
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runTime    =    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	135	1	add
242	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	135	1	add
243	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    /    this.startTime;    long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	151	None	replace
244	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	151	None	replace
245	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	89	None	add
246	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.runningState;    int  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	89	None	add
247	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  Long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  Long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.runningState;    Long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	89	None	add
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  long  runState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runningState    =    System.currentTimeMillis()    -    this.runningState;    long  runState  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	89	1	add
249	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  long  runState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  long  runState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    this.runningState;    long  runState  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	89	1	add
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	114	3	replace
251	[BUG]  [BUGGY]  return  this.runningState  -  this.runningState;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	114	3	replace
252	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  int  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    int  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	54	None	add
253	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  int  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  int  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    int  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  not  a  statement	54	None	add
254	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  this.runningState  -  this.stopTime;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    long  runningState  =  this.runningState  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	54	None	add
255	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	54	None	add
256	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  long  runState  =  this.runningState  -  this.stopTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  long  runState  =  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    long  runState  =  this.runningState  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	54	None	add
257	[BUG]  [BUGGY]  short  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  short  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	short  this.runningState  =  STATE_SUSPENDED;	  int    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  not  a  statement	96	None	replace
258	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	28	None	add
259	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	28	None	add
260	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	28	None	add
261	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  this.runningState.getStartTime();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    int  startTime  =  this.runningState.getStartTime();	  	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	add
262	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    int  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	28	None	add
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  *  this.runningState;	  return    System.currentTimeMillis()    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	41	4	replace
264	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  *  this.runningState;	  return    System.currentTimeMillis()    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	41	4	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  +  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  +  this.startTime;	  return    System.currentTimeMillis()    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	41	4	replace
266	[BUG]  [BUGGY]  return  System.currentTimeMillis()  +  this.startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  +  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  +  this.startTime;	  return    System.currentTimeMillis()    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	41	4	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	71	1	add
268	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	71	1	add
269	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_SUSPENDED;    int  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	71	None	add
270	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  it.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  it  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  it.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_SUSPENDED;    it.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol  it	71	None	add
271	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  This.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  This  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  This.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState    =    STATE_SUSPENDED;    This.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol  This	71	None	add
272	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  1;	  long    runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
273	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis();  int  runningTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  System.currentTimeMillis();  int  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis();  int  runningTime  =  System.currentTimeMillis();	          long    runTime    =    System.currentTimeMillis();    long    runningTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
274	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();	          long    runTime    =    System.currentTimeMillis();    long    runningTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
275	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
276	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
277	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
278	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
279	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  this.runningState;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  runningState  =  this.runningState;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
280	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  this.runningState;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  this.runningState;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  runningState  =  this.runningState;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
282	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
283	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  this.stopTime;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  this.stopTime;	  int    this.runningState    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  not  a  statement	8	None	replace
284	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;	  int    this.runningState    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  not  a  statement	8	None	replace
285	[BUG]  [BUGGY]  int  this.runningState  =  this.stopTime.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  this.stopTime.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  this.stopTime.currentTimeMillis()  -  this.runningState;	  int    this.runningState    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  not  a  statement	8	None	replace
286	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  System.currentTimeMillis();	  return    this.runningState    -    this.startTime;    int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
287	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis();  Long  runTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  System.currentTimeMillis();  Long  runTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis();  Long  runTime  =  System.currentTimeMillis();	          long    runTime    =    System.currentTimeMillis();    Long    runTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
288	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();	          long    runTime    =    System.currentTimeMillis();    Long    runTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
289	[BUG]  [BUGGY]  short  runningState  =  this.stopTime  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  short  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	short  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    runningState    =    this.stopTime    -    this.runningState;    	non-compiled	[CE]  possible  loss  of  precision	155	None	replace
290	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis()  /  this.startTime;	  long    this.runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  not  a  statement	6	None	replace
291	[BUG]  [BUGGY]  int  startTime  =  this.runningState.getStartTime()  /  1;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState.getStartTime()  /  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.getStartTime()  /  1;	  int    startTime    =    this.runningState.getStartTime()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
292	[BUG]  [BUGGY]  This.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  This  [FE]        IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  This.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	This.runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    This.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  This	125	None	replace
293	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.runningState;	  long    runningState    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
294	[BUG]  [BUGGY]  long  runningState  =  this.runningState.currentTimeMillis()  -  this.runningState;  [CE]  int  cannot  be  dereferenced  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.runningState.currentTimeMillis()  -  this.runningState;	  long    runningState    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	replace
295	[BUG]  [BUGGY]  int  runningState  =  this.runningState  ||  this.runningState  ==  STATE_SUSPENDED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.runningState  ||  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  this.runningState  ||  this.runningState  ==  STATE_SUSPENDED;	  int    this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	146	None	replace
296	[BUG]  [BUGGY]  long  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;	  int    this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  not  a  statement	146	None	replace
297	[BUG]  [BUGGY]  int  this.runningState  =  this.runningState  ||  this.runningState  ==  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  this.runningState  ||  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  this.runningState  ||  this.runningState  ==  STATE_SUSPENDED;	  int    this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  not  a  statement	146	None	replace
298	[BUG]  [BUGGY]  int  this.runningState  =  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED;	  int    this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  not  a  statement	146	None	replace
299	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  int  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    int  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	26	None	add
300	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  not  a  statement	26	None	add
301	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	26	None	add
302	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	26	None	add
303	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	26	None	add
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  *  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  *  this.stopTime;	  return    this.stopTime    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	118	4	replace
305	[BUG]  [BUGGY]  return  this.startTime  *  this.stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  *  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  *  this.stopTime;	  return    this.stopTime    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	118	4	replace
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  *  this.startTime;	  return    this.stopTime    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	118	4	replace
307	[BUG]  [BUGGY]  return  this.runningState  *  this.startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  *  this.startTime;	  return    this.stopTime    *    this.startTime;    	compilable	  [FE]  AssertionFailedError  	118	4	replace
308	[BUG]  [BUGGY]  int  this.runningState  =  this.runningState  -  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  this.runningState  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  this.runningState  -  1;	  int    this.runningState    =    STATE_STOPPED    -    1;    	non-compiled	[CE]  not  a  statement	147	None	replace
309	[BUG]  [BUGGY]  long  this.runningState  =  STATE_STOPPED  -  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  STATE_STOPPED  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  STATE_STOPPED  -  1;	  int    this.runningState    =    STATE_STOPPED    -    1;    	non-compiled	[CE]  not  a  statement	147	None	replace
310	[BUG]  [BUGGY]  int  this.runningState  =  STATE_STOPPED  -  1L;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  STATE_STOPPED  -  1L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_STOPPED  -  1L;	  int    this.runningState    =    STATE_STOPPED    -    1;    	non-compiled	[CE]  not  a  statement	147	None	replace
311	[BUG]  [BUGGY]  int  runningState  =  this.runningState  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.runningState  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  this.runningState  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  return    this.runningState    -    this.startTime;    long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	float  runningState  =  System.currentTimeMillis()  /  this.startTime;	  float    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	140	4	replace
313	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  /  this.startTime;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float  runningState  =  System.currentTimeMillis()  /  this.startTime;	  float    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	140	4	replace
314	[BUG]  [BUGGY]  long  this.runningState  =  getSplitState()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  getSplitState()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  getSplitState()  +  1;	  int    this.runningState    =    getSplitState()    +    1;    	non-compiled	[CE]  not  a  statement	116	None	replace
315	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  System.currentTimeMillis()  -  1;	  double    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	33	4	replace
316	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  1;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  System.currentTimeMillis()  -  1;	  double    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	33	4	replace
317	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  System.currentTimeMillis()  +  1;	  double    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	33	4	replace
318	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  +  1;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  System.currentTimeMillis()  +  1;	  double    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	33	4	replace
319	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    /    this.startTime;    long  runningState  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	87	None	add
320	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    /    this.startTime;    int  runningState  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	87	None	add
321	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  Long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  Long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    /    this.startTime;    Long  runningState  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	87	None	add
322	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  int  runState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  possible  loss  of  precision  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  int  runState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    /    this.startTime;    int  runState  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	87	None	add
323	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	float  runningState  =  System.currentTimeMillis()  -  1;	  float    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	35	4	replace
324	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  1;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float  runningState  =  System.currentTimeMillis()  -  1;	  float    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	35	4	replace
325	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;	          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	103	None	replace
326	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    that.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	51	4	replace
327	[BUG]  [BUGGY]  runningState  =  STATE_STOPPED;  [FE]  RuntimeException  [FE]              IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    that.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	51	4	replace
328	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  long  runningState  =  System.currentTimeMillis()  -  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  long  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    1;    long  runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	20	None	add
329	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  int  runningState  =  System.currentTimeMillis()  -  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  int  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    1;    int  runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	20	None	add
330	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  Long  runningState  =  System.currentTimeMillis()  -  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  Long  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    1;    Long  runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	20	None	add
331	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  int  runState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  int  runState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    1;    int  runState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	20	None	add
332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.startTime  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  this.startTime  /  this.stopTime;	  return    this.stopTime    /    this.startTime;    int    startTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	82	4	replace
333	[BUG]  [BUGGY]  long  startTime  =  this.startTime  /  this.stopTime;  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.startTime  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.startTime  /  this.stopTime;	  return    this.stopTime    /    this.startTime;    int    startTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	82	4	replace
334	[BUG]  [BUGGY]  short  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  short  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	short  startTime  =  System.currentTimeMillis();	  return    System.currentTimeMillis()    -    this.startTime;    int    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
335	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  startTime  =  System.currentTimeMillis();	  return    System.currentTimeMillis()    -    this.startTime;    int    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  incompatible  types	46	None	replace
336	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();	          long    runningState    =    System.currentTimeMillis();    short    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	145	None	replace
337	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis();  short  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis();  short  runningState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis();  short  runningState  =  System.currentTimeMillis();	          long    runningState    =    System.currentTimeMillis();    short    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	145	None	replace
338	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  STATE_SUSPENDED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.runningState  -  STATE_SUSPENDED;	  return    this.runningState    -    this.startTime;    long    runningState    =    this.runningState    -    this.startTime;    	compilable	  [FE]  RuntimeException  	143	4	replace
339	[BUG]  [BUGGY]  long  runningState  =  this.runningState  -  STATE_SUSPENDED;  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.runningState  -  STATE_SUSPENDED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.runningState  -  STATE_SUSPENDED;	  return    this.runningState    -    this.startTime;    long    runningState    =    this.runningState    -    this.startTime;    	compilable	  [FE]  RuntimeException  	143	4	replace
340	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    runTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	148	4	replace
341	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    runTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	148	4	replace
342	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  /  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    runTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	148	4	replace
343	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.stopTime;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  /  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  /  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    runTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	148	4	replace
344	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis()    -    this.startTime;    double  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	104	None	add
345	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	104	None	add
346	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis()    -    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	104	None	add
347	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  Double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  Double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis()    -    this.startTime;    Double  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	104	None	add
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  double  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double    runningState    =    System.currentTimeMillis()    -    this.startTime;    double  runState  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	104	1	add
349	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  double  runState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  double  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double    runningState    =    System.currentTimeMillis()    -    this.startTime;    double  runState  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	104	1	add
350	[BUG]  [BUGGY]  long  this.runningState  =  getSecondState();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  getSecondState();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  getSecondState();	  int    this.runningState    =    getSecondState();    	non-compiled	[CE]  not  a  statement	16	None	replace
351	[BUG]  [BUGGY]  int  this.runningState  =  getSecondState()  -  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  getSecondState()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  getSecondState()  -  1;	  int    this.runningState    =    getSecondState();    	non-compiled	[CE]  not  a  statement	16	None	replace
352	[BUG]  [BUGGY]  int  this.runningState  =  getRawSecondState();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  getRawSecondState();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  getRawSecondState();	  int    this.runningState    =    getSecondState();    	non-compiled	[CE]  not  a  statement	16	None	replace
353	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	110	4	replace
354	[BUG]  [BUGGY]  long  startTime  =  this.runningState  -  this.runningState;  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	110	4	replace
355	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  this.runningState  -  this.stopTime;	  return    this.stopTime    -    this.runningState;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	110	4	replace
356	[BUG]  [BUGGY]  long  startTime  =  this.runningState  -  this.stopTime;  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.runningState  -  this.stopTime;	  return    this.stopTime    -    this.runningState;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	110	4	replace
357	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    startTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  RuntimeException  	111	4	replace
358	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    startTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  RuntimeException  	111	4	replace
359	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  System.currentTimeMillis()  /  this.runningState;	  return    this.stopTime    -    this.runningState;    long    startTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  RuntimeException  	111	4	replace
360	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.runningState;  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  System.currentTimeMillis()  /  this.runningState;	  return    this.stopTime    -    this.runningState;    long    startTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  RuntimeException  	111	4	replace
361	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    startTime    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
362	[BUG]  [BUGGY]  Long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  runTime  =  System.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  incompatible  types	144	None	replace
363	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis();	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  unreachable  statement	79	None	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  STATE_RUNNING;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  /  STATE_RUNNING;	  return    this.runningState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	27	4	replace
365	[BUG]  [BUGGY]  return  this.runningState  /  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  STATE_RUNNING;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  /  STATE_RUNNING;	  return    this.runningState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	27	4	replace
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  STATE_STOPPED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  /  STATE_STOPPED;	  return    this.runningState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	27	3	replace
367	[BUG]  [BUGGY]  return  this.runningState  /  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  STATE_STOPPED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  /  STATE_STOPPED;	  return    this.runningState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	27	3	replace
368	[BUG]  [BUGGY]  int  this.runningState  =  STATE_SPLIT;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  STATE_SPLIT;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_SPLIT;	  int    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  not  a  statement	97	None	replace
369	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.startTime;  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;	          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    Long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
370	[BUG]  [BUGGY]  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  runningState  =  System.currentTimeMillis()  -  this.startTime;	          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    Long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  incompatible  types	101	None	replace
371	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.stopTime  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  this.stopTime  /  this.startTime;	  return    this.stopTime    /    this.startTime;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	80	4	replace
372	[BUG]  [BUGGY]  long  startTime  =  this.stopTime  /  this.startTime;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.stopTime  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.stopTime  /  this.startTime;	  return    this.stopTime    /    this.startTime;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	80	4	replace
373	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    long  startTime  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  unreachable  statement	36	None	add
374	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  /  this.startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    int  startTime  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	36	None	add
375	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	36	None	add
376	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  return  System.currentTimeMillis()  /  this.startTime;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  return  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    return  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  unreachable  statement	36	None	add
377	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	36	None	add
378	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis()    -    this.startTime;    float  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	139	None	add
379	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis()    -    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	139	None	add
380	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	139	None	add
381	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]          RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float    runningState    =    System.currentTimeMillis()    -    this.startTime;    double  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	139	None	add
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  *  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  *  this.runningState;	  return    this.stopTime    *    this.runningState;    	compilable	  [FE]  AssertionFailedError  	127	4	replace
383	[BUG]  [BUGGY]  return  this.startTime  *  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  *  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  *  this.runningState;	  return    this.stopTime    *    this.runningState;    	compilable	  [FE]  AssertionFailedError  	127	4	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  *  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  *  this.stopTime;	  return    this.stopTime    *    this.runningState;    	compilable	  [FE]  AssertionFailedError  	127	4	replace
385	[BUG]  [BUGGY]  return  this.runningState  *  this.stopTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  *  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  *  this.stopTime;	  return    this.stopTime    *    this.runningState;    	compilable	  [FE]  AssertionFailedError  	127	4	replace
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  /  this.splitState;	  return    this.stopTime    /    this.splitState;    	compilable	  [FE]  AssertionFailedError  	120	3	replace
387	[BUG]  [BUGGY]  return  this.runningState  /  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  /  this.splitState;	  return    this.stopTime    /    this.splitState;    	compilable	  [FE]  AssertionFailedError  	120	3	replace
388	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis();        long    runState    =    System.currentTimeMillis();    long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	69	None	add
389	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis();        long    runState    =    System.currentTimeMillis();    int  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	69	None	add
390	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  Long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  Long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis();        long    runState    =    System.currentTimeMillis();    Long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	69	None	add
391	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [CE]  variable  runState  is  already  defined  in  method  getTime()  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis();        long    runState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runState  is  already  defined  in  method  getTime()	69	None	add
392	[BUG]  [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  int  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [CE]  variable  runState  is  already  defined  in  method  getTime()  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();  int  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runningState        =        System.currentTimeMillis();        long    runState    =    System.currentTimeMillis();    int  runState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runState  is  already  defined  in  method  getTime()	69	None	add
393	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  System.currentTimeMillis()  /  this.startTime;	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
394	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  /  this.startTime;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  System.currentTimeMillis()  /  this.startTime;	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
395	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  System.currentTimeMillis()  -  this.runningState;	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
396	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  System.currentTimeMillis()  -  this.runningState;	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
397	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  this.runningState  -  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  this.runningState  -  System.currentTimeMillis();	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
398	[BUG]  [BUGGY]  double  runningState  =  this.runningState  -  System.currentTimeMillis();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  this.runningState  -  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  this.runningState  -  System.currentTimeMillis();	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	int  runningState  =  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	113	4	replace
400	[BUG]  [BUGGY]  int  runningState  =  this.runningState  -  this.runningState;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.runningState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  this.runningState  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	113	4	replace
401	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  startTime  =  System.currentTimeMillis()  *  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  startTime  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    long  startTime  =  System.currentTimeMillis()  *  this.startTime;	  	non-compiled	[CE]  unreachable  statement	40	None	add
402	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
403	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
404	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	40	None	add
405	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	40	None	add
406	[BUG]  [BUGGY]  long  startTime  =  this.runningState.getStartTime()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState.getStartTime()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.runningState.getStartTime()  -  1;	  long    startTime    =    this.runningState.getStartTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
407	[BUG]  [BUGGY]  long  startTime  =  this.runningState.getStartTime()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.runningState.getStartTime()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.runningState.getStartTime()  +  1;	  long    startTime    =    this.runningState.getStartTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
408	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.startTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  this.startTime  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    runningState    =    this.stopTime    -    this.startTime;    	compilable	  [FE]  RuntimeException  	152	4	replace
409	[BUG]  [BUGGY]  long  runningState  =  this.startTime  -  this.startTime;  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.startTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.startTime  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    runningState    =    this.stopTime    -    this.startTime;    	compilable	  [FE]  RuntimeException  	152	4	replace
410	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	126	None	add
411	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	126	None	add
412	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  long  runTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  long  runTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    long  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	126	None	add
413	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	126	None	add
414	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  int  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    int  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	126	None	add
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  -  this.runningState;	  return    this.runningState    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
416	[BUG]  [BUGGY]  return  this.splitState  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  -  this.runningState;	  return    this.runningState    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  STATE_RUNNING;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  STATE_RUNNING;	  return    this.runningState    -    this.startTime;    return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	64	4	replace
418	[BUG]  [BUGGY]  return  this.runningState  -  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  STATE_RUNNING;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  STATE_RUNNING;	  return    this.runningState    -    this.startTime;    return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	64	4	replace
419	[BUG]  [BUGGY]  return  this.runningState.currentTimeMillis()  -  this.runningState;  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState.currentTimeMillis()  -  this.runningState;	  return    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  int  cannot  be  dereferenced	39	None	replace
420	[BUG]  [BUGGY]  int  this.runningState  =  this.runningState  /  System.currentTimeMillis();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  this.runningState  /  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  this.runningState  /  System.currentTimeMillis();	  int    this.runningState    =    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  not  a  statement	7	None	replace
421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState  -  this.runningState;  long  runTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	int  startTime  =  this.runningState  -  this.runningState;  long  runTime  =  System.currentTimeMillis();	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	109	4	replace
422	[BUG]  [BUGGY]  int  startTime  =  this.runningState  -  this.runningState;  long  runTime  =  System.currentTimeMillis();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState  -  this.runningState;  long  runTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState  -  this.runningState;  long  runTime  =  System.currentTimeMillis();	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	109	4	replace
423	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis();	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis();    	non-compiled	[CE]  unreachable  statement	109	None	replace
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  +  this.runningState;	  return    this.stopTime    +    this.runningState;    	compilable	  [FE]  AssertionFailedError  	157	4	replace
425	[BUG]  [BUGGY]  return  this.startTime  +  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  +  this.runningState;	  return    this.stopTime    +    this.runningState;    	compilable	  [FE]  AssertionFailedError  	157	4	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  +  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  +  this.stopTime;	  return    this.stopTime    +    this.runningState;    	compilable	  [FE]  AssertionFailedError  	157	4	replace
427	[BUG]  [BUGGY]  return  this.runningState  +  this.stopTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  +  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  +  this.stopTime;	  return    this.stopTime    +    this.runningState;    	compilable	  [FE]  AssertionFailedError  	157	4	replace
428	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	26	None	add
429	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  long  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	26	None	add
430	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	26	None	add
431	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	26	None	add
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  STATE_UNSTARTED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  STATE_UNSTARTED;	  return    this.runningState    -    this.startTime;    return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	64	4	replace
433	[BUG]  [BUGGY]  return  this.runningState  -  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  STATE_UNSTARTED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  STATE_UNSTARTED;	  return    this.runningState    -    this.startTime;    return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	64	4	replace
434	[BUG]  [BUGGY]  long  runningState  =  this.currentTimeMillis()  -  this.startTime;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  this.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  this.currentTimeMillis()  -  this.startTime;	  return    this.runningState    -    this.startTime;    int    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
435	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  this.stopTime  -  this.startTime;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  this.stopTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.stopTime;  long  runningState  =  this.stopTime  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    runningState    =    this.stopTime    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	152	None	replace
436	[BUG]  [BUGGY]  int  runningState  =  this.stopTime  /  this.startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.stopTime  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  this.stopTime  /  this.startTime;	  return    this.stopTime    /    this.startTime;    long    runningState    =    this.stopTime    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	152	None	replace
437	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
438	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  double    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	105	4	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  -  this.splitState;	  return    this.startTime    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	138	4	replace
440	[BUG]  [BUGGY]  return  this.stopTime  -  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.splitState;	  return    this.startTime    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	138	4	replace
441	[BUG]  [BUGGY]  int  this.runningState  =  STATE_STOPPED  &&  this.runningState  ==  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  STATE_STOPPED  &&  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_STOPPED  &&  this.runningState  ==  STATE_SUSPENDED;	  int    this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  not  a  statement	146	None	replace
442	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  runState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  runState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.runningState;  long  runState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.runningState    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	65	None	replace
443	[BUG]  [BUGGY]  return  this.runningState  -  1;  long  runState  =  System.currentTimeMillis()  -  1;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  1;  long  runState  =  System.currentTimeMillis()  -  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  1;  long  runState  =  System.currentTimeMillis()  -  1;	  return    this.runningState    -    this.startTime;    long    runState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	65	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1L;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  -  this.startTime  +  1L;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	1	replace
445	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1L;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.startTime  +  1L;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	1	replace
446	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  2;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  -  this.startTime  +  2;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	1	replace
447	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  2;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.startTime  +  2;	  return    System.currentTimeMillis()    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	122	1	replace
448	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	52	None	add
449	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
450	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  short  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  short  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.startTime;  short  runningState  =  System.currentTimeMillis()  -  this.startTime;	          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
451	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	47	2	add
452	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	47	2	add
453	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis()  -  this.startTime;  }  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis()  -  this.startTime;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis()  -  this.startTime;  }	  	non-compiled	[CE]  not  a  statement	47	None	add
454	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  return  System.currentTimeMillis()  -  this.startTime;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  return  System.currentTimeMillis()  -  this.startTime;  }	  	compilable	  [FE]  IllegalStateException  	47	2	add
455	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  return  System.currentTimeMillis()  -  this.startTime;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  return  System.currentTimeMillis()  -  this.startTime;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  else  {  return  System.currentTimeMillis()  -  this.startTime;  }	  	compilable	  [FE]  IllegalStateException  	47	2	add
456	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  unreachable  statement	83	None	replace
457	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.stopTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  unreachable  statement	83	None	replace
458	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  unreachable  statement	83	None	replace
459	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	77	None	add
460	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  int  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  int  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    int  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	77	None	add
461	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	77	None	add
462	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  long  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  long  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    long  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  unreachable  statement	121	None	add
463	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    int  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
464	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
465	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	121	None	add
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  *  this.splitState;	  return    this.stopTime    /    this.splitState;    	compilable	  [FE]  AssertionFailedError  	120	4	replace
467	[BUG]  [BUGGY]  return  this.stopTime  *  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  *  this.splitState;	  return    this.stopTime    /    this.splitState;    	compilable	  [FE]  AssertionFailedError  	120	4	replace
468	[BUG]  [BUGGY]  long  startTime  =  this.currentTimeMillis()  -  this.startTime;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.currentTimeMillis()  -  this.startTime;	  return    this.stopTime    /    this.startTime;    int    startTime    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
469	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	28	None	add
470	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
471	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  long  runState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runningState    =    System.currentTimeMillis()    +    1;    long  runState  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
473	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  long  runState  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  long  runState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    +    1;    long  runState  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
474	[BUG]  [BUGGY]  long  this.runningState  =  STATE_STOPPED  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  STATE_STOPPED  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  STATE_STOPPED  +  1;	  long    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	95	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  +  this.runningState;	  return    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	39	4	replace
476	[BUG]  [BUGGY]  return  System.currentTimeMillis()  +  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  +  this.runningState;	  return    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	39	4	replace
477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  startTime  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	110	4	replace
478	[BUG]  [BUGGY]  long  startTime  =  this.stopTime  -  this.runningState;  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	110	4	replace
479	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  this.splitState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  not  a  statement	91	None	add
480	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  thisSplitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  thisSplitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  thisSplitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	91	None	add
481	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	91	None	add
482	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  thisSplitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  thisSplitState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  thisSplitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	91	None	add
483	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  int  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  int  startTime  =  this.runningState.getStartTime();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  int  startTime  =  this.runningState.getStartTime();	  return    this.startTime    -    this.stopTime;    int    startTime    =    this.runningState.getStartTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	replace
484	[BUG]  [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  int  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [CE]  variable  runningTime  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();  int  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                long        runTime        =        System.currentTimeMillis();        long    runningTime    =    System.currentTimeMillis();    int  runningTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningTime  is  already  defined  in  method  getTime()	12	None	add
485	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  -  1L;	  long    runTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  RuntimeException  	2	4	replace
486	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1L;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  -  1L;	  long    runTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  RuntimeException  	2	4	replace
487	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  unreachable  statement	57	None	replace
488	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    this.startTime    -    this.stopTime;    long    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  unreachable  statement	57	None	replace
489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	float  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	155	4	replace
490	[BUG]  [BUGGY]  float  runningState  =  this.stopTime  -  this.runningState;  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	155	4	replace
491	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	30	None	add
492	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	30	None	add
493	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  this.splitState  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  this.splitState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    int  splitState  =  this.splitState  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	30	None	add
494	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  int  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    int  splitState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	30	None	add
495	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  -  1L;	  long    runningState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  RuntimeException  	21	4	replace
496	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1L;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  -  1L;	  long    runningState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  RuntimeException  	21	4	replace
497	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  possible  loss  of  precision  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  /  this.startTime;	  long    runningState    =    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	88	None	replace
498	[BUG]  [BUGGY]  long  startTime  =  this.currentTimeMillis()  -  this.stopTime;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
499	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  STATE_STOPPED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  /  STATE_STOPPED;	  return    this.splitState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	31	3	replace
500	[BUG]  [BUGGY]  return  this.splitState  /  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  STATE_STOPPED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  /  STATE_STOPPED;	  return    this.splitState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	31	3	replace
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  long  runState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runningState    =    System.currentTimeMillis()    /    this.startTime;    long  runState  =  System.currentTimeMillis()  /  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	87	1	add
502	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  long  runState  =  System.currentTimeMillis()  /  this.startTime;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  long  runState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    /    this.startTime;    long  runState  =  System.currentTimeMillis()  /  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	87	1	add
503	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	36	None	add
504	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  int  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    int  runningState  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	36	None	add
505	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	119	None	add
506	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	119	None	add
507	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	119	None	add
508	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  this.stopTime  -  this.splitState;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  long  splitState  =  this.stopTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    long  splitState  =  this.stopTime  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	119	None	add
509	[BUG]  [BUGGY]  int  this.runningState  =  0L;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  0L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  0L;	  int    this.runningState    =    0;    	non-compiled	[CE]  not  a  statement	130	None	replace
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  -  this.stopTime;	  return    this.runningState    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	55	4	replace
511	[BUG]  [BUGGY]  return  this.splitState  -  this.stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  -  this.stopTime;	  return    this.runningState    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	55	4	replace
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  runningTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runTime    =    System.currentTimeMillis()    -    this.startTime;    long  runningTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	135	1	add
513	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  runningTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  long  runningTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runTime    =    System.currentTimeMillis()    -    this.startTime;    long  runningTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	135	1	add
514	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    long  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  unreachable  statement	93	None	add
515	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	93	None	add
516	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	93	None	add
517	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  int  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    int  runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	93	None	add
518	[BUG]  [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  Integer  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  Integer  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  System.currentTimeMillis()  -  this.startTime;  Integer  runningState  =  System.currentTimeMillis()  -  this.startTime;	          long    runningState    =    System.currentTimeMillis()    -    this.startTime;    Long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
519	[BUG]  [BUGGY]  int  startTime  =  this.runningState  -  this.stopTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState  -  this.stopTime;	  return    this.stopTime    -    this.runningState;    long    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
520	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	126	None	add
521	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	126	None	add
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  STATE_STOPPED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  /  STATE_STOPPED;	  return    this.stopTime    /    this.runningState;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
523	[BUG]  [BUGGY]  return  this.stopTime  /  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  STATE_STOPPED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  /  STATE_STOPPED;	  return    this.stopTime    /    this.runningState;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
524	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  *  this.startTime;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  *  this.startTime;	  int    this.runningState    =    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  not  a  statement	7	None	replace
525	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  this.splitState;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  this.splitState;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  this.splitState;	  int    this.runningState    =    System.currentTimeMillis()    /    this.startTime;    	non-compiled	[CE]  not  a  statement	7	None	replace
526	[BUG]  [BUGGY]  int  this.runningState  =  getSecondState()  +  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  getSecondState()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  getSecondState()  +  1;	  int    this.runningState    =    getSecondState();    	non-compiled	[CE]  not  a  statement	16	None	replace
527	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  1L;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  1L;	  int    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  not  a  statement	85	None	replace
528	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  /  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    startTime    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	81	None	replace
529	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  runningState  =  this.stopTime  -  this.runningState;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.runningState;  long  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	non-compiled	[CE]  unreachable  statement	153	None	replace
530	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.startTime    -    this.stopTime;    long    runTime    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  unreachable  statement	148	None	replace
531	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	48	4	replace
532	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	48	4	replace
533	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	48	4	replace
534	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  RuntimeException  [FE]      IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	48	4	replace
535	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.arraycopy(this.startTime,  0,  this.runningState,  this.runningState);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.arraycopy(this.startTime,  0,  this.runningState,  this.runningState);  }  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.arraycopy(this.startTime,  0,  this.runningState,  this.runningState);  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	replace
536	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  unreachable  statement	154	None	replace
537	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.runningState;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    this.runningState    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  not  a  statement	107	None	replace
538	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    this.runningState    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  not  a  statement	107	None	replace
539	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.runningState;    System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  not  a  statement	38	None	add
540	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    long  startTime  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	137	None	add
541	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	137	None	add
542	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED;	  this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	141	None	replace
543	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	54	None	add
544	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	54	None	add
545	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	54	None	add
546	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  long  runTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  long  runTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    long  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	54	None	add
547	[BUG]  [BUGGY]  int  startTime  =  this.runningState.getStartTime()  -  1L;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState.getStartTime()  -  1L;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.getStartTime()  -  1L;	  int    startTime    =    this.runningState.getStartTime()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
548	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	24	None	add
549	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	24	None	add
550	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	24	None	add
551	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  runTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  runTime  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    long  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	24	None	add
552	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	24	None	add
553	[BUG]  [BUGGY]  that.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  that  [FE]              IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  that.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	that.runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    that.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  that	51	None	replace
554	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  +  this.startTime;	  return    this.stopTime    +    this.runningState;    	compilable	  [FE]  AssertionFailedError  	157	4	replace
555	[BUG]  [BUGGY]  return  this.stopTime  +  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  +  this.startTime;	  return    this.stopTime    +    this.runningState;    	compilable	  [FE]  AssertionFailedError  	157	4	replace
556	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	117	None	add
557	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  return    this.startTime    -    this.stopTime;    long    runningState    =    System.currentTimeMillis()    -    this.stopTime;    	non-compiled	[CE]  unreachable  statement	150	None	replace
558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  long  runState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long    runningState    =    System.currentTimeMillis()    -    1;    long  runState  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
559	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  long  runState  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  long  runState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    1;    long  runState  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
560	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  =  STATE_SUSPENDED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_STOPPED  ||  this.runningState  =  STATE_SUSPENDED;	          this.runningState    =    STATE_STOPPED;    that.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	51	None	replace
561	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.stopTime;    long  runTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	77	None	add
562	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  short  runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  short  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    /    this.startTime;    short  runningState  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	87	None	add
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  STATE_SUSPENDED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  /  STATE_SUSPENDED;	  return    this.runningState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	27	4	replace
564	[BUG]  [BUGGY]  return  this.runningState  /  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  STATE_SUSPENDED;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  /  STATE_SUSPENDED;	  return    this.runningState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	27	4	replace
565	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	float  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  float    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	140	4	replace
566	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  float    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	140	4	replace
567	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  short  runningState  =  System.currentTimeMillis()  -  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  short  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    -    1;    short  runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	20	None	add
568	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	117	None	add
569	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.startTime;    long  runTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	117	None	add
570	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime    +    1;    System.currentTimeMillis()  -  this.startTime  +  1;	  	non-compiled	[CE]  not  a  statement	121	None	add
571	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  short  runningState  =  System.currentTimeMillis()  +  1;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  short  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long    runningState    =    System.currentTimeMillis()    +    1;    short  runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	22	None	add
572	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  possible  loss  of  precision	154	None	replace
573	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
574	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	47	2	add
575	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	47	None	add
576	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STAPPED;  [CE]  cannot  find  symbol  STATE_STAPPED  [FE]        IllegalStateException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STAPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STAPPED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_STAPPED	47	None	add
577	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    startTime    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  incompatible  types	111	None	replace
578	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SPLIT;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState  =  STATE_SPLIT;	  this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  RuntimeException  	74	4	replace
579	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_SPLIT;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_SPLIT;	  this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  RuntimeException  	74	4	replace
580	[BUG]  [BUGGY]  int  this.runningState  =  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_SUSPENDED  ||  this.runningState  ==  STATE_STOPPED;	  int    this.runningState    =    STATE_STOPPED    ||    this.runningState    ==    STATE_SUSPENDED;    	non-compiled	[CE]  not  a  statement	146	None	replace
581	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  this.startTime  +  1;	  long    this.runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  not  a  statement	6	None	replace
582	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  return  this.runningState  -  this.stopTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.stopTime;  return  this.runningState  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.stopTime;    return  this.runningState  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	54	None	add
583	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  int  splitState  =  this.stopTime  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  int  splitState  =  this.stopTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    int  splitState  =  this.stopTime  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	119	None	add
584	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  return  this.stopTime  /  this.splitState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.splitState;  return  this.stopTime  /  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.splitState;    return  this.stopTime  /  this.splitState;	  	non-compiled	[CE]  unreachable  statement	119	None	add
585	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState  =  STATE_UNSPLIT;	  this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  RuntimeException  	76	4	replace
586	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_UNSPLIT;	  this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  RuntimeException  	76	4	replace
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  STATE_UNSPLIT;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  STATE_UNSPLIT;	  return    this.runningState    -    this.startTime;    return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	64	4	replace
588	[BUG]  [BUGGY]  return  this.runningState  -  STATE_UNSPLIT;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  STATE_UNSPLIT;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  STATE_UNSPLIT;	  return    this.runningState    -    this.startTime;    return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	64	4	replace
589	[BUG]  [BUGGY]  return  this.stopTime  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  return    this.stopTime    /    this.startTime;    long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  unreachable  statement	151	None	replace
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  *  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.startTime  *  1;	  return    this.runningState    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
591	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  *  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.startTime  *  1;	  return    this.runningState    -    this.startTime    +    1;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
592	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  =  STATE_STOPPED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            IllegalStateException      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  =  STATE_STOPPED;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_STOPPED  ||  this.runningState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    it.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	50	None	replace
593	[BUG]  [BUGGY]  long  startTime  =  this.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  startTime  =  this.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.currentTimeMillis();	  return    this.startTime    -    this.stopTime;    int    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
594	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningTime  =  System.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	144	4	replace
595	[BUG]  [BUGGY]  long  runningTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningTime  =  System.currentTimeMillis()  -  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    long    runTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	144	4	replace
596	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  return  this.runningState  /  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  return  this.runningState  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    return  this.runningState  /  this.startTime;	  	non-compiled	[CE]  unreachable  statement	26	None	add
597	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  long  runningState  =  this.runningState  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  /  this.startTime;  long  runningState  =  this.runningState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    /    this.startTime;    long  runningState  =  this.runningState  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	26	None	add
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  STATE_SPLIT;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  /  STATE_SPLIT;	  return    this.splitState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	31	3	replace
599	[BUG]  [BUGGY]  return  this.splitState  /  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  STATE_SPLIT;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  /  STATE_SPLIT;	  return    this.splitState    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	31	3	replace
600	[BUG]  [BUGGY]  int  startTime  =  this.runningState.currentTimeMillis()  -  2;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  startTime  =  this.runningState.currentTimeMillis()  -  2;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.currentTimeMillis()  -  2;	  int    startTime    =    this.runningState.currentTimeMillis();    	non-compiled	[CE]  int  cannot  be  dereferenced	158	None	replace
601	[BUG]  [BUGGY]  Long  runningState  =  this.stopTime  -  this.runningState;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runningState    =    this.stopTime    -    this.runningState;    	non-compiled	[CE]  incompatible  types	153	None	replace
602	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	28	None	add
603	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  /  this.stopTime;  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    /    this.stopTime;    long  runTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	28	None	add
604	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningTime  =  System.currentTimeMillis();	          long    runTime    =    System.currentTimeMillis();    long    runningTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	13	4	replace
605	[BUG]  [BUGGY]  long  runningTime  =  System.currentTimeMillis();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningTime  =  System.currentTimeMillis();	          long    runTime    =    System.currentTimeMillis();    long    runningTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	13	4	replace
606	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  this.startTime  -  this.splitState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  this.startTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    long  splitState  =  this.startTime  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	137	None	add
607	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  return  this.startTime  -  this.splitState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  return  this.startTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    return  this.startTime  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	137	None	add
608	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	137	None	add
609	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  this.splitState.getTime();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.splitState;  long  splitState  =  this.splitState.getTime();  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.splitState;    long  splitState  =  this.splitState.getTime();	  	non-compiled	[CE]  int  cannot  be  dereferenced	137	None	add
610	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  return  this.stopTime  /  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  return  this.stopTime  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    return  this.stopTime  /  this.runningState;	  	non-compiled	[CE]  unreachable  statement	24	None	add
611	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  long  runningState  =  this.stopTime  /  this.runningState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  long  runningState  =  this.stopTime  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    long  runningState  =  this.stopTime  /  this.runningState;	  	non-compiled	[CE]  unreachable  statement	24	None	add
612	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  int  runningState  =  this.stopTime  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  int  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    int  runningState  =  this.stopTime  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	24	None	add
613	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  this.stopTime  /  this.runningState;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  /  this.runningState;  this.stopTime  /  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.runningState;    this.stopTime  /  this.runningState;	  	non-compiled	[CE]  not  a  statement	24	None	add
614	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.endTime;  [CE]  cannot  find  symbol  endTime  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  -  this.endTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.endTime;	  return    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  cannot  find  symbol  endTime	39	None	replace
615	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  this.splitState  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  long  splitState  =  this.splitState  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    long  splitState  =  this.splitState  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	30	None	add
616	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  return  this.splitState  /  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.splitState  /  this.startTime;  return  this.splitState  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.splitState    /    this.startTime;    return  this.splitState  /  this.startTime;	  	non-compiled	[CE]  unreachable  statement	30	None	add
617	[BUG]  [BUGGY]  Long  runTime  =  System.currentTimeMillis();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  Long  runTime  =  System.currentTimeMillis();  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	Long  runTime  =  System.currentTimeMillis();	  int    runTime    =    System.currentTimeMillis();    	non-compiled	[CE]  incompatible  types	5	None	replace
618	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  return  this.stopTime  +  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  return  this.stopTime  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    return  this.stopTime  +  this.runningState;	  	non-compiled	[CE]  unreachable  statement	156	None	add
619	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  this.stopTime  +  this.runningState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  long  runningState  =  this.stopTime  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    long  runningState  =  this.stopTime  +  this.runningState;	  	non-compiled	[CE]  unreachable  statement	156	None	add
620	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  int  runningState  =  this.stopTime  +  this.runningState;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  +  this.runningState;  int  runningState  =  this.stopTime  +  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    +    this.runningState;    int  runningState  =  this.stopTime  +  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
621	[BUG]  [BUGGY]  int  this.runningState  =  STATE_UNSPLIT;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_UNSPLIT;	  int    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  not  a  statement	96	None	replace
622	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	155	4	replace
623	[BUG]  [BUGGY]  double  runningState  =  this.stopTime  -  this.runningState;  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  double  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    int    runningState    =    this.stopTime    -    this.runningState;    	compilable	  [FE]  RuntimeException  	155	4	replace
624	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runningState  =  this.runningState  -  this.startTime  +  1;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.startTime  +  1;  long  runningState  =  this.runningState  -  this.startTime  +  1;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime    +    1;    long  runningState  =  this.runningState  -  this.startTime  +  1;	  	non-compiled	[CE]  unreachable  statement	93	None	add
625	[BUG]  [BUGGY]  int  runningState  =  this.stopTime  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runningState  =  this.stopTime  -  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runningState  =  this.stopTime  -  this.startTime;	  return    this.stopTime    -    this.runningState;    long    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
626	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  return  this.runningState  -  this.splitState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  return  this.runningState  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    return  this.runningState  -  this.splitState;	  	non-compiled	[CE]  unreachable  statement	91	None	add
627	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  this.splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  not  a  statement	91	None	add
628	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  this.startTime  -  this.splitState;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.runningState  -  this.splitState;  int  this.splitState  =  this.startTime  -  this.splitState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.splitState;    int  this.splitState  =  this.startTime  -  this.splitState;	  	non-compiled	[CE]  not  a  statement	91	None	add
629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    runTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	148	4	replace
630	[BUG]  [BUGGY]  long  runningTime  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  long  runningTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningTime  =  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    long    runTime    =    System.currentTimeMillis()    -    this.stopTime;    	compilable	  [FE]  RuntimeException  	148	4	replace
631	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  return  this.startTime  -  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  return  this.startTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    return  this.startTime  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	52	None	add
632	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.startTime  -  this.runningState;  int  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.runningState;    int  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
633	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  this.stopTime  *  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  long  runningState  =  this.stopTime  *  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    long  runningState  =  this.stopTime  *  this.runningState;	  	non-compiled	[CE]  unreachable  statement	126	None	add
634	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  return  this.stopTime  *  this.runningState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  return  this.stopTime  *  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    return  this.stopTime  *  this.runningState;	  	non-compiled	[CE]  unreachable  statement	126	None	add
635	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  int  runningState  =  this.stopTime  *  this.runningState;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  this.stopTime  *  this.runningState;  int  runningState  =  this.stopTime  *  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    *    this.runningState;    int  runningState  =  this.stopTime  *  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	126	None	add
636	[BUG]  [BUGGY]  int  runTime  =  this.stopTime  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  int  runTime  =  this.stopTime  -  this.runningState;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  this.stopTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    long    runTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
637	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  runningState  =  System.currentTimeMillis()  *  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  long  runningState  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    long  runningState  =  System.currentTimeMillis()  *  this.startTime;	  	non-compiled	[CE]  unreachable  statement	40	None	add
638	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  return  System.currentTimeMillis()  *  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  return  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    return  System.currentTimeMillis()  *  this.startTime;	  	non-compiled	[CE]  unreachable  statement	40	None	add
639	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  int  runningState  =  System.currentTimeMillis()  *  this.startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  int  runningState  =  System.currentTimeMillis()  *  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    *    this.startTime;    int  runningState  =  System.currentTimeMillis()  *  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
640	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {      [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(     "Illegal  running  state  has  occured.       ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    /    this.startTime;    long  runningState  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  unreachable  statement	36	None	add
