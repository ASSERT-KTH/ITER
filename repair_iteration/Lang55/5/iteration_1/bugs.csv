bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    int  this.runningState  =  System.currentTimeMillis();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    int  this.runningState  =  System.currentTimeMillis();		non-compiled	[CE]  not  a  statement	10	None	add
2	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    this.runningState  =  STATE_STOPPED;  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	    this.runningState  =  STATE_STOPPED;		compilable	  [FE]  IllegalStateException  	10	2	add
3	[BUG]  [BUGGY]    this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]      AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    this.runningState  =  STATE_STOPPED;  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    this.runningState  =  STATE_STOPPED;		compilable	  [FE]  IllegalStateException  	10	2	add
4	[BUG]  [BUGGY]    int  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    int  this.runningState  =  STATE_STOPPED;  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    int  this.runningState  =  STATE_STOPPED;		non-compiled	[CE]  not  a  statement	10	None	add
5	[BUG]  [BUGGY]    int  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    int  startTime  =  this.runningState.getStartTime();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    int  startTime  =  this.runningState.getStartTime();		non-compiled	[CE]  int  cannot  be  dereferenced	10	None	add
6	[BUG]  [BUGGY]    int  this.runningState  =  getSplitState();  [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    int  this.runningState  =  getSplitState();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    int  this.runningState  =  getSplitState();		non-compiled	[CE]  not  a  statement	10	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.runningState  -  this.startTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.startTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	4	replace
8	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.runningState  -  this.startTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.startTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	4	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.stopTime  -  this.runningState;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  -  this.runningState;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	4	replace
10	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.stopTime  -  this.runningState;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  -  this.runningState;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	4	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.startTime  -  this.stopTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  -  this.stopTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	4	replace
12	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.startTime  -  this.stopTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.stopTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	4	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  -  this.startTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	1	replace
14	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.startTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    long  runningState  =  System.currentTimeMillis();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	    long  runningState  =  System.currentTimeMillis();		compilable	  [FE]  AssertionFailedError  	10	1	add
16	[BUG]  [BUGGY]    long  runningState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    long  runningState  =  System.currentTimeMillis();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    long  runningState  =  System.currentTimeMillis();		compilable	  [FE]  AssertionFailedError  	10	1	add
17	[BUG]  [BUGGY]    int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    int  runningState  =  System.currentTimeMillis();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    int  runningState  =  System.currentTimeMillis();		non-compiled	[CE]  possible  loss  of  precision	10	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    long  runTime  =  System.currentTimeMillis();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	    long  runTime  =  System.currentTimeMillis();		compilable	  [FE]  AssertionFailedError  	10	1	add
19	[BUG]  [BUGGY]    long  runTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    long  runTime  =  System.currentTimeMillis();  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    long  runTime  =  System.currentTimeMillis();		compilable	  [FE]  AssertionFailedError  	10	1	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	    long  runningState  =  System.currentTimeMillis()  -  this.startTime;		compilable	  [FE]  AssertionFailedError  	10	1	add
21	[BUG]  [BUGGY]    long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    long  runningState  =  System.currentTimeMillis()  -  this.startTime;		compilable	  [FE]  AssertionFailedError  	10	1	add
22	[BUG]  [BUGGY]    int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    int  runningState  =  System.currentTimeMillis()  -  this.startTime;		non-compiled	[CE]  possible  loss  of  precision	10	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.stopTime  /  this.startTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  /  this.startTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	3	replace
24	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]  return  this.stopTime  /  this.startTime;  [BUGGY]  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  /  this.startTime;	return  this.stopTime  -  this.startTime;  	compilable	  [FE]  AssertionFailedError  	9	3	replace
25	[BUG]  [BUGGY]    int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]  return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException( "Illegal  running  state  has  occured.   ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	    int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;		non-compiled	[CE]  not  a  statement	10	None	add
