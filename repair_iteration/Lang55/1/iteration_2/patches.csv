bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	155	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	2	replace
3	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	2	replace
4	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	155	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	2	replace
6	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	2	replace
7	[BUG]  [BUGGY]  atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.n ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.n ");	  atternier(this.runningState).throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  <identifier>  expected	162	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	95	2	replace
9	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	95	2	replace
10	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	95	2	replace
12	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	95	2	replace
13	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
14	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
15	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
16	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
17	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
18	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspension.   ");  }  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
19	[BUG]  [BUGGY]  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis()    -    startTime;    }    	non-compiled	[CE]  not  a  statement	84	None	replace
20	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis()    -    startTime;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
21	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING  -  startTime;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_RUNNING  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis()    -    startTime;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
23	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
25	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	45	2	replace
27	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	45	2	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	116	2	replace
29	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	116	2	replace
30	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	116	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	116	2	replace
32	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	116	2	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
34	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	2	replace
36	[BUG]  [BUGGY]  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	2	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
38	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
40	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
41	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	96	None	add
42	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	96	None	add
43	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  Stopwatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  Stopwatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    Stopwatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
44	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  Stopwatch.this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  Stopwatch.this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    Stopwatch.this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
45	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	133	None	add
46	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	133	None	add
47	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	133	None	add
48	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	133	None	add
49	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	133	None	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
51	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
52	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
53	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
54	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
55	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
57	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  startTime  =  System.currentTimeMillis()  -  1;	  double    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	59	2	replace
59	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  startTime  =  System.currentTimeMillis()  -  1;	  double    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	59	2	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	165	2	replace
61	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	165	2	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
63	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  *  1000L;	  stopTime    =    System.currentTimeMillis()    *    1000;    	compilable	  [FE]  AssertionFailedError  	120	2	replace
65	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  *  1000L;	  stopTime    =    System.currentTimeMillis()    *    1000;    	compilable	  [FE]  AssertionFailedError  	120	2	replace
66	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	159	None	replace
67	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	159	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	159	2	replace
69	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	159	2	replace
70	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
71	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
72	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
73	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
74	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	135	None	replace
75	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Long  startTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	135	None	replace
76	[BUG]  [BUGGY]  short  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  short  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	short  startTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	135	None	replace
77	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	83	None	replace
78	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  this.stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	83	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
80	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
82	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	44	1	add
84	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	44	1	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
86	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
88	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	139	2	replace
90	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	139	2	replace
91	[BUG]  [BUGGY]  short  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  short  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	short  stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    stopTime    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	139	None	replace
92	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    stopTime    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	139	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
94	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
95	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	146	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
97	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	2	add
99	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	2	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
101	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_STOPPED)  {  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	29	2	replace
103	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_STOPPED)  {  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	29	2	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
105	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
106	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Long  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  incompatible  types	36	None	replace
107	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	137	None	add
108	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	137	None	add
109	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	137	None	add
110	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  int  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  int  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    int  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	137	None	add
111	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	137	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  this.runningState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
113	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  this.runningState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  *  startTime;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	2	replace
115	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  *  startTime;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	2	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  this.splitState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	2	replace
117	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.splitState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  this.splitState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	2	replace
118	[BUG]  [BUGGY]  This.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  This  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  This.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	This.runningState  =  STATE_STOPPED;	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  cannot  find  symbol  This	6	None	replace
119	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	164	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	164	2	replace
121	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	164	2	replace
122	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
123	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
124	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
125	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
126	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  float  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	float  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	24	2	replace
128	[BUG]  [BUGGY]  float  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  float  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	float  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	24	2	replace
129	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	109	2	replace
130	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	109	2	replace
131	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	109	2	replace
132	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	109	2	replace
133	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	143	None	add
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	143	2	add
135	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	143	2	add
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	143	1	add
137	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	143	1	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	143	1	add
139	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	143	1	add
140	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  runState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  runState  is  already  defined  in  method  suspend()	143	None	add
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	101	1	replace
142	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	101	1	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	101	2	replace
144	[BUG]  [BUGGY]  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	101	2	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  this.startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.startTime;    this.startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	15	2	add
146	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  this.startTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  this.startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    this.startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	15	2	add
147	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  not  a  statement	15	None	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.startTime;    stopTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
149	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    stopTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
150	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	15	None	add
151	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  if(this.startTime!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.startTime;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  if(this.startTime!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.startTime;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    if(this.startTime!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.startTime;  }	  	non-compiled	[CE]  not  a  statement	15	None	add
152	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	85	None	add
153	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	85	None	add
154	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	85	None	add
155	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    Long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	85	None	add
156	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	85	None	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
158	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
159	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  1;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  System.currentTimeMillis()  /  1;	  this.splitState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
161	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
163	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
165	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
167	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
168	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
169	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
170	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
171	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	startTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	68	2	replace
173	[BUG]  [BUGGY]  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	startTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	68	2	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	86	2	replace
175	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	86	2	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;	  long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	86	2	replace
177	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;	  long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	86	2	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
179	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
180	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
181	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
182	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
184	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
185	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	156	None	add
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
187	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
188	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	156	None	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
190	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
192	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	138	2	replace
194	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	138	2	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	138	2	replace
196	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	138	2	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	138	2	replace
198	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	138	2	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
200	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
201	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	163	None	add
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	163	1	add
203	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	163	1	add
204	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	163	None	add
205	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	163	None	add
206	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	163	None	add
207	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	51	None	add
208	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	51	None	add
209	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	51	None	add
210	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
211	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    Long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	51	None	add
212	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	63	None	add
213	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	63	None	add
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	63	1	add
215	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	63	1	add
216	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	63	None	add
217	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	63	None	add
218	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
219	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  *  1000;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
221	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
223	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
224	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  1;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  incompatible  types	100	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
226	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
228	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
230	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
232	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  +  1;	  long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	56	2	replace
234	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  +  1;	  long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	56	2	replace
235	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
236	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
237	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
238	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState  =  STATE_UNSTARTED;	  this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
240	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_UNSTARTED;	  this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
241	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
242	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
243	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
244	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
245	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
246	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	87	None	add
247	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	87	None	add
248	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	87	None	add
249	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    Double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	87	None	add
250	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	87	None	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
252	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
254	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
255	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  startState  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  startState	142	None	replace
256	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	142	None	replace
257	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  startState  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  startState	142	None	replace
258	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
259	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  not  a  statement	11	None	add
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.runningState;    stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
261	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
262	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  }	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
263	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.runningState;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.runningState;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.runningState;  }	  	non-compiled	[CE]  not  a  statement	11	None	add
264	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	22	None	add
265	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	22	None	add
266	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	22	None	add
267	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	22	None	add
268	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	22	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
270	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
272	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
274	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
276	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
277	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	28	None	add
278	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	28	None	add
279	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	28	None	add
280	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	28	None	add
281	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	28	None	add
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
283	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
285	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
287	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
289	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
290	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
291	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
292	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	129	None	add
293	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
294	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	129	None	add
295	[BUG]  [BUGGY]  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	136	None	replace
296	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	136	None	replace
297	[BUG]  [BUGGY]  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	136	None	replace
298	[BUG]  [BUGGY]  minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  minute  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  cannot  find  symbol  minute	151	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1000L;    stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
300	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
301	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  this.runningState  =  System.currentTimeMillis()  /  1000L;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  this.runningState  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    this.runningState  =  System.currentTimeMillis()  /  1000L;	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
302	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  System.currentTimeMillis()  /  1000L;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    System.currentTimeMillis()  /  1000L;	  	non-compiled	[CE]  not  a  statement	121	None	add
303	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  int  stopTime  =  System.currentTimeMillis()  /  1000L;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  int  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    int  stopTime  =  System.currentTimeMillis()  /  1000L;	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
304	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  System.currentTimeMillis()  /  1000L;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  System.currentTimeMillis()  /  1000L;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    System.currentTimeMillis()  /  1000L;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	121	None	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspend.n ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println( "Stopwatch  must  be  running  to  suspend.n ");	  System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    	compilable	  [FE]  AssertionFailedError  	10	2	replace
306	[BUG]  [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspend.n ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspend.n ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println( "Stopwatch  must  be  running  to  suspend.n ");	  System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    	compilable	  [FE]  AssertionFailedError  	10	2	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
308	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
309	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	92	None	add
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
311	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
312	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol	92	None	add
313	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  possible  loss  of  precision	92	None	add
314	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	145	None	replace
315	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
316	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	145	None	replace
317	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	25	None	add
318	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	25	None	add
319	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	25	None	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
321	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
322	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	25	None	add
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    10000;    stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	123	1	add
324	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	123	1	add
325	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  this.runningState  =  System.currentTimeMillis()  /  10000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  this.runningState  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    this.runningState  =  System.currentTimeMillis()  /  10000;	  	non-compiled	[CE]  possible  loss  of  precision	123	None	add
326	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  System.currentTimeMillis()  /  10000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    System.currentTimeMillis()  /  10000;	  	non-compiled	[CE]  not  a  statement	123	None	add
327	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  int  stopTime  =  System.currentTimeMillis()  /  10000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  int  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    int  stopTime  =  System.currentTimeMillis()  /  10000;	  	non-compiled	[CE]  possible  loss  of  precision	123	None	add
328	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  System.currentTimeMillis()  /  10000;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  System.currentTimeMillis()  /  10000;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    System.currentTimeMillis()  /  10000;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	123	None	add
329	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	130	None	replace
330	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	130	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	2	replace
332	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	2	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	2	replace
334	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	2	replace
335	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  this.splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  this.splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    this.splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	17	None	add
336	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  System.currentTimeMillis()  -  this.splitState;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  not  a  statement	17	None	add
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.splitState;    stopTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
338	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    stopTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
339	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  startTime  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    int  startTime  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	17	None	add
340	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  if(this.splitState!=  STATE_STOPPED)  {  System.currentTimeMillis()  -  this.splitState;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  if(this.splitState!=  STATE_STOPPED)  {  System.currentTimeMillis()  -  this.splitState;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    if(this.splitState!=  STATE_STOPPED)  {  System.currentTimeMillis()  -  this.splitState;  }	  	non-compiled	[CE]  not  a  statement	17	None	add
341	[BUG]  [BUGGY]  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	9	1	add
343	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	9	1	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	9	1	add
345	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	9	1	add
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	9	1	add
347	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	  	compilable	  [FE]  AssertionFailedError  	9	1	add
348	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this.runningState);  [CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().interrupt(this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Thread.currentThread().interrupt(this.runningState);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;	49	None	replace
349	[BUG]  [BUGGY]  Thread.currentThread().join();  [CE]  unreported  exception  InterruptedException;  must  be  caught  or  declared  to  be  thrown  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().join();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Thread.currentThread().join();	  Thread.currentThread().interrupt();    	non-compiled	[CE]  unreported  exception  InterruptedException;  must  be  caught  or  declared  to  be  thrown	49	None	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    1L;    stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	125	1	add
351	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  stopTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	125	1	add
352	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  this.runningState  =  System.currentTimeMillis()  -  1L;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  this.runningState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    this.runningState  =  System.currentTimeMillis()  -  1L;	  	non-compiled	[CE]  possible  loss  of  precision	125	None	add
353	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  System.currentTimeMillis()  -  1L;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    System.currentTimeMillis()  -  1L;	  	non-compiled	[CE]  not  a  statement	125	None	add
354	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  int  stopTime  =  System.currentTimeMillis()  -  1L;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  int  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    int  stopTime  =  System.currentTimeMillis()  -  1L;	  	non-compiled	[CE]  possible  loss  of  precision	125	None	add
355	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  System.currentTimeMillis()  -  1L;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  System.currentTimeMillis()  -  1L;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    System.currentTimeMillis()  -  1L;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	125	None	add
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	50	2	replace
357	[BUG]  [BUGGY]  double  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	50	2	replace
358	[BUG]  [BUGGY]  short  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  short  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	short  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    *    1000;    stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
360	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
361	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  System.currentTimeMillis()  *  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    this.runningState  =  System.currentTimeMillis()  *  1000;	  	non-compiled	[CE]  possible  loss  of  precision	119	None	add
362	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  System.currentTimeMillis()  *  1000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    System.currentTimeMillis()  *  1000;	  	non-compiled	[CE]  not  a  statement	119	None	add
363	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  int  stopTime  =  System.currentTimeMillis()  *  1000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  int  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    int  stopTime  =  System.currentTimeMillis()  *  1000;	  	non-compiled	[CE]  possible  loss  of  precision	119	None	add
364	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	119	None	add
365	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	152	None	add
366	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	152	None	add
367	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	152	None	add
368	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	152	None	add
369	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	152	None	add
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  AssertionFailedError  	78	2	replace
371	[BUG]  [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println( "Stopwatch  must  be  running  to  suspension.   ");	          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  AssertionFailedError  	78	2	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println();	          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  AssertionFailedError  	78	2	replace
373	[BUG]  [BUGGY]  System.err.println();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println();	          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    	compilable	  [FE]  AssertionFailedError  	78	2	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	82	1	add
375	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	82	1	add
376	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	82	None	add
377	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  not  a  statement	82	None	add
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
379	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
380	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  Stopwatch.this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  Stopwatch.this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    Stopwatch.this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
381	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	94	None	add
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
383	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
384	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	94	None	add
385	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	94	None	add
386	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	94	None	add
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
388	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
390	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
392	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
394	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
396	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
397	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
398	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
399	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
400	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
401	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
402	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
404	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
405	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	140	None	add
406	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	140	None	add
407	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	140	None	add
408	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	140	None	add
409	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	140	None	add
410	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	141	None	replace
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	141	2	replace
412	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	141	2	replace
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
414	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
415	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	65	None	add
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    startTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	2	add
417	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    startTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	2	add
418	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	65	None	add
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_RUNNING;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  STATE_RUNNING;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
420	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_RUNNING;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_RUNNING;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  STATE_RUNNING;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  *  1;	  stopTime    =    System.currentTimeMillis()    /    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
422	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  *  1;	  stopTime    =    System.currentTimeMillis()    /    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  2;	  stopTime    =    System.currentTimeMillis()    /    1;    	compilable	  [FE]  AssertionFailedError  	8	2	replace
424	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  2;	  stopTime    =    System.currentTimeMillis()    /    1;    	compilable	  [FE]  AssertionFailedError  	8	2	replace
425	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  System.currentTimeMillis()  /  startTime;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    System.currentTimeMillis()  /  startTime;	  	non-compiled	[CE]  not  a  statement	13	None	add
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    startTime;    stopTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
427	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    stopTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
428	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  this.runningState  =  System.currentTimeMillis()  /  startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  this.runningState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    this.runningState  =  System.currentTimeMillis()  /  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
429	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  long  startTime  =  System.currentTimeMillis()  /  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  long  startTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    long  startTime  =  System.currentTimeMillis()  /  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	13	None	add
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  startTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    startTime;    startTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	13	2	add
431	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  startTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  startTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    startTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	13	2	add
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
433	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
434	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
435	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
436	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
437	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
439	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
440	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
441	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
442	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
443	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
444	[BUG]  [BUGGY]  stopTime  =  this.runningState.currentTimeMillis()  -  System.currentTimeMillis();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  this.runningState.currentTimeMillis()  -  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  this.runningState.currentTimeMillis()  -  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  *  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
446	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  *  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
448	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
450	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
452	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
454	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
456	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  *  10000;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	124	2	replace
458	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  *  10000;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	124	2	replace
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  10000L;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	124	2	replace
460	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  10000L;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	124	2	replace
461	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
462	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  endTime;  [CE]  cannot  find  symbol  endTime  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  endTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  -  endTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  cannot  find  symbol  endTime	80	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	118	2	replace
464	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	118	2	replace
465	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
466	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
467	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	55	None	add
468	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	55	None	add
469	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	55	None	add
470	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	55	None	add
471	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	55	None	add
472	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	131	None	add
473	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	131	None	add
474	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	131	None	add
475	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	131	None	add
476	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	131	None	add
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
478	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
480	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
482	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
484	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
485	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	2	add
486	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	2	add
487	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	79	None	replace
488	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	79	None	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
490	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
492	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
494	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
495	[BUG]  [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
496	[BUG]  [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
497	[BUG]  [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
499	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
500	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	30	None	add
501	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  not  a  statement	30	None	add
502	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  Stopwatch.this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  Stopwatch.this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    Stopwatch.this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
503	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	30	None	add
504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
505	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
506	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	41	2	replace
507	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	41	2	replace
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
509	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
511	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
513	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
514	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	60	None	add
515	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
516	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
517	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	158	None	add
518	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	158	None	add
519	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	158	None	add
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	158	1	add
521	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	158	1	add
522	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	158	None	add
523	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    double  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
524	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
525	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
526	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
527	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	117	2	replace
529	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	117	2	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	117	2	replace
531	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	117	2	replace
532	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	117	2	replace
534	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	117	2	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
536	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
538	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
540	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
542	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
544	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  int    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	62	2	replace
546	[BUG]  [BUGGY]  double  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  int    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	62	2	replace
547	[BUG]  [BUGGY]  short  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  short  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	short  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  int    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	73	1	add
549	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	73	1	add
550	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
551	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
552	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
553	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
554	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
555	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
556	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
557	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
558	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
559	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
560	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
561	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
562	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	42	None	add
563	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	53	None	add
564	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	53	None	add
565	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
566	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	53	None	add
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startedTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
568	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startedTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1;    stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
570	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
571	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    this.runningState  =  System.currentTimeMillis()  /  1;	  	non-compiled	[CE]  possible  loss  of  precision	7	None	add
572	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    System.currentTimeMillis()  /  1;	  	non-compiled	[CE]  not  a  statement	7	None	add
573	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  2;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    this.runningState  =  System.currentTimeMillis()  /  2;	  	non-compiled	[CE]  possible  loss  of  precision	7	None	add
574	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  2;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    System.currentTimeMillis()  /  2;	  	non-compiled	[CE]  not  a  statement	7	None	add
575	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	1	replace
577	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	1	replace
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	2	replace
579	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	2	replace
580	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
581	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
583	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
585	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
586	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	non-compiled	[CE]  incompatible  types	5	None	add
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
588	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
589	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  *  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
590	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  *  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
591	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
592	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	150	None	add
593	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
594	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  Long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  Long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    Long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
595	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    int  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	150	None	add
596	[BUG]  [BUGGY]  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  not  a  statement	33	None	replace
597	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	33	2	replace
598	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	33	2	replace
599	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis()  -  1;	  long    splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
600	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	64	None	replace
601	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	154	None	add
602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
603	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
604	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
605	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
606	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
607	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
608	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	154	None	add
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
610	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
612	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
614	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    this.runningState  =  STATE_RUNNING;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
616	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    this.runningState  =  STATE_RUNNING;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
618	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
619	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	non-compiled	[CE]  not  a  statement	34	None	add
620	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
621	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
622	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
623	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
625	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
626	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	37	None	add
627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	37	1	add
628	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	37	1	add
629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
630	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState  =  STATE_SPLIT;	  this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	61	2	replace
632	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  STATE_SPLIT;	  this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	61	2	replace
633	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState  =  STATE_UNSTARTED;	  this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	61	2	replace
634	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  STATE_UNSTARTED;	  this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	61	2	replace
635	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState  =  STATE_RUNNING;	  this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	61	2	replace
636	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  STATE_RUNNING;	  this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	61	2	replace
637	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
638	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
639	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
640	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	16	2	replace
641	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
642	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
643	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
644	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
645	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	38	None	replace
646	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
647	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.startTime;    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	15	1	add
649	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    System.err.println( "Stopwatch  must  be  running  to  suspend.   ");	  	compilable	  [FE]  AssertionFailedError  	15	1	add
650	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	28	None	add
651	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
652	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	2	add
654	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	2	add
655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
656	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
657	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
658	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
659	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
660	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	163	None	add
661	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	163	1	add
662	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	163	1	add
663	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	163	None	add
664	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
665	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
666	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	92	None	add
667	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
668	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
669	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
670	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
671	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  +  1000;	  stopTime    =    System.currentTimeMillis()    *    1000;    	compilable	  [FE]  AssertionFailedError  	120	2	replace
672	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  +  1000;	  stopTime    =    System.currentTimeMillis()    *    1000;    	compilable	  [FE]  AssertionFailedError  	120	2	replace
673	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	165	2	replace
674	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	165	2	replace
675	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	29	2	replace
676	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	29	2	replace
677	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
678	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
679	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
680	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
681	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
682	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
683	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
684	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
685	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
686	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
687	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  while(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    while(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
688	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  while(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  while(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    while(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
689	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	155	None	replace
690	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	155	None	replace
691	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	1	replace
692	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	1	replace
693	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	40	1	add
694	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	40	1	add
695	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
696	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
697	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  1000L  +  1;	  stopTime    =    System.currentTimeMillis()    /    1000L;    	compilable	  [FE]  AssertionFailedError  	122	2	replace
699	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  1000L  +  1;	  stopTime    =    System.currentTimeMillis()    /    1000L;    	compilable	  [FE]  AssertionFailedError  	122	2	replace
700	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	136	None	replace
701	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
702	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1000L;    long  stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	121	2	add
704	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    long  stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	121	2	add
705	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  not  a  statement	99	None	replace
706	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	135	2	replace
707	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	135	2	replace
708	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	156	1	add
709	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	156	1	add
710	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
711	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
712	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
713	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	127	1	add
714	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
715	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
716	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
718	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
719	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
720	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
721	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	2	replace
722	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	2	replace
723	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
724	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	159	1	replace
725	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	159	1	replace
726	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	159	None	replace
727	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	146	1	add
728	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	146	1	add
729	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	146	None	add
730	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
731	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	146	1	add
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  runningState  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    	compilable	  [FE]  AssertionFailedError  	35	2	replace
733	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  runningState  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    	compilable	  [FE]  AssertionFailedError  	35	2	replace
734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  runTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  runTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
735	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  runTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  runTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  runTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
737	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
738	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	131	None	add
739	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  int  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  int  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    int  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	131	None	add
740	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	131	None	add
741	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this);  [CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().interrupt(this);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Thread.currentThread().interrupt(this);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;	49	None	replace
742	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this.runningState,  null);  [CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().interrupt(this.runningState,  null);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Thread.currentThread().interrupt(this.runningState,  null);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;	49	None	replace
743	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
744	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
745	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
746	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	25	None	add
747	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  endTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  endTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	25	1	add
748	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  endTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  endTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  endTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	25	1	add
749	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
750	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
751	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
752	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
753	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	21	None	replace
754	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  1L;	  long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	52	2	replace
755	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  1L;	  long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	52	2	replace
756	[BUG]  [BUGGY]  attern(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend. ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  attern(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	attern(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend. ");	  atternier(this.runningState).throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  <identifier>  expected	162	None	replace
757	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
758	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
760	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
761	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	87	None	add
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  stopTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
763	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  stopTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
764	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  this.splitState  =  System.currentTimeMillis()  -  this.startState;  [CE]  cannot  find  symbol  startState  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  this.splitState  =  System.currentTimeMillis()  -  this.startState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    this.splitState  =  System.currentTimeMillis()  -  this.startState;	  	non-compiled	[CE]  cannot  find  symbol  startState	17	None	add
765	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	63	2	add
766	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	63	2	add
767	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	63	1	add
768	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	63	1	add
769	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  startState  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol  startState	63	None	add
770	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis(),  this.runningState;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis(),  this.runningState;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Long  startTime  =  System.currentTimeMillis(),  this.runningState;	  Long    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
771	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	145	None	replace
772	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
773	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
774	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
775	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
776	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
777	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
778	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
779	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
780	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
781	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    int  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	82	None	add
782	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	82	None	add
783	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000L;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
784	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
785	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
786	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
787	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
788	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
789	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
790	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	144	None	replace
791	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	144	None	replace
792	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeM  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeM	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	141	None	replace
793	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.runningState;    long  stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
794	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    long  stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
795	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  this.runningState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  this.runningState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    this.runningState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
796	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
797	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
798	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	140	None	add
799	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	140	None	add
800	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    *    1000;    long  stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	119	2	add
801	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    long  stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	119	2	add
802	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    *    1000;    long  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	119	2	add
803	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    long  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	119	2	add
804	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	151	1	replace
805	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	151	1	replace
806	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println( "StoPPED  must  be  running  to  suspend.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println( "StoPPED  must  be  running  to  suspend.   ");	  System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    	compilable	  [FE]  AssertionFailedError  	10	2	replace
807	[BUG]  [BUGGY]  System.err.println( "StoPPED  must  be  running  to  suspend.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println( "StoPPED  must  be  running  to  suspend.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println( "StoPPED  must  be  running  to  suspend.   ");	  System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    	compilable	  [FE]  AssertionFailedError  	10	2	replace
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	154	1	add
809	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	154	1	add
810	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
811	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
812	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
813	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
814	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
815	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
816	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
817	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
818	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
819	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  IllegalStateException  	43	2	replace
820	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	79	None	replace
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    1L;    long  stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	125	1	add
822	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  stopTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    long  stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	125	1	add
823	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
824	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  length  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  length  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  length  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
825	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
826	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
827	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	1	add
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	2	add
829	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	148	2	add
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  2;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
831	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  2;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
832	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState);  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState);	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  unreachable  statement	161	None	replace
833	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState,  null);  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState,  null);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState,  null);	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  unreachable  statement	161	None	replace
834	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	152	None	add
835	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	158	None	add
836	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	158	1	add
837	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	158	1	add
838	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	143	None	add
839	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	143	None	add
840	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  long  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1;    long  stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
841	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  long  stopTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  long  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    long  stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1;    stopTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
843	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    stopTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
844	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	55	None	add
845	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
846	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
847	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
848	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
849	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
850	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
852	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
853	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
854	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	23	None	replace
855	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	23	None	replace
856	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	1	replace
857	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	1	replace
858	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	1	replace
859	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	93	1	replace
860	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	137	None	add
861	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  length  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  length  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  length  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	137	None	add
862	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	137	None	add
863	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
864	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
865	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
866	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
867	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
868	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
869	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Thread.currentThread().interrupt();  this.runningState  =  STATE_STOPPED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
870	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	Thread.currentThread().interrupt();  this.runningState  =  STATE_SUSPENDED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
871	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  Thread.currentThread().interrupt();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Thread.currentThread().interrupt();  this.runningState  =  STATE_SUSPENDED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
872	[BUG]  [BUGGY]  boolean  splitState  =  System.currentTimeMillis();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  boolean  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	boolean  splitState  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  incompatible  types	114	None	replace
873	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
874	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  Double  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  Double  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    Double  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
875	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  Long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  Long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    Long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	58	None	add
876	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	66	2	replace
877	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	66	2	replace
878	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
879	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
880	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
881	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
882	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
883	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
884	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
885	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
886	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis()    -    1;    long  startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
887	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
888	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
889	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  endTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  endTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	85	1	add
890	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  endTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  endTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  endTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	85	1	add
891	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
892	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
893	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	116	None	replace
894	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	95	2	replace
895	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  long    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	95	2	replace
896	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
897	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
899	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
900	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
901	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	97	2	replace
902	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	45	None	replace
903	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
904	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
905	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
906	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
907	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	22	None	add
908	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
909	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
910	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
911	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	100	2	replace
912	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	133	None	add
913	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	133	None	add
914	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	133	None	add
915	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	  	non-compiled	[CE]  ';'  expected	5	None	add
916	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
917	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
918	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
919	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
920	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
921	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    10000;    long  stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	123	2	add
923	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    long  stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	123	2	add
924	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
925	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	34	1	add
926	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	non-compiled	[CE]  not  a  statement	34	None	add
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
928	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
929	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
930	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  length  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  length  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  length  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
931	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
932	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
933	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	133	None	add
934	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	133	None	add
935	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	37	None	add
936	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
937	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
938	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
939	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	108	None	add
940	[BUG]  [BUGGY]  atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension. ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension. ");	  atternier(this.runningState).throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  <identifier>  expected	162	None	replace
941	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	140	None	add
942	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	140	None	add
943	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	152	None	add
944	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	152	None	add
945	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  int  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  int  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    int  startTime  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
946	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  int  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  int  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    int  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	137	None	add
947	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  time  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  time  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  time  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	137	None	add
948	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	87	1	add
949	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	87	1	add
950	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  runTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
951	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runningState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runningState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  runningState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
952	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  2;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  2;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  2;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	150	None	add
953	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
954	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  int  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  int  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    int  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	65	None	add
955	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
956	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
957	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
958	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	75	None	add
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
960	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
961	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
962	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
963	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	112	None	add
964	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMill  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMill	          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	141	None	replace
965	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
966	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  must  be  running  to  suspend.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println(   "Stopwatch    must    be    running    to    suspend.   ");    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
967	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	51	None	add
968	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	158	None	add
969	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	158	None	add
970	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	158	None	add
971	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
972	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	42	2	add
973	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
974	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	92	1	add
975	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  int  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  int  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    int  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	non-compiled	[CE]  possible  loss  of  precision	34	None	add
976	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis()  /  1000;  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis()  /  1000;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis()  /  1000;  }	  	non-compiled	[CE]  ')'  expected	34	None	add
977	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  int  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  int  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        if(stopTime    ==    System.currentTimeMillis())    {    stopTime    =    System.currentTimeMillis()    /    1000;    }    int  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  possible  loss  of  precision	34	None	add
978	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  suspend()	28	None	add
979	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  int  startTime  =  System.currentTimeMillis()  /  10000;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  int  startTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    int  startTime  =  System.currentTimeMillis()  /  10000;	  	non-compiled	[CE]  possible  loss  of  precision	123	None	add
980	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  cannot  find  symbol  StopTime  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    StopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  cannot  find  symbol  StopTime	30	None	add
981	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	2	add
982	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	30	2	add
983	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_STOPPED;  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
985	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
986	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
987	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	147	1	replace
988	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
989	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_SUSPENDED  ||  this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	128	2	replace
990	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  2;	  long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	56	2	replace
991	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  2;	  long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	56	2	replace
992	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
993	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
994	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	44	None	add
995	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	1	replace
996	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	1	replace
997	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	1	replace
998	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	155	1	replace
999	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1000	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1001	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1002	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1003	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1004	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1005	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
1006	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
1007	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
1008	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
1009	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis()  -  stopTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
1010	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis()  -  stopTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
1011	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  int  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  int  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    int  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	96	None	add
1012	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
1013	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
1014	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    int  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	17	None	add
1015	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
1016	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
1017	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  runTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
1018	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
1019	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	129	None	add
1020	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  int  startTime  =  System.currentTimeMillis()  *  1000;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  int  startTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    int  startTime  =  System.currentTimeMillis()  *  1000;	  	non-compiled	[CE]  possible  loss  of  precision	119	None	add
1021	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
1022	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
1023	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
1024	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1025	[BUG]  [BUGGY]  long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  double    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
1026	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension. ");  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension. ");	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  unreachable  statement	161	None	replace
1027	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  Try  again. ");  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  Try  again. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  Try  again. ");	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  unreachable  statement	161	None	replace
1028	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	154	2	add
1029	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	154	2	add
1030	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	154	None	add
1031	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	79	None	replace
1032	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	143	None	add
1033	[BUG]  [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  runState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                long        splitState        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        long    runState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  runState  is  already  defined  in  method  suspend()	143	None	add
1034	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
1035	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
1036	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
1037	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	40	1	add
1038	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	40	1	add
1039	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
1040	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
1041	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	156	None	add
1042	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	156	None	add
1043	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	156	None	add
1044	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	145	None	replace
1045	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1046	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    long  splitTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1047	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  that.runningState  =  STATE_STOPPED;  }  [CE]  cannot  find  symbol  that  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  that.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=    STATE_SUSPENDED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  that.runningState  =  STATE_STOPPED;  }	  	non-compiled	[CE]  cannot  find  symbol  that	148	None	add
1048	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
1049	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	46	1	add
1050	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
1051	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	99	1	replace
1052	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
1053	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
1054	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
1055	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
1056	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
1057	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
1058	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
1059	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
1060	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	69	2	replace
1061	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	53	None	add
1062	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
1063	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
1064	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  System.arraycopy(this.splitState,  0,  this.splitState,  0,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  System.arraycopy(this.splitState,  0,  this.splitState,  0,  0);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    System.arraycopy(this.splitState,  0,  this.splitState,  0,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	60	None	add
1065	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	60	None	add
1066	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	159	None	replace
1067	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	131	None	add
1068	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	131	None	add
1069	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	131	None	add
