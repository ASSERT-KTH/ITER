bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState  =  STATE_STOPPED;	      	compilable	  [FE]  AssertionFailedError  	8	2	replace
2	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_STOPPED;	      	compilable	  [FE]  AssertionFailedError  	8	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState  =  STATE_RUNNING;	      	compilable	  [FE]  AssertionFailedError  	8	2	replace
4	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_RUNNING;	      	compilable	  [FE]  AssertionFailedError  	8	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	      	compilable	  [FE]  AssertionFailedError  	8	2	replace
6	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	      	compilable	  [FE]  AssertionFailedError  	8	2	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
8	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspend. ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	System.err.println( "Stopwatch  must  be  running  to  suspend. ");	      if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
10	[BUG]  [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspend. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  System.err.println( "Stopwatch  must  be  running  to  suspend. ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	System.err.println( "Stopwatch  must  be  running  to  suspend. ");	      if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
12	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	2	replace
14	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	2	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	2	replace
16	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	2	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
18	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
19	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	23	None	add
20	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	23	None	add
21	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	23	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
23	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
24	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	23	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
26	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
27	[BUG]  [BUGGY]  short  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  short  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	short  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
29	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
31	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
32	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
33	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  not  a  statement	5	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
35	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    if(stopTime  ==  System.currentTimeMillis())  {  stopTime  =  System.currentTimeMillis()  /  1000;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
36	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  int  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  int  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    int  startTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
38	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
39	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
41	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
42	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	11	2	add
43	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	11	2	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
45	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.runningState  =  STATE_SUSPENDED;	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	10	2	replace
47	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.runningState  =  STATE_SUSPENDED;	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	10	2	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	Thread.currentThread().interrupt();	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	10	2	replace
49	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Thread.currentThread().interrupt();	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	compilable	  [FE]  AssertionFailedError  	10	2	replace
50	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  int  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();	      long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	22	2	replace
52	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	22	2	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis()  -  startTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	22	2	replace
54	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis()  -  startTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	22	2	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
56	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
57	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis();  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  Long  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Long  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  incompatible  types	25	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
59	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	25	2	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	this.splitState  =  STATE_STOPPED;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	24	2	replace
61	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  STATE_STOPPED;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	24	2	replace
62	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	24	2	replace
64	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	24	2	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
66	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
67	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
68	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	3	None	add
69	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    int  startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
70	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	3	None	add
71	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  System.currentTimeMillis()  -  1;	      this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
72	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  this.splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	this.splitState  =  System.currentTimeMillis()  +  1;	      this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
74	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
76	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
78	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
79	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  not  a  statement	19	None	add
80	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
81	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	19	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
83	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
84	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  startTime;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  startTime;  }  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  startTime;  }	  	non-compiled	[CE]  not  a  statement	19	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
86	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
88	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	double  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
89	[BUG]  [BUGGY]  short  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  short  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	short  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
91	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
93	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
95	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
97	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
98	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    this.runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
99	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	1	None	add
100	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
101	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	1	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
103	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
105	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
107	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
109	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
111	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
112	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
113	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
114	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	21	None	add
115	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	21	None	add
116	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	21	None	add
117	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	21	None	add
118	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	21	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	6	2	replace
120	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	6	2	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	6	2	replace
122	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	6	2	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	6	2	replace
124	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	6	2	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime  =  System.currentTimeMillis()  -  1L;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
126	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime  =  System.currentTimeMillis()  -  1L;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	      	compilable	  [FE]  AssertionFailedError  	8	1	replace
128	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	      	compilable	  [FE]  AssertionFailedError  	8	1	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
130	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
132	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
134	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
135	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
136	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()  -  startTime;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	19	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	5	2	add
138	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	5	2	add
139	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  int  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  int  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    int  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	23	2	add
141	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	23	2	add
142	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  startState  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  this.startState  =  STATE_STOPPED;	  	non-compiled	[CE]  cannot  find  symbol  startState	23	None	add
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
144	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
145	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
147	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
149	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
151	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
153	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
155	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
157	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	11	1	add
159	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	11	1	add
160	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  Long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  incompatible  types	26	None	replace
161	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  unreachable  statement	10	None	replace
162	[BUG]  [BUGGY]  atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	atternier(this.runningState).throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
164	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
165	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	23	None	add
166	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }    [BUGGY]  Long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	179	179	1	replace	Long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	      int    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  incompatible  types	13	None	replace
