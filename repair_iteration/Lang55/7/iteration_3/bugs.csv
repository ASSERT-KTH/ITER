bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
2	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
4	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
6	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
8	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
10	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
12	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
13	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
15	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
17	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  -  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	3	replace
19	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  -  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	3	replace
20	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  stopTime  =  System.currentTimeMillis();	  long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  +  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	3	replace
22	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  +  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	3	replace
23	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	175	5	replace
24	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	175	5	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.n "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running.n "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
26	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running.n "  +  this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.n "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running.n "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.  StopTime: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running.  StopTime: "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
28	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running.  StopTime: "  +  this.runningState);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.  StopTime: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running.  StopTime: "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	2	3	replace
30	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	2	3	replace
31	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	123	None	replace
32	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	123	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	128	1	add
34	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	128	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
36	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
38	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
39	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	128	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);	  	compilable	  [FE]  AssertionFailedError  	154	1	add
41	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);	  	compilable	  [FE]  AssertionFailedError  	154	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running.. "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println( "Stopwatch  is  not  running.. "  +  this.runningState);	  	compilable	  [FE]  AssertionFailedError  	154	1	add
43	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running.. "  +  this.runningState);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running.. "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println( "Stopwatch  is  not  running.. "  +  this.runningState);	  	compilable	  [FE]  AssertionFailedError  	154	1	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
45	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	3	replace
47	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	3	replace
48	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	3	replace
50	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	3	replace
51	[BUG]  [BUGGY]  This.runningState  =  STATE_RUNNING;  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  This.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	This.runningState  =  STATE_RUNNING;	  This.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  cannot  find  symbol  This	147	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
53	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
55	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
56	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	75	1	add
57	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	75	1	add
58	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	68	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	68	1	add
60	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	68	1	add
61	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	68	None	add
62	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	68	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	183	1	replace
64	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	183	1	replace
65	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    long    splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	183	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    *    1000;    stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
67	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
68	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  System.currentTimeMillis()  *  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  this.runningState  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    this.runningState  =  System.currentTimeMillis()  *  1000;	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
69	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  System.currentTimeMillis()  *  1000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    System.currentTimeMillis()  *  1000;	  	non-compiled	[CE]  not  a  statement	53	None	add
70	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  int  startTime  =  System.currentTimeMillis()  *  1000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  int  startTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    int  startTime  =  System.currentTimeMillis()  *  1000;	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
71	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  *  1000;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  *  1000;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  *  1000;  }	  	non-compiled	[CE]  not  a  statement	53	None	add
72	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running: "  +  this.runningState,  stopTime);  [CE]  no  suitable  method  found  for  println(String,long)  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running: "  +  this.runningState,  stopTime);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running: "  +  this.runningState,  stopTime);	  System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    	non-compiled	[CE]  no  suitable  method  found  for  println(String,long)	82	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
74	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
75	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	18	None	add
76	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  not  a  statement	18	None	add
77	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  int  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  int  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    int  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	18	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
79	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	4	replace
81	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	4	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	4	replace
83	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	4	replace
84	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	149	None	replace
85	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	compilable	  [FE]  IllegalStateException  	34	4	replace
86	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	compilable	  [FE]  IllegalStateException  	34	4	replace
87	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	127	3	replace
89	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	127	3	replace
90	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
91	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
92	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  *  1000;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
94	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
96	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
98	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
99	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	107	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
101	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
102	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  this.splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  this.splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    this.splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
103	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  System.currentTimeMillis()  -  this.splitState;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  not  a  statement	49	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.splitState;    stopTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	49	1	add
105	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    stopTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	49	1	add
106	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  startTime  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    int  startTime  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
107	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  if(this.splitState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.splitState;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  if(this.splitState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.splitState;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    if(this.splitState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.splitState;  }	  	non-compiled	[CE]  not  a  statement	49	None	add
108	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	25	None	add
109	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	25	None	add
110	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	25	None	add
111	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    Long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	25	None	add
112	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	25	None	add
113	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	182	None	add
114	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    splitState    =    System.currentTimeMillis()    -    1;    long  startTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	182	None	add
115	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    splitState    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	182	None	add
116	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    splitState    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	182	None	add
117	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    splitState    =    System.currentTimeMillis()    -    1;    long  runTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	182	None	add
118	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
119	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    double  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
120	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
121	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  Double  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  Double  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    Double  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
122	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    int  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	66	None	add
123	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
125	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
126	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
127	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
128	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println( "Stopping  is  not  supported.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println( "Stopping  is  not  supported.   ");	  	compilable	  [FE]  AssertionFailedError  	178	1	add
130	[BUG]  [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println( "Stopping  is  not  supported.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println( "Stopping  is  not  supported.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println( "Stopping  is  not  supported.   ");	  	compilable	  [FE]  AssertionFailedError  	178	1	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println( "Stopping  is  not  supported.. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println( "Stopping  is  not  supported.. ");	  	compilable	  [FE]  AssertionFailedError  	178	1	add
132	[BUG]  [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println( "Stopping  is  not  supported.. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println( "Stopping  is  not  supported.. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println( "Stopping  is  not  supported.. ");	  	compilable	  [FE]  AssertionFailedError  	178	1	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
134	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
136	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
138	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
140	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
141	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	5	None	add
142	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	126	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	126	3	replace
144	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	126	3	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	103	4	replace
146	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	103	4	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	103	4	replace
148	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	103	4	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	103	4	replace
150	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	103	4	replace
151	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	121	None	replace
152	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	Long  startTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	121	None	replace
153	[BUG]  [BUGGY]  short  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  short  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	short  startTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	121	None	replace
154	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	148	None	add
155	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	148	None	add
156	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	148	None	add
157	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    Long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	148	None	add
158	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	148	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	4	replace
160	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	4	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
162	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
164	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
166	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
167	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	102	None	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	4	add
169	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	4	add
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
171	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
173	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
174	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  ';'  expected	160	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	50	4	replace
176	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	50	4	replace
177	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
178	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	167	4	replace
180	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	167	4	replace
181	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
183	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
184	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	35	None	add
185	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	35	None	add
186	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  int  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  int  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    int  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	35	None	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
188	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");	  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	144	1	replace
190	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");	  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	144	1	replace
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");	  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	144	3	replace
192	[BUG]  [BUGGY]  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.currentTimeMillis();  System.err.println( "Stopwatch  is  not  running.   ");	  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	144	3	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running:   "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println( "Stopwatch  is  not  running:   "  +  this.runningState);	  	compilable	  [FE]  AssertionFailedError  	81	1	add
194	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running:   "  +  this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println( "Stopwatch  is  not  running:   "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println( "Stopwatch  is  not  running:   "  +  this.runningState);	  	compilable	  [FE]  AssertionFailedError  	81	1	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	81	1	add
196	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	81	1	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    *    1;    stopTime  =  System.currentTimeMillis()  *  1;	  	compilable	  [FE]  AssertionFailedError  	83	1	add
198	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  stopTime  =  System.currentTimeMillis()  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    stopTime  =  System.currentTimeMillis()  *  1;	  	compilable	  [FE]  AssertionFailedError  	83	1	add
199	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  this.runningState  =  System.currentTimeMillis()  *  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  this.runningState  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    this.runningState  =  System.currentTimeMillis()  *  1;	  	non-compiled	[CE]  possible  loss  of  precision	83	None	add
200	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.currentTimeMillis()  *  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    System.currentTimeMillis()  *  1;	  	non-compiled	[CE]  not  a  statement	83	None	add
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  this.startTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    *    1;    this.startTime  =  System.currentTimeMillis()  *  1;	  	compilable	  [FE]  AssertionFailedError  	83	4	add
202	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  this.startTime  =  System.currentTimeMillis()  *  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  this.startTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    this.startTime  =  System.currentTimeMillis()  *  1;	  	compilable	  [FE]  AssertionFailedError  	83	4	add
203	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.currentTimeMillis()  *  1;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.currentTimeMillis()  *  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    System.currentTimeMillis()  *  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	83	None	add
204	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	27	None	add
205	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	27	None	add
206	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	27	None	add
207	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	27	None	add
208	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	27	None	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_SUSPENDED;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	171	3	replace
210	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_SUSPENDED;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	171	3	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	17	3	replace
212	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	17	3	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	17	3	replace
214	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	17	3	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	17	3	replace
216	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	17	3	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
218	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
220	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
221	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	161	None	add
222	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	161	None	add
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
224	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  10000;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	58	4	replace
226	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  10000;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	58	4	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  10000L;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	58	4	replace
228	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  10000L;	  stopTime    =    System.currentTimeMillis()    /    10000;    	compilable	  [FE]  AssertionFailedError  	58	4	replace
229	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
230	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	94	3	replace
232	[BUG]  [BUGGY]  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	94	3	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	94	1	replace
234	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	94	1	replace
235	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
236	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
237	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
238	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	120	None	replace
239	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  -  startTime;  this.stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    1000L;    stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
241	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
242	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  this.runningState  =  System.currentTimeMillis()  /  1000L;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  this.runningState  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    this.runningState  =  System.currentTimeMillis()  /  1000L;	  	non-compiled	[CE]  possible  loss  of  precision	55	None	add
243	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  System.currentTimeMillis()  /  1000L;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    System.currentTimeMillis()  /  1000L;	  	non-compiled	[CE]  not  a  statement	55	None	add
244	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  int  startTime  =  System.currentTimeMillis()  /  1000L;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  int  startTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    int  startTime  =  System.currentTimeMillis()  /  1000L;	  	non-compiled	[CE]  possible  loss  of  precision	55	None	add
245	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000L;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000L;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000L;  }	  	non-compiled	[CE]  not  a  statement	55	None	add
246	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    1;    long  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	41	None	add
247	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    1;    int  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	41	None	add
248	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	41	None	add
249	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    1;    long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	41	None	add
250	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    1;    int  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	41	None	add
251	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	45	None	add
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.runningState;    stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	45	1	add
253	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	45	1	add
254	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  not  a  statement	45	None	add
255	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  int  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  int  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    int  this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  not  a  statement	45	None	add
256	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.runningState;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.runningState;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.runningState;  }	  	non-compiled	[CE]  not  a  statement	45	None	add
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000L;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
258	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000L;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println();	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    	compilable	  [FE]  AssertionFailedError  	90	3	replace
260	[BUG]  [BUGGY]  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println();	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    	compilable	  [FE]  AssertionFailedError  	90	3	replace
261	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	185	4	replace
262	[BUG]  [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	185	4	replace
263	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	185	5	replace
264	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	185	5	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    this.runningState  =  STATE_UNSPLIT;	  	compilable	  [FE]  AssertionFailedError  	180	1	add
266	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  this.runningState  =  STATE_UNSPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    this.runningState  =  STATE_UNSPLIT;	  	compilable	  [FE]  AssertionFailedError  	180	1	add
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
268	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
270	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
272	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
274	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
276	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
278	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
280	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
281	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
283	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
284	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
285	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
286	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis()  -  1;	  long    startTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  1L;	  long    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	42	3	replace
288	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  1L;	  long    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	42	3	replace
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
290	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
292	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
294	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
296	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
297	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE	  	non-compiled	[CE]  ')'  expected	3	None	add
298	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  1;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	Long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  incompatible  types	95	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	99	4	replace
300	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	99	4	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	99	4	replace
302	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	99	4	replace
303	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	99	4	replace
305	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	99	4	replace
306	[BUG]  [BUGGY]  minute  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  minute  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  minute  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	minute  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    splitState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  cannot  find  symbol  minute	177	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
308	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
310	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
312	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	125	3	replace
314	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	125	3	replace
315	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	125	3	replace
317	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	125	3	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	125	3	replace
319	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	125	3	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running..   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running..   ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running..   ");	  	compilable	  [FE]  AssertionFailedError  	87	1	add
321	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running..   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running..   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running..   ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running..   ");	  	compilable	  [FE]  AssertionFailedError  	87	1	add
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running..   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running..   ");    System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running..   ");	  	compilable	  [FE]  AssertionFailedError  	87	1	add
323	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running..   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running..   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running..   ");    System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running..   ");	  	compilable	  [FE]  AssertionFailedError  	87	1	add
324	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running. ".);  System.err.println( "Stopwatch  is  not  running..   ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running. ".);  System.err.println( "Stopwatch  is  not  running..   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running..   ");    System.err.println( "Stopwatch  is  not  running. ".);  System.err.println( "Stopwatch  is  not  running..   ");	  	non-compiled	[CE]  <identifier>  expected	87	None	add
325	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
326	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  -  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
327	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	143	1	add
329	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	143	1	add
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	143	1	add
331	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	143	1	add
332	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  this.runningState  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  this.runningState  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    this.runningState  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	non-compiled	[CE]  possible  loss  of  precision	143	None	add
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	143	1	add
334	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	143	1	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  this.startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.startTime;    this.startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	51	4	add
336	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  this.startTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  this.startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    this.startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	51	4	add
337	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  not  a  statement	51	None	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.startTime;    stopTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
339	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    stopTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
340	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
341	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  if(this.startTime!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.startTime;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  if(this.startTime!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.startTime;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    if(this.startTime!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  this.startTime;  }	  	non-compiled	[CE]  not  a  statement	51	None	add
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	24	3	replace
343	[BUG]  [BUGGY]  double  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	24	3	replace
344	[BUG]  [BUGGY]  short  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  short  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	short  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
345	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
346	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
347	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
348	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
349	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	113	1	add
351	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	113	1	add
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
353	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
355	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
357	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
359	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
360	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState  =  STATE_SPLIT;	  this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	112	3	replace
361	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_SPLIT;	  this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	112	3	replace
362	[BUG]  [BUGGY]  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis()    /    1000;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	85	1	add
364	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	85	1	add
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	85	1	add
366	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.. ");  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	85	1	add
367	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running. ".);  System.err.println( "Stopwatch  is  not  running.   ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running. ".);  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running. ".);  System.err.println( "Stopwatch  is  not  running.   ");	  	non-compiled	[CE]  <identifier>  expected	85	None	add
368	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
370	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
371	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
372	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
373	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
374	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	100	None	replace
375	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	100	None	replace
376	[BUG]  [BUGGY]  int  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  	138	None	replace
377	[BUG]  [BUGGY]  int  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  	138	None	replace
378	[BUG]  [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	138	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	39	3	replace
380	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	39	3	replace
381	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	4	replace
382	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	4	replace
383	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	5	replace
384	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	5	replace
385	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	4	replace
386	[BUG]  [BUGGY]  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	4	replace
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
388	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
390	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
391	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    this.runningState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	91	None	add
392	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	91	None	add
393	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  int  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  int  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    int  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	91	None	add
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
395	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	11	3	replace
397	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	11	3	replace
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	11	3	replace
399	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	11	3	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	151	4	replace
401	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	151	4	replace
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	151	4	replace
403	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	151	4	replace
404	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    long  startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	43	None	add
405	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    int  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	43	None	add
406	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	43	None	add
407	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    int  startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	43	None	add
408	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    int  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	43	None	add
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_RUNNING;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	169	3	replace
410	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running. ");  this.runningState  =  STATE_RUNNING;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	169	3	replace
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	168	1	add
412	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	168	1	add
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	168	1	add
414	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	168	1	add
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	168	1	add
416	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	168	1	add
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	168	1	add
418	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_RUNNING;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_RUNNING;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	168	1	add
419	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	184	1	add
420	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	184	1	add
421	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	184	1	add
422	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	184	1	add
423	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }	  	non-compiled	[CE]  <identifier>  expected	184	None	add
424	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	139	None	add
425	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	139	None	add
426	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	139	None	add
427	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	139	None	add
428	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	139	None	add
429	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	3	replace
430	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	3	replace
431	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	Long  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  incompatible  types	22	None	replace
432	[BUG]  [BUGGY]  short  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  short  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	short  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
433	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    int    startTime    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  }	  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	136	4	replace
435	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  }	  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	136	4	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	21	4	replace
437	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	21	4	replace
438	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  ';'  expected	162	None	replace
439	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
440	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
441	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
442	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  Long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  Long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    Long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
443	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
444	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	29	None	add
445	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	29	None	add
446	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	29	1	add
447	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	29	1	add
448	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	29	None	add
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    2;    stopTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	186	1	add
450	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  stopTime  =  System.currentTimeMillis()  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    2;    stopTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	186	1	add
451	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  this.runningState  =  System.currentTimeMillis()  /  2;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  this.runningState  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    2;    this.runningState  =  System.currentTimeMillis()  /  2;	  	non-compiled	[CE]  possible  loss  of  precision	186	None	add
452	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  System.currentTimeMillis()  /  2;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    2;    System.currentTimeMillis()  /  2;	  	non-compiled	[CE]  not  a  statement	186	None	add
453	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  int  startTime  =  System.currentTimeMillis()  /  2;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  int  startTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    2;    int  startTime  =  System.currentTimeMillis()  /  2;	  	non-compiled	[CE]  possible  loss  of  precision	186	None	add
454	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  2;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    2;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  2;  }	  	non-compiled	[CE]  not  a  statement	186	None	add
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported.  StopTime: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopping  is  not  supported.  StopTime: "  +  this.runningState);	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
456	[BUG]  [BUGGY]  System.err.println( "Stopping  is  not  supported.  StopTime: "  +  this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported.  StopTime: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopping  is  not  supported.  StopTime: "  +  this.runningState);	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported.   "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopping  is  not  supported.   "  +  this.runningState);	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
458	[BUG]  [BUGGY]  System.err.println( "Stopping  is  not  supported.   "  +  this.runningState);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported.   "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopping  is  not  supported.   "  +  this.runningState);	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running.. ");	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println(   "Stopwatch    is    not    running..   ");    	compilable	  [FE]  AssertionFailedError  	88	3	replace
460	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running.. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running.. ");	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println(   "Stopwatch    is    not    running..   ");    	compilable	  [FE]  AssertionFailedError  	88	3	replace
461	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	173	3	replace
462	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	173	3	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	173	3	replace
464	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    startTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	173	3	replace
465	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
466	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
467	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
468	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  1L;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
469	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  +  1000;	  stopTime    =    System.currentTimeMillis()    *    1000;    	compilable	  [FE]  AssertionFailedError  	54	4	replace
470	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  +  1000;	  stopTime    =    System.currentTimeMillis()    *    1000;    	compilable	  [FE]  AssertionFailedError  	54	4	replace
471	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	145	None	add
472	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	145	None	add
473	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	145	None	add
474	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  time  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  time  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  time  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	145	None	add
475	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	145	None	add
476	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  2;	  stopTime    =    System.currentTimeMillis()    /    2;    	compilable	  [FE]  AssertionFailedError  	187	4	replace
477	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  2;	  stopTime    =    System.currentTimeMillis()    /    2;    	compilable	  [FE]  AssertionFailedError  	187	4	replace
478	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis()  +  1;	  long    startTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
479	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	172	None	add
480	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	172	None	add
481	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	172	None	add
482	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	172	None	add
483	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  runTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	172	None	add
484	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
485	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_STOPPED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
486	[BUG]  [BUGGY]  while(this.runningState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_SPLIT)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
487	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	176	None	add
488	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    splitState    =    System.currentTimeMillis()    +    1;    long  startTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	176	None	add
489	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    splitState    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	176	None	add
490	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    splitState    =    System.currentTimeMillis()    +    1;    int  startTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	176	None	add
491	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    splitState    =    System.currentTimeMillis()    +    1;    long  runTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	176	None	add
492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	115	1	add
493	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	115	1	add
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
495	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
497	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
499	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	4	add
501	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	115	4	add
502	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	59	1	add
504	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	59	1	add
505	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
506	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	101	3	replace
508	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	101	3	replace
509	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
510	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
512	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
513	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	109	None	add
514	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
515	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
517	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	109	1	add
519	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	109	1	add
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	4	replace
521	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	4	replace
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	1	replace
523	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	1	replace
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	4	replace
525	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	4	replace
526	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
527	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
529	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
531	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	double  startTime  =  System.currentTimeMillis()  -  1;	  double    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	67	3	replace
533	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double  startTime  =  System.currentTimeMillis()  -  1;	  double    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	67	3	replace
534	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	159	None	add
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
536	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
537	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	159	None	add
538	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
539	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
540	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
541	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.n   ");  System.err.println( "Stopwatch  is  not  running.n   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running.n   ");    System.err.println( "Stopwatch  is  not  running.n   ");	  	compilable	  [FE]  AssertionFailedError  	79	1	add
543	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running.n   ");  System.err.println( "Stopwatch  is  not  running.n   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.n   ");  System.err.println( "Stopwatch  is  not  running.n   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running.n   ");    System.err.println( "Stopwatch  is  not  running.n   ");	  	compilable	  [FE]  AssertionFailedError  	79	1	add
544	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running.n   ");  System.err.println( "Stopwatch  is  not  running.n "));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.n   ");  System.err.println( "Stopwatch  is  not  running.n "));  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running.n   ");    System.err.println( "Stopwatch  is  not  running.n "));	  	non-compiled	[CE]  	79	None	add
545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	111	1	add
546	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	111	1	add
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
548	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
549	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
550	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
552	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
554	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	89	1	add
556	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	89	1	add
557	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    System.err.println( "Stopwatch  is  not  running.. ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	89	1	add
558	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running.. ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    System.err.println( "Stopwatch  is  not  running.. ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	89	1	add
559	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running. ".);  System.err.println();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println( "Stopwatch  is  not  running. ".);  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    System.err.println( "Stopwatch  is  not  running. ".);  System.err.println();	  	non-compiled	[CE]  <identifier>  expected	89	None	add
560	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	33	None	add
561	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	33	None	add
562	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    1L;    stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
563	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  stopTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
564	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  this.runningState  =  System.currentTimeMillis()  -  1L;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  this.runningState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    this.runningState  =  System.currentTimeMillis()  -  1L;	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
565	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  System.currentTimeMillis()  -  1L;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    System.currentTimeMillis()  -  1L;	  	non-compiled	[CE]  not  a  statement	156	None	add
566	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  int  startTime  =  System.currentTimeMillis()  -  1L;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  int  startTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    int  startTime  =  System.currentTimeMillis()  -  1L;	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
567	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1L;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1L;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1L;  }	  	non-compiled	[CE]  not  a  statement	156	None	add
568	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	141	None	add
569	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	141	None	add
570	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  startTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	141	None	add
571	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	141	None	add
572	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  time  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  time  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  time  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	141	None	add
573	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis()  -  1;	  long    splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
574	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  1L;	  long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	26	3	replace
575	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  1L;	  long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	26	3	replace
576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
577	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
578	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	105	None	add
579	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	105	1	add
580	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	105	1	add
581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
582	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
583	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
584	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
585	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis()  +  1;  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis()  +  1;  }	  stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	40	1	replace
587	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	40	1	replace
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	40	3	replace
589	[BUG]  [BUGGY]  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	40	3	replace
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
591	[BUG]  [BUGGY]  StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
593	[BUG]  [BUGGY]  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
594	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    long  startTime  =  System.currentTimeMillis()  -  2;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	188	None	add
595	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  int  splitState  =  System.currentTimeMillis()  -  2;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  int  splitState  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    int  splitState  =  System.currentTimeMillis()  -  2;	  	non-compiled	[CE]  possible  loss  of  precision	188	None	add
596	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	188	None	add
597	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  int  startTime  =  System.currentTimeMillis()  -  2;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  int  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    int  startTime  =  System.currentTimeMillis()  -  2;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	188	None	add
598	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	188	None	add
599	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
601	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
602	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	119	None	add
603	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  not  a  statement	119	None	add
604	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	119	None	add
605	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	4	add
606	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    long  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	4	add
607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime  =  System.currentTimeMillis()  -  1;	  this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	129	1	replace
608	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime  =  System.currentTimeMillis()  -  1;	  this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	129	1	replace
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime  =  System.currentTimeMillis()  +  1;	  this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	129	1	replace
610	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime  =  System.currentTimeMillis()  +  1;	  this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	129	1	replace
611	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	134	None	replace
612	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    long    stopTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	134	None	replace
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	110	4	replace
614	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	110	4	replace
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	1	add
616	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	1	add
617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    System.currentTimeMillis();  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	1	add
618	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  System.currentTimeMillis();  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    System.currentTimeMillis();  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	1	add
619	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
620	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	4	add
621	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	4	add
622	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	152	1	add
623	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	152	1	add
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
625	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
626	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
627	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
628	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
629	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
630	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
631	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
632	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
633	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
634	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
635	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
636	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
637	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
638	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
639	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
641	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
643	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
644	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  2;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis()  -  2;	  long    startTime    =    System.currentTimeMillis()    -    2;    	non-compiled	[CE]  possible  loss  of  precision	189	None	replace
645	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	135	1	add
646	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	135	1	add
647	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	135	1	add
648	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	135	1	add
649	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  this.runningState  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  this.runningState  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    this.runningState  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	non-compiled	[CE]  possible  loss  of  precision	135	None	add
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	135	1	add
651	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	135	1	add
652	[BUG]  [BUGGY]  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	117	None	replace
653	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	117	None	replace
654	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  not  a  statement	117	None	replace
655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	124	3	replace
656	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	124	3	replace
657	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	124	3	replace
659	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	124	3	replace
660	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
661	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	133	None	add
662	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  startTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
663	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	133	None	add
664	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  time  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  time  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  time  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
665	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	174	None	add
666	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	174	None	add
667	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	174	5	add
668	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	174	5	add
669	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	174	None	add
670	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
671	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
673	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
674	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	1	None	add
675	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
676	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
677	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	1	None	add
678	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  System.currentTimeMillis()  /  startTime;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    System.currentTimeMillis()  /  startTime;	  	non-compiled	[CE]  not  a  statement	47	None	add
679	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    startTime;    stopTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
680	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    stopTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
681	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  this.runningState  =  System.currentTimeMillis()  /  startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  this.runningState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    this.runningState  =  System.currentTimeMillis()  /  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
682	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  int  startTime  =  System.currentTimeMillis()  /  startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  int  startTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    int  startTime  =  System.currentTimeMillis()  /  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
683	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  startTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    startTime;    startTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	47	4	add
684	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  startTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  startTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    startTime  =  System.currentTimeMillis()  /  startTime;	  	compilable	  [FE]  AssertionFailedError  	47	4	add
685	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    10000;    stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
686	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
687	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  this.runningState  =  System.currentTimeMillis()  /  10000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  this.runningState  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    this.runningState  =  System.currentTimeMillis()  /  10000;	  	non-compiled	[CE]  possible  loss  of  precision	57	None	add
688	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  System.currentTimeMillis()  /  10000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    System.currentTimeMillis()  /  10000;	  	non-compiled	[CE]  not  a  statement	57	None	add
689	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  int  startTime  =  System.currentTimeMillis()  /  10000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  int  startTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    int  startTime  =  System.currentTimeMillis()  /  10000;	  	non-compiled	[CE]  possible  loss  of  precision	57	None	add
690	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  10000;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  10000;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  10000;  }	  	non-compiled	[CE]  not  a  statement	57	None	add
691	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
692	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
693	[BUG]  [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
694	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  this.runningState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	48	1	replace
695	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  this.runningState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	48	1	replace
696	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  startTime;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	48	4	replace
697	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  startTime;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	48	4	replace
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  this.runningState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	48	1	replace
699	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  this.runningState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  this.runningState;	  stopTime    =    System.currentTimeMillis()    /    startTime;    	compilable	  [FE]  AssertionFailedError  	48	1	replace
700	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
701	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
703	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
705	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
706	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
707	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
708	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	166	None	add
709	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	166	None	add
710	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	166	None	add
711	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	166	None	add
712	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	166	None	add
713	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
714	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
715	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
716	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
718	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	4	replace
719	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	9	3	replace
720	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	9	3	replace
721	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	170	1	add
722	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	170	1	add
723	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	170	1	add
724	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	170	1	add
725	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	170	1	add
726	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	170	1	add
727	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	170	1	add
728	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    this.runningState    =    STATE_SUSPENDED;    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	170	1	add
729	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    this.runningState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	93	None	replace
730	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
731	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  /  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
733	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
735	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
736	[BUG]  [BUGGY]  stopTime  =  this.runningState.currentTimeMillis()  -  System.currentTimeMillis();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  this.runningState.currentTimeMillis()  -  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  this.runningState.currentTimeMillis()  -  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	non-compiled	[CE]  int  cannot  be  dereferenced	46	None	replace
737	[BUG]  [BUGGY]  int  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	137	None	replace
738	[BUG]  [BUGGY]  int  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	137	None	replace
739	[BUG]  [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	137	None	replace
740	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	72	None	add
741	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	72	1	add
742	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	72	1	add
743	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	72	None	add
744	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	72	None	add
745	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	7	3	replace
746	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	7	3	replace
747	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	7	3	replace
748	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	7	3	replace
749	[BUG]  [BUGGY]  minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  minute  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  cannot  find  symbol  minute	142	None	replace
750	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    1;    stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	130	1	add
751	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	130	1	add
752	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    this.runningState  =  System.currentTimeMillis()  /  1;	  	non-compiled	[CE]  possible  loss  of  precision	130	None	add
753	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    System.currentTimeMillis()  /  1;	  	non-compiled	[CE]  not  a  statement	130	None	add
754	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  int  startTime  =  System.currentTimeMillis()  /  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  int  startTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    int  startTime  =  System.currentTimeMillis()  /  1;	  	non-compiled	[CE]  possible  loss  of  precision	130	None	add
755	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  2;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  this.runningState  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    this.runningState  =  System.currentTimeMillis()  /  2;	  	non-compiled	[CE]  possible  loss  of  precision	130	None	add
756	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	startTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	38	4	replace
757	[BUG]  [BUGGY]  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	startTime  =  System.currentTimeMillis();  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	38	4	replace
758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
759	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
760	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	12	None	add
761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
762	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
764	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
765	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S	  	non-compiled	[CE]  ';'  expected	12	None	add
766	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.runningState;    long  stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	45	1	add
767	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    long  stopTime  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	45	1	add
768	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  int  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  int  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    int  startTime  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	45	None	add
769	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
770	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
771	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(this.runningState);	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
772	[BUG]  [BUGGY]  System.err.println(this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(this.runningState);	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
773	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
774	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	101	3	replace
775	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	101	3	replace
776	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
777	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
778	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	81	1	add
779	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	81	1	add
780	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running:n "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running:n "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	82	3	replace
781	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running:n "  +  this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running:n "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running:n "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	82	3	replace
782	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
783	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
784	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
785	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
786	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	165	3	replace
787	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    1000L;    long  stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	55	4	add
788	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  long  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000L;    long  stopTime  =  System.currentTimeMillis()  /  1000L;	  	compilable	  [FE]  AssertionFailedError  	55	4	add
789	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
790	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
791	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.splitState  =  System.currentTimeMillis();	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    	non-compiled	[CE]  possible  loss  of  precision	162	None	replace
792	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  not  a  statement	141	None	add
793	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
794	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
795	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
796	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
797	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  long  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    1;    long  stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	130	1	add
798	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  long  stopTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  long  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    long  stopTime  =  System.currentTimeMillis()  /  1;	  	compilable	  [FE]  AssertionFailedError  	130	1	add
799	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1;    System.currentTimeMillis()  /  2;	  	non-compiled	[CE]  not  a  statement	130	None	add
800	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  long  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    2;    long  stopTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	186	4	add
801	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  long  stopTime  =  System.currentTimeMillis()  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  long  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    2;    long  stopTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	186	4	add
802	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    int    startTime    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	121	None	replace
803	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
804	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  this.startTime  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  long  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    *    1;    long  stopTime  =  System.currentTimeMillis()  *  1;	  	compilable	  [FE]  AssertionFailedError  	83	1	add
806	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  long  stopTime  =  System.currentTimeMillis()  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  long  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    long  stopTime  =  System.currentTimeMillis()  *  1;	  	compilable	  [FE]  AssertionFailedError  	83	1	add
807	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.currentTimeMillis()  *  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.currentTimeMillis()  *  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    System.currentTimeMillis()  *  2;	  	non-compiled	[CE]  not  a  statement	83	None	add
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    *    1;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	83	1	add
809	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	83	1	add
810	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
811	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
812	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
813	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	4	3	replace
814	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	110	1	replace
815	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	110	1	replace
816	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	110	1	replace
817	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	110	1	replace
818	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
819	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
820	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
821	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
822	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
823	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
824	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
825	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
826	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
827	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
829	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
831	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
832	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
833	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime  ==  System.currentTimeMillis())  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
834	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	33	None	add
835	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	33	None	add
836	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  Long  startTime  =  System.currentTimeMillis()  -  2;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  Long  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    Long  startTime  =  System.currentTimeMillis()  -  2;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	188	None	add
837	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  runTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long    startTime    =    System.currentTimeMillis()    -    2;    long  runTime  =  System.currentTimeMillis()  -  2;	  	compilable	  [FE]  AssertionFailedError  	188	1	add
838	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  runTime  =  System.currentTimeMillis()  -  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  runTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    long  runTime  =  System.currentTimeMillis()  -  2;	  	compilable	  [FE]  AssertionFailedError  	188	1	add
839	[BUG]  [BUGGY]  this.runningState  =  STATE_STARTED;  [CE]  cannot  find  symbol  STATE_STARTED  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_STARTED;	  this.runningState    =    STATE_UNSPLIT;    	non-compiled	[CE]  cannot  find  symbol  STATE_STARTED	181	None	replace
840	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  not  a  statement	145	None	add
841	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  length  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  length  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  length  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	145	None	add
842	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	145	None	add
843	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	139	3	add
844	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	139	3	add
845	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	139	None	add
846	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    Long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	139	None	add
847	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long    stopTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	139	3	add
848	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	139	3	add
849	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	4	add
850	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	4	add
851	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  StopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    StopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  cannot  find  symbol  StopTime	18	None	add
852	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  1000L  +  1;	  stopTime    =    System.currentTimeMillis()    /    1000L;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
853	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  1000L  +  1;	  stopTime    =    System.currentTimeMillis()    /    1000L;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
854	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	25	None	add
855	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
856	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	105	1	add
858	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	105	1	add
859	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
860	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	105	1	add
861	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
862	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
863	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	1	replace
864	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	92	1	replace
865	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  IllegalStateException  	92	5	replace
866	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }	  stopTime    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  IllegalStateException  	92	5	replace
867	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
868	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
869	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
870	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
871	[BUG]  [BUGGY]  tate  <  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  tate  <  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	137	None	replace
872	[BUG]  [BUGGY]  tate  <  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  tate  <  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	137	None	replace
873	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	46	1	replace
874	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  this.runningState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	46	1	replace
875	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
876	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
877	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
878	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
879	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
880	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
881	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
882	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
883	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	1	replace
884	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	1	replace
885	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    -    1;    long    splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	183	None	replace
886	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
887	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
888	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
889	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
890	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	1	None	add
891	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this	  	non-compiled	[CE]  not  a  statement	1	None	add
892	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
893	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
894	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
895	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
896	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
897	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
899	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
900	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  2  +  1;	  stopTime    =    System.currentTimeMillis()    /    2;    	compilable	  [FE]  AssertionFailedError  	187	4	replace
901	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  2  +  1;	  stopTime    =    System.currentTimeMillis()    /    2;    	compilable	  [FE]  AssertionFailedError  	187	4	replace
902	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
903	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
904	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
905	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
906	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
907	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis()    +    1;    stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
908	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
909	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
910	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
911	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	50	1	replace
912	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  this.splitState  +  1;	  stopTime    =    System.currentTimeMillis()    -    this.splitState;    	compilable	  [FE]  AssertionFailedError  	50	1	replace
913	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	172	4	add
914	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	172	4	add
915	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	172	None	add
916	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  not  a  statement	172	None	add
917	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	172	None	add
918	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
919	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	111	1	add
920	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	72	None	add
921	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	1	replace
922	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	153	1	replace
923	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
924	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  length  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  long  length  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  length  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
925	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
926	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
928	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	113	1	add
929	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	89	1	add
930	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println();  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println();    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	89	1	add
931	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
932	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
933	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
934	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
935	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	10	None	add
936	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	178	1	add
937	[BUG]  [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	178	1	add
938	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  int  startTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    System.err.println(   "Stopwatch  is  not  running.     ");  int  startTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        System.err.println(   "Stopwatch    is    not    running.       ");    int  startTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	non-compiled	[CE]  possible  loss  of  precision	143	None	add
939	[BUG]  [BUGGY]  tate  <  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  tate  <  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	138	None	replace
940	[BUG]  [BUGGY]  tate  <  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  tate  <  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	138	None	replace
941	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
942	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
944	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
945	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
946	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
948	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
949	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
950	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
951	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	4	add
952	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	180	4	add
953	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
954	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
955	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
956	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
957	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  Long  startTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  Long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    Long  startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	43	None	add
958	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
959	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  Long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  Long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    Long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
960	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	166	None	add
961	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
962	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	31	5	add
963	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	31	5	add
964	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
965	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
966	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
967	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
968	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
969	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
970	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
971	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
972	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	4	add
973	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	4	add
974	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
975	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  Long  startTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  Long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    1;    Long  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	41	None	add
976	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long    startTime    =    System.currentTimeMillis()    -    1;    long  runTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
977	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    1;    long  runTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
978	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	100	None	replace
979	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	100	3	replace
980	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	100	3	replace
981	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not	  	non-compiled	[CE]  unclosed  string  literal	68	None	add
982	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  2;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
983	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  2;	  stopTime    =    System.currentTimeMillis()    -    1L;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
984	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
985	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startedTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	27	1	add
986	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startedTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	27	1	add
987	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	175	5	replace
988	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	175	5	replace
989	[BUG]  [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	safeThan  <  =  false)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	175	None	replace
990	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
991	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	29	5	add
992	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	29	5	add
993	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	29	None	add
994	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
995	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
996	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
997	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
998	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	3	None	add
999	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this	  	non-compiled	[CE]  not  a  statement	3	None	add
1000	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
1001	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
1002	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
1003	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
1004	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	95	3	replace
1005	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  -  1;  long  startTime  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    int    startTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	95	3	replace
1006	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1007	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1008	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1009	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1010	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1011	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1012	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1013	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1014	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
1015	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	108	4	replace
1016	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  startTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	49	1	add
1017	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  startTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  startTime  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	49	1	add
1018	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  long  startTime  =  System.currentTimeMillis()  /  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  long  startTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    startTime;    long  startTime  =  System.currentTimeMillis()  /  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	47	None	add
1019	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	151	1	replace
1020	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	151	1	replace
1021	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	151	None	replace
1022	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000L;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState    =    System.currentTimeMillis()    /    1000;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
1023	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported! ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopping  is  not  supported! ");	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
1024	[BUG]  [BUGGY]  System.err.println( "Stopping  is  not  supported! ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported! ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopping  is  not  supported! ");	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
1025	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	148	None	add
1026	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1027	[BUG]  [BUGGY]  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1028	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
1029	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	154	1	add
1030	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	154	1	add
1031	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    splitState    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	177	4	replace
1032	[BUG]  [BUGGY]  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    long    splitState    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	177	4	replace
1033	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	75	5	add
1034	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_SUSPENDED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	75	5	add
1035	[BUG]  [BUGGY]  [FE]    [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	Thread.currentThread().interrupt();	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]    	32	3	replace
1036	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [FE]    [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	Thread.currentThread().interrupt();	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]    	32	3	replace
1037	[BUG]  [BUGGY]  SecuritySystem.err.println( "Stopwatch  is  not  running.   ");  [CE]  package  SecuritySystem  does  not  exist  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  SecuritySystem.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	SecuritySystem.err.println( "Stopwatch  is  not  running.   ");	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  package  SecuritySystem  does  not  exist	32	None	replace
1038	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STARTED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_STARTED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_STARTED)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING)    {    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1039	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	39	3	replace
1040	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	39	3	replace
1041	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
1042	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    long    stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	146	3	replace
1043	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println();  this.runningState  =  STATE_SUSPENDED;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	171	3	replace
1044	[BUG]  [BUGGY]  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println();  this.runningState  =  STATE_SUSPENDED;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	171	3	replace
1045	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	184	5	add
1046	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	184	5	add
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	85	1	add
1048	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running.     ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running.       ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println();	  	compilable	  [FE]  AssertionFailedError  	85	1	add
1049	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1050	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1052	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1053	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    splitState    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	182	None	add
1054	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	  	non-compiled	[CE]  unclosed  string  literal	174	None	add
1055	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	174	None	add
1056	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1057	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1058	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	4	replace
1059	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	4	replace
1060	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1061	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1062	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    *    1000;    long  stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	53	4	add
1063	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    long  stopTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	53	4	add
1064	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    startTime    =    System.currentTimeMillis();    long    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	126	None	replace
1065	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
1066	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
1067	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  endTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  endTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  endTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	150	None	add
1068	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  int  startTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    System.err.println(   "Stopwatch  is  not  running.     ");  int  startTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        System.err.println(   "Stopwatch    is    not    running.       ");    int  startTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");	  	non-compiled	[CE]  possible  loss  of  precision	135	None	add
1069	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println();  this.runningState  =  STATE_RUNNING;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	169	3	replace
1070	[BUG]  [BUGGY]  System.err.println();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println();  this.runningState  =  STATE_RUNNING;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	169	3	replace
1071	[BUG]  [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	safeThan  <  =  false)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
1072	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
1073	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
1074	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
1075	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
1076	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
1077	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
1078	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	4	replace
1079	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	76	4	replace
1080	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	107	None	add
1081	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	107	4	add
1082	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	107	4	add
1083	[BUG]  [BUGGY]  This.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  This.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	This.runningState  =  STATE_SUSPENDED;	  This.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  cannot  find  symbol  This	147	None	replace
1084	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	117	4	replace
1085	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime  =  System.currentTimeMillis()  -  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	117	4	replace
1086	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    10000;    long  stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	57	4	add
1087	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    long  stopTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	57	4	add
1088	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    1L;    long  stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
1089	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  stopTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    long  stopTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
1090	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1091	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1092	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1093	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1094	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1095	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime    =    System.currentTimeMillis();    if(this.stopTime!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1096	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	81	1	add
1097	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running:   "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	81	1	add
1098	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	45	1	add
1099	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	compilable	  [FE]  AssertionFailedError  	45	1	add
1100	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  int  startTime  =  System.currentTimeMillis()  *  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  int  startTime  =  System.currentTimeMillis()  *  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1;    int  startTime  =  System.currentTimeMillis()  *  1;	  	non-compiled	[CE]  possible  loss  of  precision	83	None	add
1101	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	68	None	add
1102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	68	1	add
1103	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	68	1	add
1104	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   "  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	68	None	add
1105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	68	1	add
1106	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	68	1	add
1107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis()  -  startTime;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	3	replace
1108	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis()  -  startTime;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	3	replace
1109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	49	1	add
1110	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  long  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    long  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	compilable	  [FE]  AssertionFailedError  	49	1	add
1111	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  splitState  =  System.currentTimeMillis()  -  this.splitState;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  int  splitState  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    this.splitState;    int  splitState  =  System.currentTimeMillis()  -  this.splitState;	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
1112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
1113	[BUG]  [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopwatch  is  not  running.     "  +  this.runningState);  System.err.println();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    System.err.println();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
1114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1115	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  long  startTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    2;    long  startTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1117	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  long  startTime  =  System.currentTimeMillis()  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  long  startTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    2;    long  startTime  =  System.currentTimeMillis()  /  2;	  	compilable	  [FE]  AssertionFailedError  	186	1	add
1118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running. ");  }	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	86	3	replace
1119	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running. ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running. ");  }	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println(   "Stopwatch    is    not    running.       ");    	compilable	  [FE]  AssertionFailedError  	86	3	replace
1120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
1121	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    long    startTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	122	3	replace
1122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
1123	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	28	3	replace
1124	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    -    2;    long  startTime  =  System.currentTimeMillis()  -  2;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	188	None	add
1125	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    int  runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
1126	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  STATE_UPSTARTED  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_UPSTARTED	8	None	add
1127	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
1128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
1129	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
1130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  startTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    *    1000;    long  startTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
1131	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  startTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  long  startTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    *    1000;    long  startTime  =  System.currentTimeMillis()  *  1000;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
1132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	4	replace
1133	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	149	4	replace
1134	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	139	None	add
1135	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	139	None	add
1136	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	109	None	add
1137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
1138	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	109	1	add
1139	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
1140	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    double  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
1141	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  double  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	66	None	add
1142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	4	add
1143	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	18	4	add
1144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  startTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    10000;    long  startTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
1145	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  startTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  long  startTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    10000;    long  startTime  =  System.currentTimeMillis()  /  10000;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
1146	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running: "  +  this.runningState,  this.runningState);  [CE]  no  suitable  method  found  for  println(String,int)  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running: "  +  this.runningState,  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running: "  +  this.runningState,  this.runningState);	  System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    	non-compiled	[CE]  no  suitable  method  found  for  println(String,int)	82	None	replace
1147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  running: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopping  is  not  running: "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	82	3	replace
1148	[BUG]  [BUGGY]  System.err.println( "Stopping  is  not  running: "  +  this.runningState);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  running: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopping  is  not  running: "  +  this.runningState);	  System.err.println(   "Stopwatch    is    not    running:   "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	82	3	replace
1149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  startTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    1L;    long  startTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
1150	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  startTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  long  startTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1L;    long  startTime  =  System.currentTimeMillis()  -  1L;	  	compilable	  [FE]  AssertionFailedError  	156	1	add
1151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1152	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1154	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1155	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	161	None	add
1156	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	161	None	add
1157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	105	1	add
1158	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	105	1	add
1159	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	105	None	add
1160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
1161	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	115	1	add
1162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	115	4	add
1163	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	115	4	add
1164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	3	replace
1165	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	3	replace
1166	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	29	5	add
1167	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	29	5	add
1168	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
1169	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    +    1;    this.runningState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
1170	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;  long  runTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    stopTime    =    System.currentTimeMillis()    /    1000;    long  runTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	145	None	add
1171	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.currentTimeMillis  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  currentTimeMillis  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.currentTimeMillis  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis();  this.currentTimeMillis  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()    +    1;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  currentTimeMillis	40	None	replace
1172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1173	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1175	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	152	1	add
1176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
1177	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_UNSPLIT;    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	180	1	add
1178	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1179	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1180	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1181	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiajs	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1183	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1184	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   "  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	63	None	add
1185	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
1186	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
1187	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	70	None	add
1188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
1189	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
1190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	27	1	add
1191	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	27	1	add
1192	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  splitState  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  splitState  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  splitState  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	172	None	add
1193	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  STATE_UNSTARTED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        /        1000;        long    startTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	172	None	add
1194	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	174	None	add
1195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1196	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1198	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	106	1	replace
1199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
1200	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	91	1	add
1201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running... ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running..   ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running... ");	  	compilable	  [FE]  AssertionFailedError  	87	1	add
1202	[BUG]  [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running... ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          System.err.println(     "Stopwatch    is    not    running.     ");    System.err.println(   "Stopwatch  is  not  running..   ");  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running... ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                System.err.println(       "Stopwatch        is        not        running.       ");        System.err.println(   "Stopwatch    is    not    running..   ");    System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running... ");	  	compilable	  [FE]  AssertionFailedError  	87	1	add
1203	[BUG]  [BUGGY]  this.runningState  =  stopTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  stopTime;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  stopTime;	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
1204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  }	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println(   "Stopwatch    is    not    running..   ");    	compilable	  [FE]  AssertionFailedError  	88	3	replace
1205	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  }	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println(   "Stopwatch    is    not    running..   ");    	compilable	  [FE]  AssertionFailedError  	88	3	replace
1206	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
1207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1208	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1209	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
1210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1211	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
1212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	101	3	replace
1213	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	101	3	replace
1214	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  runTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
1215	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  runningState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
1216	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        1;        long    stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	133	None	add
1217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  started. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  started. ");	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    	compilable	  [FE]  AssertionFailedError  	90	3	replace
1218	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  started. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  started. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  started. ");	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    	compilable	  [FE]  AssertionFailedError  	90	3	replace
1219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  supported. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  supported. ");	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    	compilable	  [FE]  AssertionFailedError  	90	3	replace
1220	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  supported. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  supported. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  supported. ");	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    	compilable	  [FE]  AssertionFailedError  	90	3	replace
1221	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	176	None	add
1222	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	176	None	add
1223	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
1224	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
1225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	100	3	replace
1226	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	100	3	replace
1227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
1228	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
1229	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_	  	non-compiled	[CE]  ')'  expected	1	None	add
1230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
1231	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
1232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
1233	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	107	4	add
1234	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  runTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	141	None	add
1235	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runningState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;  long  runningState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        long    stopTime    =    System.currentTimeMillis()    +    1;    long  runningState  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	141	None	add
1236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1237	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1239	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1241	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
1242	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
1243	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	12	None	add
1244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	113	1	add
1245	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	113	1	add
1246	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  int  runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	113	None	add
1247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  int  runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState    =    STATE_SUSPENDED;    int  runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	113	1	add
1248	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  int  runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  int  runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState    =    STATE_SUSPENDED;    int  runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	113	1	add
1249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
1250	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	119	1	add
1251	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;  int  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        -        startTime;        stopTime    =    System.currentTimeMillis()    -    startTime;    int  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	119	None	add
1252	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }	  	non-compiled	[CE]  <identifier>  expected	75	None	add
1253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.... ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.... ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1254	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.... ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.... ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.... ");  }	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1255	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	159	None	add
1256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1257	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1259	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1260	[BUG]  [BUGGY]  this.runningState  =  STATE_UPSTARTED;  [CE]  cannot  find  symbol  STATE_UPSTARTED  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_UPSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_UPSTARTED;	  this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  cannot  find  symbol  STATE_UPSTARTED	114	None	replace
1261	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
1262	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis()  -  1;	  stopTime    =    System.currentTimeMillis()    -    1;    long    splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	183	None	replace
1263	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	102	None	add
1264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1265	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopping  is  not  supported: "  +  this.runningState);	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
1267	[BUG]  [BUGGY]  System.err.println( "Stopping  is  not  supported: "  +  this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported: "  +  this.runningState);  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopping  is  not  supported: "  +  this.runningState);	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
1268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported: ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopping  is  not  supported: ");	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
1269	[BUG]  [BUGGY]  System.err.println( "Stopping  is  not  supported: ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopping  is  not  supported: ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopping  is  not  supported: ");	  System.err.println(   "Stopping    is    not    supported.   ");    	compilable	  [FE]  AssertionFailedError  	179	3	replace
1270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	72	1	add
1271	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	72	1	add
1272	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	72	None	add
1273	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	72	None	add
1274	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   "  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    >=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	72	None	add
1275	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	31	5	add
1276	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	31	5	add
1277	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	31	None	add
1278	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
1279	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis()  +  1;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  Long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	Long  startTime  =  System.currentTimeMillis()  +  1;	  stopTime    =    System.currentTimeMillis()    +    1;    int    startTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  incompatible  types	39	None	replace
1280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
1281	[BUG]  [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println(   "Stopping  is  not  supported.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println(   "Stopping    is    not    supported.   ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
1282	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	166	None	add
1283	[BUG]  [BUGGY]  Long  splitState  =  System.currentTimeMillis();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  Long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	Long  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  incompatible  types	24	None	replace
1284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  2L;	  stopTime    =    System.currentTimeMillis()    /    2;    	compilable	  [FE]  AssertionFailedError  	187	4	replace
1285	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  2L;	  stopTime    =    System.currentTimeMillis()    /    2;    	compilable	  [FE]  AssertionFailedError  	187	4	replace
1286	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	43	None	add
1287	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long    startTime    =    System.currentTimeMillis()    +    1;    long  startTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	43	None	add
1288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
1289	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
1290	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
1291	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	61	None	add
1292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
1293	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
1294	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	148	None	add
1295	[BUG]  [BUGGY]  this.runningState  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  tate    <    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
1296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	59	1	add
1297	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	59	1	add
1298	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  System.err.println( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
1299	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   "  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   "  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        System.err.println(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	59	None	add
1300	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  int  startTime  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	16	None	add
1301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1302	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  long  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1303	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  int  splitState  =  System.currentTimeMillis();  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    int  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	16	None	add
1304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1305	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_RUNNING;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1306	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	33	5	add
1307	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	33	5	add
1308	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	33	5	add
1309	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	33	5	add
1310	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..	  	non-compiled	[CE]  unclosed  string  literal	33	None	add
1311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.  Try  again. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running.  Try  again. ");	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
1312	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running.  Try  again. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  running.  Try  again. ");  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running.  Try  again. ");	  System.err.println(   "Stopwatch    is    not    running.       "    +    this.runningState);    	compilable	  [FE]  AssertionFailedError  	155	3	replace
1313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  started. ");  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  started. ");  this.runningState  =  STATE_SUSPENDED;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	171	3	replace
1314	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  started. ");  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  System.err.println( "Stopwatch  is  not  started. ");  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  started. ");  this.runningState  =  STATE_SUSPENDED;	          System.err.println(       "Stopwatch    is    not    running.       ");    System.err.println();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	171	3	replace
1315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	15	3	replace
1316	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	15	3	replace
1317	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SU	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
1318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
1319	[BUG]  [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }      [BUGGY]  stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime        =        System.currentTimeMillis()        +        1;        stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
