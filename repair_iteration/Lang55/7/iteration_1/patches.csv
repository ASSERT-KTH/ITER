bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
2	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
4	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
6	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
7	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  ';'  expected	7	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
9	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
11	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
13	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
15	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
17	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
19	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
20	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
21	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  not  a  statement	14	None	add
22	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  int  startTime  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  int  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    int  startTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
23	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  /  1000;  }	  	non-compiled	[CE]  not  a  statement	14	None	add
24	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  int  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	int  splitState  =  System.currentTimeMillis();	      long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	27	3	replace
26	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	27	3	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  splitState  =  System.currentTimeMillis()  -  startTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	27	3	replace
28	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  splitState  =  System.currentTimeMillis()  -  startTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	27	3	replace
29	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	1	add
30	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	1	add
31	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
32	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
33	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	5	1	add
34	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	5	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
36	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
37	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
38	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	12	None	add
39	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  int  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    int  startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
40	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	12	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  1;	      long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	3	replace
42	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  1;	      long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	3	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  +  1;	      long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	3	replace
44	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  +  1;	      long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	3	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
46	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
48	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
50	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
52	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	25	4	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
54	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
56	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
58	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
60	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
62	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
64	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  >=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
65	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis();  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  Long  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	Long  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  incompatible  types	9	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	double  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
67	[BUG]  [BUGGY]  double  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  double  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	double  startTime  =  System.currentTimeMillis();	      int    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
69	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
71	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
73	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  >=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	20	1	add
74	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	6	3	replace
76	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	6	3	replace
77	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING)  {  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
78	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopwatch  is  not  running.n ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running.n ");	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
80	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running.n ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopwatch  is  not  running.n ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running.n ");	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopwatch  is  not  running: "  +  this.runningState);  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running: "  +  this.runningState);	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
82	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running: "  +  this.runningState);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopwatch  is  not  running: "  +  this.runningState);  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running: "  +  this.runningState);	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  *  1;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
84	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  *  1;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	22	1	add
86	[BUG]  [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	22	1	add
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println( "Stopwatch  is  not  running.. ");	  	compilable	  [FE]  AssertionFailedError  	22	1	add
88	[BUG]  [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println( "Stopwatch  is  not  running.. ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println( "Stopwatch  is  not  running.. ");	  	compilable	  [FE]  AssertionFailedError  	22	1	add
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	22	1	add
90	[BUG]  [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println();	  	compilable	  [FE]  AssertionFailedError  	22	1	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
92	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
93	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    this.runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	10	None	add
94	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	10	None	add
95	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	10	None	add
96	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1;  }	  	non-compiled	[CE]  not  a  statement	10	None	add
97	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	26	None	add
98	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	26	None	add
99	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	26	None	add
100	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	26	None	add
101	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	26	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
103	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
104	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
106	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	4	add
108	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	4	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
110	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState  =  STATE_RUNNING;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
112	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_RUNNING;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState  =  STATE_SUSPENDED;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
114	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_SUSPENDED;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState  =  STATE_STOPPED;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
116	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_STOPPED;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
117	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  not  a  statement	24	None	add
118	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	24	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	24	1	add
120	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	24	1	add
121	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	24	None	add
122	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	24	None	add
123	[BUG]  [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	16	None	add
124	[BUG]  [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	16	None	add
125	[BUG]  [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	16	None	add
126	[BUG]  [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	16	None	add
127	[BUG]  [BUGGY]      long  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	16	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.stopTime  =  System.currentTimeMillis();	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
129	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.stopTime  =  System.currentTimeMillis();	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
131	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
132	[BUG]  [BUGGY]  this.runningState  =  STATE_UnSTARTED;  [CE]  cannot  find  symbol  STATE_UnSTARTED  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_UnSTARTED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_UnSTARTED;	      if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  cannot  find  symbol  STATE_UnSTARTED	8	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
134	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    1;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	10	1	add
136	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	10	1	add
137	[BUG]  [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
138	[BUG]  [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	tate  <  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  stopTime  =  System.currentTimeMillis();	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	3	replace
140	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  stopTime  =  System.currentTimeMillis();	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	3	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
142	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    long  stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    +    1;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	12	1	add
144	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.err.println( "Stopwatch  is  not  running.   ");  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    System.err.println( "Stopwatch  is  not  running.   ");	  	compilable	  [FE]  AssertionFailedError  	12	1	add
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	14	4	add
146	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    long  stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	14	4	add
147	[BUG]  [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  This  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	This.runningState  =  STATE_UNSTARTED;	      if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  cannot  find  symbol  This	8	None	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
149	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
151	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
153	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
155	[BUG]  [BUGGY]  System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopwatch  is  not  running.   "  +  this.runningState);	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  -  1L;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
157	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  -  1L;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
158	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  If(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  If(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    If(this.runningState!=  STATE_RUNNING)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	non-compiled	[CE]  	20	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
160	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
162	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
163	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  If(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  System.err.println(   "Stopwatch  is  not  running.     ");  }  If(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    System.err.println(   "Stopwatch    is    not    running.       ");    }    If(this.runningState!=  STATE_UNSTARTED)  {  System.err.println( "Stopwatch  is  not  running.   ");  }	  	non-compiled	[CE]  	18	None	add
164	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNStarTED;  }  [CE]  cannot  find  symbol  STATE_UNStarTED  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNStarTED;  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNStarTED;  }	  	non-compiled	[CE]  cannot  find  symbol  STATE_UNStarTED	7	None	add
165	[BUG]  [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  startTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      long  startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        long    startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  startTime  is  already  defined  in  method  stop()	16	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
167	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
169	[BUG]  [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_RUNNING;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
171	[BUG]  [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      System.err.println(   "Stopwatch  is  not  running.   ");  System.err.println();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        System.err.println(   "Stopwatch    is    not    running.   ");    System.err.println();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
173	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    long  startTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
174	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
175	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
177	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopping  is  not  supported. ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	System.err.println( "Stopping  is  not  supported. ");	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
179	[BUG]  [BUGGY]  System.err.println( "Stopping  is  not  supported. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  System.err.println( "Stopping  is  not  supported. ");  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	System.err.println( "Stopping  is  not  supported. ");	      System.err.println(   "Stopwatch    is    not    running.   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	this.runningState  =  STATE_UNSPLIT;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
181	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	this.runningState  =  STATE_UNSPLIT;	      this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
183	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
184	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	6	4	replace
185	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	6	4	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	stopTime  =  System.currentTimeMillis()  /  2;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
187	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	stopTime  =  System.currentTimeMillis()  /  2;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	15	4	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	add	long  startTime  =  System.currentTimeMillis()  -  2;	      long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	3	replace
189	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }    [BUGGY]  long  startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	118	118	1	replace	long  startTime  =  System.currentTimeMillis()  -  2;	      long    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	3	replace
