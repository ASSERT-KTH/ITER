bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
2	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
4	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
6	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	90	1	add
8	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	90	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
10	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
11	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
12	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
13	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
16	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
17	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	100	2	add
19	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	100	2	add
20	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	100	2	add
21	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	100	2	add
22	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	100	2	add
23	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	100	2	add
24	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	100	None	add
25	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
26	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
27	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	int  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis()    -    1;    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
28	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_SPLIT;	  this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
29	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
30	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
31	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
32	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
33	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
35	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
37	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
39	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
41	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
43	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
44	[BUG]  [BUGGY]  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
45	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
47	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
48	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
49	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
50	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
51	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
52	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
53	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
55	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
56	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	30	None	add
57	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
58	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
59	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
60	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	102	None	add
61	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	102	2	add
62	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	102	2	add
63	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	102	2	add
64	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	102	2	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  RuntimeException  	102	2	add
66	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [FE]  RuntimeException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  RuntimeException  	102	2	add
67	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  RuntimeException  	102	2	add
68	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [FE]  RuntimeException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  RuntimeException  	102	2	add
69	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  1;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  /  1;	  this.startTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
70	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
71	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
72	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
73	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_UNSTARTED;    	non-compiled	[CE]  ';'  expected	99	None	replace
74	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
75	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
76	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
77	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
78	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	97	None	replace
79	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;	  this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
80	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
81	[BUG]  [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	Stopwatch.this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
82	[BUG]  [BUGGY]  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
83	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  /  stopTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
84	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  -  STATE_RUNNING;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
85	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  -  startTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
86	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
87	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
88	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
89	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  int    splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
90	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  int    splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
92	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
94	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
96	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
98	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
100	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
101	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	82	None	replace
102	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	82	None	replace
103	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
104	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
105	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
106	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	58	2	add
107	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	58	2	add
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
109	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
110	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	58	2	add
111	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	58	2	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	58	1	add
113	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	58	1	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
115	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
116	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	52	2	add
117	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	52	2	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
119	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
120	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	52	2	add
121	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	52	2	add
122	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
123	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	52	2	add
124	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	52	2	add
125	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
126	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
127	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
128	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	int  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
129	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  }	  long    splitState    =    System.currentTimeMillis();    this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
131	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
132	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
133	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
134	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
135	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
137	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
138	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	55	2	add
139	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	55	2	add
140	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
141	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	112	None	add
142	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	112	None	add
143	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	112	None	add
144	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	112	None	add
145	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	112	None	add
146	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
147	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
148	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
149	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
150	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
151	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
152	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
153	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
154	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
155	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
156	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  STATE_SUSPENDED;	  this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
157	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	91	None	replace
158	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
159	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
160	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
161	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
162	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
163	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
164	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
165	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
166	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
167	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
168	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
169	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
170	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
171	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	103	None	replace
172	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
173	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
174	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
175	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
176	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
177	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
178	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
179	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
180	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
181	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
182	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	72	1	add
184	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	72	1	add
185	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STAPPED;  [CE]  cannot  find  symbol  STATE_STAPPED  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STAPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STAPPED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_STAPPED	72	None	add
186	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
187	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
188	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
189	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
190	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
191	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
192	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  possible  loss  of  precision  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	non-compiled	[CE]  possible  loss  of  precision	65	None	add
193	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
194	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
195	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
196	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
197	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
198	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis()  /  1;	  stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
200	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
202	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
204	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
205	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	96	None	add
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	96	1	add
207	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	96	1	add
208	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
209	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
210	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
211	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
212	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
213	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
214	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
215	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
216	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  stopTime;  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
217	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  /  startTime;  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
218	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.runningState;  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
219	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
220	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
221	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
222	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
223	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
224	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
225	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
226	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  else  {  throw  new  IllegalStateException( " ");  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
227	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	28	2	add
228	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	28	2	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
230	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
232	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
233	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	28	2	add
234	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	28	2	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
236	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
238	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
240	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
242	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
244	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
246	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
248	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
250	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
252	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	104	2	add
254	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	104	2	add
255	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
256	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
257	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
258	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
260	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
261	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  possible  loss  of  precision	98	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
263	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
265	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	98	1	add
267	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	98	1	add
268	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
269	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
270	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  stopTime;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  System.currentTimeMillis()  /  stopTime;	  this.splitState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
271	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_STOPPED;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  System.currentTimeMillis()  -  STATE_STOPPED;	  this.splitState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
272	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  System.currentTimeMillis()  -  startTime;	  this.splitState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
273	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
274	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
275	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
276	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
277	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
278	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
280	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
281	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
282	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
283	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
284	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
285	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
286	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
287	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
288	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
289	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
290	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
291	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
292	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
293	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
294	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
296	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
297	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  System.currentTimeMillis()  +  1;	  this.splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
298	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
299	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
301	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
303	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
304	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
306	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
308	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
309	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
311	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
313	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
315	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
316	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
318	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
319	[BUG]  [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
320	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
321	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
322	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
323	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
324	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
325	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
326	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
327	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
328	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
329	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
330	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  stopTime;	  long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
331	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  int  splitState  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	int  splitState  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
332	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;	  long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
334	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
336	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
338	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	36	1	add
340	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	36	1	add
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
342	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
344	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
346	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
348	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
349	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
350	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
351	[BUG]  [BUGGY]  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
352	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
353	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
354	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
355	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
357	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
358	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	76	2	add
359	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	76	2	add
360	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
361	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
362	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
363	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
364	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
365	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
366	[BUG]  [BUGGY]  int  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  int  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	int  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	non-compiled	[CE]  not  a  statement	47	None	replace
367	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
369	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
371	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
373	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
375	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	94	2	add
377	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	94	2	add
378	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
379	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
380	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
381	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
382	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  else  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  else  {  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  else  {	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
383	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	70	None	replace
384	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
386	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
387	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	60	None	add
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	2	add
389	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	2	add
390	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
392	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
393	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
394	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;	          this.runningState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
395	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_SPLIT;	          this.runningState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
396	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	37	None	replace
397	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
398	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
399	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	43	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
401	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
403	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
405	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
407	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
409	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
410	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
411	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
412	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
413	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
414	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
415	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
416	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
417	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
418	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
419	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
420	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	55	2	add
421	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	55	2	add
422	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	55	2	add
423	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	55	2	add
424	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	105	None	replace
425	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	105	None	replace
426	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
427	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	98	None	add
428	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
429	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
430	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
431	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
432	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
433	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [CE]  unclosed  string  literal  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
434	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
435	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	39	None	replace
436	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
437	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
438	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
439	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
440	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
441	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
442	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  stopTime  =  System.currentTimeMillis();  long  splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  stopTime  =  System.currentTimeMillis();  long  splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
443	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
444	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	95	None	replace
445	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	95	None	replace
446	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
447	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
448	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  ';'  expected	77	None	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
450	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
452	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	41	1	add
454	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	41	1	add
455	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	41	None	add
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
457	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
459	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	36	1	add
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
461	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
463	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
464	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	16	None	add
465	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
466	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
467	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
468	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
469	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	96	None	add
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
471	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
472	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	82	None	replace
473	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
474	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	40	None	replace
475	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	106	None	replace
476	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	106	None	replace
477	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	106	None	replace
478	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	10	None	replace
479	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
480	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  *  startTime;  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  *  startTime;  stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  *  startTime;  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis()    -    startTime;    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
481	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
482	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
483	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
484	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	14	None	replace
485	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  if(this.splitState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
486	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
487	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
488	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
489	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
490	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
492	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
494	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
495	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
496	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
497	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
498	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
499	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
500	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
501	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	118	2	add
502	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	118	2	add
503	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
504	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
505	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	118	None	add
506	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
507	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	118	2	add
508	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	72	2	add
509	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	72	2	add
510	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
511	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
512	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
513	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  IllegalStateException  	72	2	add
514	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
515	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
516	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_SPLIT)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
517	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
518	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
519	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
520	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
521	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
522	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
523	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
524	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
526	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
528	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
530	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
531	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
532	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
533	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
534	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
535	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
536	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
537	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
538	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	28	2	add
539	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	28	2	add
540	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	28	2	add
541	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	28	2	add
542	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	28	2	add
543	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	28	2	add
544	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	102	2	add
545	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	102	2	add
546	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	102	2	add
547	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	102	2	add
548	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
549	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
550	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
551	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
552	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPP  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPP  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
553	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPP  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPP  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "StoPP  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
554	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  this.stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
555	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	59	None	replace
556	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	59	None	replace
557	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
558	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
559	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
560	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]        [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  startTime;	  long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
561	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
562	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
563	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	9	1	add
565	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	9	1	add
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
567	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
568	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
569	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
570	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	34	2	add
571	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	34	2	add
572	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
573	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
574	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	34	2	add
575	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	34	2	add
576	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
577	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
578	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	30	2	add
579	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	30	2	add
580	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
581	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
582	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	30	None	add
583	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
584	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
585	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
586	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
587	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
588	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
589	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
590	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
591	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
592	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
593	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
594	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
595	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
596	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
597	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	100	2	add
598	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	100	2	add
599	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	94	None	add
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
601	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
602	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	103	None	replace
603	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
604	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	103	None	replace
605	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	103	None	replace
606	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	37	None	replace
607	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	76	None	add
608	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
609	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	76	2	add
610	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
611	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	42	None	replace
612	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	11	1	add
614	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	11	1	add
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
616	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
617	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
618	[BUG]  [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
619	[BUG]  [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
620	[BUG]  [BUGGY]  stoppingTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  stoppingTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stoppingTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
621	[BUG]  [BUGGY]  StopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  StopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	StopTime  =  System.currentTimeMillis();	  stopTime    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
622	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	91	None	replace
623	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
624	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	91	None	replace
625	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	32	2	add
626	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	32	2	add
627	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	32	None	add
628	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	32	2	add
629	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	32	2	add
630	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	32	2	add
631	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	32	2	add
632	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	32	2	add
633	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	32	2	add
634	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
635	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
636	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	83	None	replace
637	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
638	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.split  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.split  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.split	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
639	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
640	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
641	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
642	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
643	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	116	2	add
644	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	116	2	add
645	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
646	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	116	2	add
647	[BUG]  [BUGGY]  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspend.   ");  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspend.   ");  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	throw  new  IllegalStateException( "StoPPED  must  be  running  to  suspend.   ");	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
648	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState);  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   "  +  this.runningState);	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
649	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	52	2	add
650	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	52	2	add
651	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
652	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	90	1	add
653	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	104	None	add
654	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	104	2	add
655	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	104	2	add
656	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
657	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
658	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	38	None	add
659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
660	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
661	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
662	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	74	2	add
663	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	74	2	add
664	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
665	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
666	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
667	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
668	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
669	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
670	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
671	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
672	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_S  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	15	None	replace
673	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	72	2	add
674	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	72	2	add
675	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
676	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSPLIT;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.splitState  =  STATE_UNSPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  STATE_UNSPLIT;	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
677	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_UNSPLIT;	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
679	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	16	1	add
680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	104	2	add
681	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	104	2	add
682	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
683	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	2	add
685	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	11	2	add
686	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
687	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSPLIT)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
688	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
689	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	55	None	add
690	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
691	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	55	2	add
692	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
693	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  IllegalStateException  	100	2	add
694	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
695	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
696	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
697	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  ';'  expected	77	None	replace
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
699	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
700	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
701	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	38	1	add
702	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
703	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
705	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
706	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
707	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  Try  again. ");  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  Try  again. ");  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  Try  again. ");	  throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
708	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=    STATE_SPLIT)    {    this.splitState    =    STATE_SPLIT;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
709	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
710	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
711	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
712	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
713	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState    ==    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
714	[BUG]  [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
715	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
716	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	94	2	add
717	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	94	2	add
718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
719	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	94	2	add
720	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
721	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
722	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
723	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
724	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
725	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
726	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "SplitState  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "SplitState  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
727	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "SplitState  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "SplitState  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "SplitState  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
728	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
729	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	65	2	add
730	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
731	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	30	2	add
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
733	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
734	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis()  -  1L;	  stopTime    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
735	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
736	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
737	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
738	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.splitState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	74	2	add
739	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
740	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	1	add
741	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	2	add
742	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_UNSTARTED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	98	2	add
743	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
744	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	96	1	add
745	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	91	None	replace
746	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	91	None	replace
747	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
748	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
749	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
750	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
751	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	102	None	add
752	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	102	None	add
753	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	102	None	add
754	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	36	None	add
755	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
756	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
757	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	90	None	add
758	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
759	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
760	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
761	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	34	2	add
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
763	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
764	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
765	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
766	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	34	None	add
767	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  if(splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
768	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	52	2	add
769	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	52	2	add
770	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
771	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;	          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(       "Stopwatch    must    be    running    to    suspend.           ");    }    if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
772	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
773	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
774	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
775	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspension.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspension.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
776	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  if(splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
777	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
778	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
779	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	110	None	add
780	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	112	None	add
781	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	112	None	add
782	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	9	None	add
783	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
784	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
785	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
786	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
787	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
788	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
789	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
790	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	32	2	add
791	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
792	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(     "Stopwatch    must    be    running    to    suspend.         ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        throw        new        IllegalStateException(       "Stopwatch        must        be        running        to        suspend.               ");        }        if(this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.	  	non-compiled	[CE]  unclosed  string  literal	79	None	add
