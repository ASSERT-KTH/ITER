bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
2	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
3	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	4	add
5	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	4	add
6	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  Stopwatch.this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  Stopwatch.this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
7	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
9	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
11	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
13	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
14	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
16	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  -  1;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
18	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  -  1;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  +  1;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
20	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  +  1;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  /  1000;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
22	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  /  1000;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
23	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  -  1;	      this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
24	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  +  1;	      this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.splitState  =  STATE_RUNNING;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState  =  STATE_RUNNING;	      this.splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	13	1	replace
26	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.splitState  =  STATE_RUNNING;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  STATE_RUNNING;	      this.splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	13	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	7	4	add
28	[BUG]  [BUGGY]      this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	7	4	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
30	[BUG]  [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
32	[BUG]  [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
34	[BUG]  [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
36	[BUG]  [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis()  -  1;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
38	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis()  -  1;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis()  +  1;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
40	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis()  +  1;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis()  -  2;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
42	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis()  -  2;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
44	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
46	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
48	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
50	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
51	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	5	add
52	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	3	5	add
53	[BUG]  [BUGGY]  this.runningState  =  STATE_UnSTARTED;  [CE]  cannot  find  symbol  STATE_UnSTARTED  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_UnSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_UnSTARTED;	      if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  cannot  find  symbol  STATE_UnSTARTED	10	None	replace
54	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SPLIT;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_SPLIT;	      this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  RuntimeException  	6	4	replace
55	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SPLIT;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_SPLIT;	      this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  RuntimeException  	6	4	replace
56	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	15	5	replace
57	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	15	5	replace
58	[BUG]  [BUGGY]  stopTime!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  not  a  statement	15	None	replace
59	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	15	5	replace
60	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	15	5	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
62	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
64	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
66	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
68	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	4	add
70	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	4	add
71	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
72	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
73	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
74	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
76	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
78	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
80	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
82	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
84	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
85	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
86	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
87	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
88	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
89	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    int  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
91	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  +  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
93	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  +  1;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
94	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  int  splitState  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();	      long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
96	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
98	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
100	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
101	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  incompatible  types	9	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
103	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	4	replace
105	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	4	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
107	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
108	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
110	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
111	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  -  startTime;	      this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  stopTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
113	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  stopTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  stopTime  =  System.currentTimeMillis();	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
115	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  stopTime  =  System.currentTimeMillis();	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
117	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
119	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
121	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
123	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
125	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
126	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	1	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
128	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	4	add
130	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	4	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
132	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
133	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  ';'  expected	9	None	add
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
135	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
137	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
138	[BUG]  [BUGGY]  float  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  float  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	float  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;	      long    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
139	[BUG]  [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  This  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	This.runningState  =  STATE_UNSTARTED;	      if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  cannot  find  symbol  This	10	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	5	replace
141	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	5	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	5	replace
143	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	5	replace
144	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
145	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	14	5	add
146	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
147	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
149	[BUG]  [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
150	[BUG]  [BUGGY]  this.runningState  =  STATE_UNISTARTED;  [CE]  cannot  find  symbol  STATE_UNISTARTED  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_UNISTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_UNISTARTED;	      if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  cannot  find  symbol  STATE_UNISTARTED	10	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
152	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
154	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  startTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
156	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  startTime;	      long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	17	1	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	5	replace
158	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	20	5	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
160	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
162	[BUG]  [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis()  -  stopTime;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
164	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis()  -  stopTime;	      this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	8	4	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
166	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
168	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  -  startTime;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
170	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  -  startTime;	      stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
171	[BUG]  [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]      long  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	        long    splitState    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	16	None	add
172	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	15	5	replace
173	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	15	5	replace
174	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();    [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;	      if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
